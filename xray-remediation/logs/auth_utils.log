2025-07-16 21:25:46,244 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:25:54,413 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:25:55,154 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:25:55,154 - ERROR - Failed to create backup: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:26:20,591 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:26:22,395 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:27:44,645 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:27:45,497 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:28:07,121 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:29:19,511 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:29:20,841 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:30:14,091 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:30:14,894 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:31:46,101 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:31:46,975 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:36:00,642 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:36:01,609 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:20:48,810 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:20:49,562 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:21:09,914 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:21:44,924 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:21:46,676 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:22:33,370 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:22:34,202 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:22:34,203 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:22:34,205 - DEBUG - GraphQL request payload: {
  "query": "\n    query {\n        getTests(jql: \"project = FRAMED\", limit: 1) {\n            total\n        }\n    }\n    ",
  "variables": {}
}
2025-07-18 11:22:34,216 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:22:35,325 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 34
2025-07-18 11:22:35,326 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n                folder\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 5
  }
}
2025-07-18 11:22:35,327 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:22:35,947 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 168
2025-07-18 11:22:35,948 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:22:35,948 - ERROR - Response body: {"errors":[{"message":"Field \"folder\" of type \"Folder\" must have a selection of subfields. Did you mean \"folder { ... }\"?","locations":[{"line":8,"column":17}]}]}
2025-07-18 11:23:02,598 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:03,225 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:23:03,225 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:23:03,227 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:03,227 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:04,685 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:23:12,932 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:13,664 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:23:13,665 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:23:13,666 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:13,669 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:14,965 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:23:42,431 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:43,051 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:23:43,051 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:23:43,052 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:43,054 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:44,395 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:23:44,397 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:44,401 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:45,764 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:27:31,249 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:27:32,069 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:27:32,071 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:27:32,072 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:27:32,074 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:27:33,434 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:30:15,595 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158246",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:30:15,607 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:17,888 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:17,889 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:17,889 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:18,393 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158245",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:30:18,394 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:19,199 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:19,201 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:19,201 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:19,708 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158244",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:30:19,709 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:20,399 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:20,400 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:20,401 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:20,903 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158243",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:20,904 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:21,567 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:21,567 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:21,567 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:22,069 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158242",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:30:22,070 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:22,797 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:22,797 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:22,797 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:23,299 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158241",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "localization",
      "team_page"
    ]
  }
}
2025-07-18 11:30:23,300 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:24,029 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:24,029 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:24,029 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:24,533 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158240",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:24,535 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:25,216 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:25,217 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:25,217 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:25,722 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158239",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:25,724 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:26,498 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:26,499 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:26,499 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:27,006 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158238",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:27,010 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:27,789 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:27,789 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:27,789 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:28,290 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158237",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:30:28,292 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:28,853 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:28,854 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:28,854 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:29,359 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158236",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:29,360 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:29,845 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:29,845 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:29,845 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:30,347 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158235",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:30,348 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:31,068 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:31,068 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:31,068 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:31,569 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158234",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "parametrize",
      "team_page"
    ]
  }
}
2025-07-18 11:30:31,570 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:32,267 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:32,268 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:32,268 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:32,770 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158233",
    "labels": [
      "api",
      "cross_platform",
      "low",
      "team_page"
    ]
  }
}
2025-07-18 11:30:32,770 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:33,444 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:33,444 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:33,445 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:33,949 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158232",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "integration",
      "team_page"
    ]
  }
}
2025-07-18 11:30:33,956 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:34,656 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:34,657 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:34,657 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:35,159 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158231",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "integration",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:30:35,163 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:35,906 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:35,907 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:35,907 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:36,412 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158230",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "integration",
      "live_state",
      "team_page"
    ]
  }
}
2025-07-18 11:30:36,415 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:37,029 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:37,029 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:37,029 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:37,532 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158229",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "integration",
      "team_page"
    ]
  }
}
2025-07-18 11:30:37,534 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:38,254 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:38,254 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:38,254 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:38,759 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158228",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:38,761 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:39,383 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:39,383 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:39,383 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:39,889 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158227",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:30:39,890 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:40,587 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:40,587 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:40,587 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:41,097 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158226",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:41,114 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:41,818 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:41,818 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:41,818 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:42,319 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158225",
    "labels": [
      "api",
      "cross_platform",
      "final_state",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:42,321 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:43,243 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:43,243 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:43,243 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:43,749 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158224",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "suspended_state",
      "team_page"
    ]
  }
}
2025-07-18 11:30:43,750 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:44,357 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:44,358 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:44,358 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:44,859 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158223",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:44,861 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:45,621 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:45,705 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:45,705 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:46,213 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158222",
    "labels": [
      "api",
      "cross_platform",
      "delayed_state",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:46,218 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:46,922 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:46,923 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:46,923 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:47,425 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158221",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "live_state",
      "requires_live_game",
      "team_page"
    ]
  }
}
2025-07-18 11:30:47,427 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:48,022 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:48,022 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:48,022 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:48,528 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158220",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:48,529 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:49,006 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:49,006 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:49,006 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:49,511 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158219",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "preview_state",
      "team_page"
    ]
  }
}
2025-07-18 11:30:49,514 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:50,181 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:50,181 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:50,181 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:50,684 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158215",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:50,685 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:51,180 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:51,181 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:51,181 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:51,684 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158214",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:51,685 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:52,379 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:52,381 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:52,415 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:52,936 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158213",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "navigation",
      "team_page"
    ]
  }
}
2025-07-18 11:30:52,937 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:53,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:53,636 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:53,636 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:54,150 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158212",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:54,153 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:56,391 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:56,392 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:56,392 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:56,898 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158211",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "live_state",
      "requires_live_game",
      "team_page"
    ]
  }
}
2025-07-18 11:30:56,904 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:57,674 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:57,674 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:57,674 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:58,180 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158210",
    "labels": [
      "api",
      "cross_platform",
      "localization",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:58,186 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:59,206 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:59,206 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:59,206 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:59,709 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158209",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "localization",
      "team_page"
    ]
  }
}
2025-07-18 11:30:59,711 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:01,276 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:01,276 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:01,276 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:01,786 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158208",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "localization",
      "team_page"
    ]
  }
}
2025-07-18 11:31:01,788 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:02,400 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:02,401 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:02,401 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:02,905 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158207",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:31:02,915 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:03,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:03,701 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:03,701 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:04,203 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158206",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "parametrize",
      "team_page"
    ]
  }
}
2025-07-18 11:31:04,206 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:04,729 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:04,729 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:04,729 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:05,238 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158205",
    "labels": [
      "api",
      "critical",
      "cross_platform",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:31:05,243 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:06,550 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:06,550 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:06,550 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:07,055 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158204",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "live_state",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:31:07,058 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:07,754 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:07,755 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:07,755 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:08,258 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158201",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "opening_day",
      "performance",
      "postseason",
      "team_page"
    ]
  }
}
2025-07-18 11:31:08,260 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:08,924 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:08,924 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:08,924 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:09,430 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158199",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:31:09,431 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:10,330 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:10,330 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:10,330 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:10,836 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158196",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:31:10,847 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:11,539 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:11,539 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:11,539 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:12,047 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158191",
    "labels": [
      "api",
      "cross_platform",
      "international",
      "jewel_event",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:31:12,050 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:12,561 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:12,561 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:12,561 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:13,063 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158188",
    "labels": [
      "api",
      "cross_platform",
      "jewel_event",
      "medium",
      "spring_training",
      "team_page"
    ]
  }
}
2025-07-18 11:31:13,073 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:13,806 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:13,807 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:13,807 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:14,312 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158185",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page",
      "world_series"
    ]
  }
}
2025-07-18 11:31:14,314 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:15,095 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:15,096 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:15,096 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:15,600 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158183",
    "labels": [
      "all_star",
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:31:15,601 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:16,354 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:16,354 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:16,354 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:16,855 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158180",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "opening_day",
      "team_page"
    ]
  }
}
2025-07-18 11:31:16,856 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:17,555 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:17,556 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:17,556 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:54:35,748 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:54:36,627 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:54:36,629 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:54:36,631 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels {\n            getTests(jql: \"project = FRAMED AND labels IS NOT EMPTY\", limit: 100) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {}
}
2025-07-18 11:54:36,632 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:54:38,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:56:27,780 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:56:28,774 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:56:28,774 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:56:28,775 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels {\n            getTests(jql: \"project = FRAMED AND labels IS NOT EMPTY\", limit: 100) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {}
}
2025-07-18 11:56:28,776 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:56:30,077 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:00:47,827 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:00:48,541 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:00:48,542 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:00:48,554 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:00:48,555 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:00:52,298 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:00:59,079 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:00:59,658 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:00:59,659 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:00:59,664 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:00:59,665 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:00,891 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:01:00,894 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:00,903 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:01,510 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:01,511 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:01,511 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:01,719 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:01,725 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:03,051 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:03,051 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:03,051 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:03,259 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Core Endpoints",
    "parentId": null
  }
}
2025-07-18 12:01:03,274 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:04,141 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:04,142 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:04,142 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:04,345 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:04,347 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:05,285 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:05,286 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:05,286 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:05,495 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:05,497 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:06,241 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:06,242 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:06,242 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:06,444 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Data Validation",
    "parentId": null
  }
}
2025-07-18 12:01:06,446 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:07,387 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:07,388 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:07,388 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:07,599 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:07,601 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:08,195 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:08,196 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:08,196 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:08,399 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:08,400 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:08,955 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:08,955 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:08,955 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:09,164 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Error Handling",
    "parentId": null
  }
}
2025-07-18 12:01:09,166 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:09,723 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:09,723 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:09,724 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:09,927 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:09,930 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:10,484 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:10,484 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:10,484 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:10,689 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:10,690 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:11,300 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:11,301 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:11,301 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:11,506 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Game States",
    "parentId": null
  }
}
2025-07-18 12:01:11,508 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:12,245 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:12,246 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:12,246 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:12,451 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:12,456 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:13,101 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:13,102 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:13,102 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:13,319 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:13,321 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:13,831 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:13,834 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:13,834 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:14,040 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Integration Tests",
    "parentId": null
  }
}
2025-07-18 12:01:14,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:14,952 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:14,954 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:14,954 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:15,155 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:15,157 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:21,054 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:21,056 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:21,056 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:21,261 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:21,263 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:22,266 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:22,267 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:22,267 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:22,471 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Jewel Events",
    "parentId": null
  }
}
2025-07-18 12:01:22,474 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:23,135 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:23,136 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:23,136 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:23,341 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:23,344 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:24,094 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:24,100 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:24,100 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:24,304 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:24,306 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:25,076 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:25,077 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:25,077 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:25,281 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Performance Tests",
    "parentId": null
  }
}
2025-07-18 12:01:25,283 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:26,037 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:26,038 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:26,038 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:26,243 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:26,246 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:26,985 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:26,986 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:26,986 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:27,191 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:27,193 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:27,830 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:27,830 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:27,830 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:28,035 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Regression Tests",
    "parentId": null
  }
}
2025-07-18 12:01:28,037 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:28,753 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:28,755 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:28,755 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:28,960 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:28,962 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:29,664 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:29,665 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:29,665 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:29,877 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:29,882 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:30,789 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:30,789 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:30,790 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:30,996 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Security Tests",
    "parentId": null
  }
}
2025-07-18 12:01:30,997 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:31,518 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:31,518 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:31,518 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:31,722 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:31,723 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:32,459 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:32,460 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:32,460 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:32,665 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Content Display",
    "parentId": null
  }
}
2025-07-18 12:01:32,666 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:33,386 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:33,392 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:33,392 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:33,596 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:33,597 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:34,503 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:34,504 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:34,504 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:34,709 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Core Navigation",
    "parentId": null
  }
}
2025-07-18 12:01:34,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:35,499 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:35,501 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:35,501 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:35,709 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:35,711 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:37,316 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:37,317 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:37,317 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:37,523 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Date Bar",
    "parentId": null
  }
}
2025-07-18 12:01:37,527 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:38,068 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:38,069 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:38,070 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:38,276 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:38,279 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:39,157 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:39,158 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:39,158 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:39,361 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Game States",
    "parentId": null
  }
}
2025-07-18 12:01:39,363 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:40,034 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:40,034 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:40,035 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:40,242 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:40,243 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:40,803 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:40,804 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:40,804 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:41,010 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Jewel Events",
    "parentId": null
  }
}
2025-07-18 12:01:41,012 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:41,746 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:41,747 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:41,747 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:41,955 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:41,957 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:42,677 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:42,678 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:42,678 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:42,884 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Matchup Display",
    "parentId": null
  }
}
2025-07-18 12:01:42,886 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:43,416 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:43,417 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:43,417 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:43,622 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:43,626 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:44,201 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:44,202 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:44,202 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:44,406 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Product Links",
    "parentId": null
  }
}
2025-07-18 12:01:44,409 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:45,163 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:45,163 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:45,163 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:02:05,824 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:06,692 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:02:06,693 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:02:06,697 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:02:06,699 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:08,064 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:02:40,514 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:41,923 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:02:41,928 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:02:41,931 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetFolders($projectKey: String!) {\n        getTestRepositoryFolders(projectKey: $projectKey, folderId: null) {\n            folders {\n                id\n                name\n                path\n            }\n        }\n    }\n    ",
  "variables": {
    "projectKey": "FRAMED"
  }
}
2025-07-18 12:02:41,933 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:42,681 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 129
2025-07-18 12:02:42,682 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:02:42,683 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getTestRepositoryFolders\" on type \"Query\".","locations":[{"line":3,"column":9}]}]}
2025-07-18 12:02:42,692 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateFolder($projectKey: String!, $name: String!) {\n        createFolder(projectKey: $projectKey, name: $name, testRepositoryPath: \"/\") {\n            folder {\n                id\n                name\n                path\n            }\n        }\n    }\n    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Test Folder"
  }
}
2025-07-18 12:02:42,694 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:43,520 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 686
2025-07-18 12:02:43,522 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:02:43,522 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectKey\" on field \"createFolder\" of type \"Mutation\". Did you mean \"projectId\"?","locations":[{"line":3,"column":22}]},{"message":"Unknown argument \"name\" on field \"createFolder\" of type \"Mutation\".","locations":[{"line":3,"column":47}]},{"message":"Unknown argument \"testRepositoryPath\" on field \"createFolder\" of type \"Mutation\".","locations":[{"line":3,"column":60}]},{"message":"Cannot query field \"id\" on type \"SimpleFolderResults\".","locations":[{"line":5,"column":17}]},{"message":"Field \"createFolder\" argument \"path\" of type \"String!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-07-18 12:03:22,073 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:22,776 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:03:22,778 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:03:22,779 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:22,782 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:23,921 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:03:23,937 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:23,944 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:25,476 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:03:40,968 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:41,724 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:03:41,728 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:03:41,730 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:41,738 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:42,966 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:03:42,977 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:42,979 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:44,385 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:04:58,914 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:04:59,709 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:04:59,710 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:04:59,710 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:04:59,711 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:01,214 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:05:01,225 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:05:01,230 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:02,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:05:02,715 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158177"
    ]
  }
}
2025-07-18 12:05:02,728 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:03,449 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:03,451 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:03,451 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:03,453 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158175"
    ]
  }
}
2025-07-18 12:05:03,465 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:04,018 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:04,020 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:04,021 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:04,021 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158174"
    ]
  }
}
2025-07-18 12:05:04,025 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:04,769 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:04,771 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:04,771 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:04,771 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158172"
    ]
  }
}
2025-07-18 12:05:04,775 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:05,316 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:05,317 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:05,317 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:05,321 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158170"
    ]
  }
}
2025-07-18 12:05:05,327 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:05,862 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:05,864 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:05,864 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:05,865 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158226",
    "preconditionIssueIds": [
      "1158169"
    ]
  }
}
2025-07-18 12:05:05,867 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:06,627 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:06,628 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:06,628 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:06,633 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158167"
    ]
  }
}
2025-07-18 12:05:06,635 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:07,233 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:07,234 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:07,234 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:07,237 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158224",
    "preconditionIssueIds": [
      "1158165"
    ]
  }
}
2025-07-18 12:05:07,239 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:08,000 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:08,001 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:08,001 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:08,002 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158163"
    ]
  }
}
2025-07-18 12:05:08,003 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:08,695 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:08,695 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:08,695 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:08,696 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158220",
    "preconditionIssueIds": [
      "1158162"
    ]
  }
}
2025-07-18 12:05:08,697 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:09,370 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:09,374 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:09,374 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:09,374 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158160"
    ]
  }
}
2025-07-18 12:05:09,375 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:10,293 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:10,294 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:10,295 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:10,295 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158158"
    ]
  }
}
2025-07-18 12:05:10,301 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:11,053 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:11,057 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:11,057 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:11,057 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158156"
    ]
  }
}
2025-07-18 12:05:11,058 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:11,880 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:11,881 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:11,881 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:11,881 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158154"
    ]
  }
}
2025-07-18 12:05:11,882 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:12,536 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:12,537 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:12,537 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:12,537 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158153"
    ]
  }
}
2025-07-18 12:05:12,538 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:13,312 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:13,460 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:13,461 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:13,481 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158201",
    "preconditionIssueIds": [
      "1158151"
    ]
  }
}
2025-07-18 12:05:13,515 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:14,221 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:14,235 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:14,236 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:14,246 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158201",
    "preconditionIssueIds": [
      "1158149"
    ]
  }
}
2025-07-18 12:05:14,253 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:14,987 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:14,988 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:14,988 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:14,988 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158210",
    "preconditionIssueIds": [
      "1158147"
    ]
  }
}
2025-07-18 12:05:14,990 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:15,532 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:15,534 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:15,534 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:15,534 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158146"
    ]
  }
}
2025-07-18 12:05:15,536 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:16,153 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:16,153 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:16,154 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:16,154 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158144"
    ]
  }
}
2025-07-18 12:05:16,155 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:16,857 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:16,858 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:16,858 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:16,859 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158142"
    ]
  }
}
2025-07-18 12:05:16,860 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:17,446 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:17,447 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:17,447 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:17,447 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158140"
    ]
  }
}
2025-07-18 12:05:17,448 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:18,038 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:18,039 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:18,039 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:18,040 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158139"
    ]
  }
}
2025-07-18 12:05:18,043 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:18,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:18,635 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:18,635 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:18,635 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158138"
    ]
  }
}
2025-07-18 12:05:18,636 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:19,263 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:19,265 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:19,265 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:19,266 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158137"
    ]
  }
}
2025-07-18 12:05:19,268 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:20,053 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:20,054 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:20,054 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:20,055 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158136"
    ]
  }
}
2025-07-18 12:05:20,056 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:21,123 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:21,123 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:21,123 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:21,124 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158135"
    ]
  }
}
2025-07-18 12:05:21,124 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:21,901 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:21,904 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:21,905 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:21,906 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158134"
    ]
  }
}
2025-07-18 12:05:21,909 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:22,619 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:22,619 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:22,619 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:22,623 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158226",
    "preconditionIssueIds": [
      "1158133"
    ]
  }
}
2025-07-18 12:05:22,629 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:23,483 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:23,485 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:23,485 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:23,487 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158132"
    ]
  }
}
2025-07-18 12:05:23,491 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:24,217 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:24,219 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:24,219 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:24,219 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158224",
    "preconditionIssueIds": [
      "1158131"
    ]
  }
}
2025-07-18 12:05:24,221 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:24,972 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:24,974 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:24,974 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:24,974 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158130"
    ]
  }
}
2025-07-18 12:05:24,975 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:25,650 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:25,650 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:25,650 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:25,651 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158220",
    "preconditionIssueIds": [
      "1158129"
    ]
  }
}
2025-07-18 12:05:25,652 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:26,204 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:26,205 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:26,205 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:26,206 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158128"
    ]
  }
}
2025-07-18 12:05:26,207 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:27,976 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:27,978 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:27,978 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:27,982 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158127"
    ]
  }
}
2025-07-18 12:05:27,984 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:28,610 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:28,610 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:28,610 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:28,612 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158126"
    ]
  }
}
2025-07-18 12:05:28,613 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:29,229 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:29,230 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:29,230 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:29,230 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158125"
    ]
  }
}
2025-07-18 12:05:29,231 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:29,800 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:29,801 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:29,801 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:29,802 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158124"
    ]
  }
}
2025-07-18 12:05:29,805 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:30,478 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:30,479 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:30,479 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:30,481 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158123"
    ]
  }
}
2025-07-18 12:05:30,483 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:30,989 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:30,989 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:30,989 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:30,990 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158122"
    ]
  }
}
2025-07-18 12:05:30,992 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:31,669 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:31,670 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:31,670 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:31,671 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158121"
    ]
  }
}
2025-07-18 12:05:31,673 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:32,300 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:32,301 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:32,301 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:32,301 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158120"
    ]
  }
}
2025-07-18 12:05:32,302 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:32,811 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:32,814 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:32,814 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 14:10:17,737 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:18,573 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 14:10:18,574 - INFO - Successfully obtained Xray authentication token
2025-07-18 14:10:18,576 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 14:10:18,578 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:19,991 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 14:10:19,992 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 14:10:19,993 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:21,230 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 14:10:21,240 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158211",
    "preconditionIssueIds": [
      "1158177"
    ]
  }
}
2025-07-18 14:10:21,240 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:22,472 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:22,473 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158175"
    ]
  }
}
2025-07-18 14:10:22,475 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:23,648 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:23,649 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158174"
    ]
  }
}
2025-07-18 14:10:23,651 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:24,904 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:24,906 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158172"
    ]
  }
}
2025-07-18 14:10:24,907 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:26,078 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:26,083 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158170"
    ]
  }
}
2025-07-18 14:10:26,086 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:27,336 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:27,338 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158169"
    ]
  }
}
2025-07-18 14:10:27,340 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:29,251 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:29,252 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158167"
    ]
  }
}
2025-07-18 14:10:29,253 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:30,532 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:30,532 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158165"
    ]
  }
}
2025-07-18 14:10:30,533 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:31,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:31,638 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158163"
    ]
  }
}
2025-07-18 14:10:31,640 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:32,865 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:32,866 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158162"
    ]
  }
}
2025-07-18 14:10:32,868 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:34,062 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:34,064 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158160"
    ]
  }
}
2025-07-18 14:10:34,065 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:35,424 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:35,430 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158158"
    ]
  }
}
2025-07-18 14:10:35,438 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:36,747 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:36,750 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158156"
    ]
  }
}
2025-07-18 14:10:36,751 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:38,107 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:38,107 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158154"
    ]
  }
}
2025-07-18 14:10:38,109 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:39,273 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:39,275 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158153"
    ]
  }
}
2025-07-18 14:10:39,277 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:40,293 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:40,300 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158151"
    ]
  }
}
2025-07-18 14:10:40,310 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:41,366 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:41,368 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158149"
    ]
  }
}
2025-07-18 14:10:41,370 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:42,554 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:42,556 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158210",
    "preconditionIssueIds": [
      "1158147"
    ]
  }
}
2025-07-18 14:10:42,558 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:43,527 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:43,530 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158146"
    ]
  }
}
2025-07-18 14:10:43,532 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:44,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:44,701 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158144"
    ]
  }
}
2025-07-18 14:10:44,702 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:45,973 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:45,973 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158142"
    ]
  }
}
2025-07-18 14:10:45,974 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:47,136 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:47,139 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158207",
    "preconditionIssueIds": [
      "1158140"
    ]
  }
}
2025-07-18 14:10:47,144 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:48,258 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:48,259 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158211",
    "preconditionIssueIds": [
      "1158138"
    ]
  }
}
2025-07-18 14:10:48,262 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:49,460 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:49,462 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158137"
    ]
  }
}
2025-07-18 14:10:49,464 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:50,464 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:50,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158136"
    ]
  }
}
2025-07-18 14:10:50,487 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:51,803 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:51,804 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158135"
    ]
  }
}
2025-07-18 14:10:51,805 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:53,132 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:53,133 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158134"
    ]
  }
}
2025-07-18 14:10:53,134 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:54,327 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:54,328 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158133"
    ]
  }
}
2025-07-18 14:10:54,329 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:55,472 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:55,474 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158132"
    ]
  }
}
2025-07-18 14:10:55,475 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:56,658 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:56,659 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158131"
    ]
  }
}
2025-07-18 14:10:56,661 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:59,065 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:59,068 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158130"
    ]
  }
}
2025-07-18 14:10:59,071 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:00,335 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:00,338 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158129"
    ]
  }
}
2025-07-18 14:11:00,339 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:01,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:01,420 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158128"
    ]
  }
}
2025-07-18 14:11:01,421 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:02,769 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:02,770 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158127"
    ]
  }
}
2025-07-18 14:11:02,770 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:04,066 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:04,068 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158126"
    ]
  }
}
2025-07-18 14:11:04,069 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:05,405 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:05,406 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158125"
    ]
  }
}
2025-07-18 14:11:05,407 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:06,558 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:06,561 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158124"
    ]
  }
}
2025-07-18 14:11:06,563 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:07,939 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:07,940 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158123"
    ]
  }
}
2025-07-18 14:11:07,941 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:09,129 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:09,138 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158122"
    ]
  }
}
2025-07-18 14:11:09,145 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:10,418 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:10,421 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158207",
    "preconditionIssueIds": [
      "1158121"
    ]
  }
}
2025-07-18 14:11:10,426 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:11,686 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 23:06:56,132 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:57,040 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:06:57,041 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:06:57,041 - DEBUG - GraphQL request payload: {
  "query": "\n    query IntrospectFolderOperations {\n        __type(name: \"Mutation\") {\n            fields {\n                name\n                description\n                args {\n                    name\n                    type {\n                        name\n                        kind\n                        ofType {\n                            name\n                            kind\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-07-18 23:06:57,043 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:57,957 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:06:58,075 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:58,723 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:06:58,723 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:06:58,724 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetFolders($projectId: String!) {\n                getFolders(projectId: $projectId) {\n                    folders {\n                        id\n                        name\n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "projectKey": "FRAMED",
    "projectId": "FRAMED"
  }
}
2025-07-18 23:06:58,724 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:59,488 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 144
2025-07-18 23:06:59,489 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:06:59,489 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getFolders\" on type \"Query\". Did you mean \"getFolder\"?","locations":[{"line":3,"column":17}]}]}
2025-07-18 23:06:59,489 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTestRepository($projectKey: String!) {\n                getTestRepository(projectKey: $projectKey) {\n                    folders {\n                        id\n                        name\n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "projectKey": "FRAMED",
    "projectId": "FRAMED"
  }
}
2025-07-18 23:06:59,491 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:00,303 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 237
2025-07-18 23:07:00,303 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:07:00,303 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getTestRepository\" on type \"Query\". Did you mean \"getTestSet\", \"getTestSets\", \"getTestExecution\", \"getTestExecutions\", or \"getTestRunById\"?","locations":[{"line":3,"column":17}]}]}
2025-07-18 23:07:00,304 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:01,109 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:07:01,110 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:07:01,110 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation CreateFolder($path: String!, $projectId: String!) {\n                createFolder(path: $path, projectId: $projectId) {\n                    folder {\n                        id\n                        name\n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "path": "/Test Folder",
    "projectId": "FRAMED"
  }
}
2025-07-18 23:07:01,110 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:01,767 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 122
2025-07-18 23:07:01,767 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:07:01,767 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"id\" on type \"SimpleFolderResults\".","locations":[{"line":5,"column":25}]}]}
2025-07-18 23:07:01,768 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation CreateFolder($projectKey: String!, $name: String!) {\n                createFolder(projectKey: $projectKey, name: $name) {\n                    folder {\n                        id\n                        name  \n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Test Folder"
  }
}
2025-07-18 23:07:01,768 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:02,532 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 548
2025-07-18 23:07:02,533 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:07:02,533 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectKey\" on field \"createFolder\" of type \"Mutation\". Did you mean \"projectId\"?","locations":[{"line":3,"column":30}]},{"message":"Unknown argument \"name\" on field \"createFolder\" of type \"Mutation\".","locations":[{"line":3,"column":55}]},{"message":"Cannot query field \"id\" on type \"SimpleFolderResults\".","locations":[{"line":5,"column":25}]},{"message":"Field \"createFolder\" argument \"path\" of type \"String!\" is required but not provided.","locations":[{"line":3,"column":17}]}]}
2025-07-18 23:12:57,005 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:12:57,554 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:12:57,555 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:12:57,559 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:12:57,559 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:12:59,866 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:13:18,430 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:19,547 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:13:19,548 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:13:19,550 - DEBUG - GraphQL request payload: {
  "query": "\nquery GetTests($jql: String\\!, $limit: Int\\!) {\n    getTests(jql: $jql, limit: $limit) {\n        total\n        results {\n            issueId\n            jira(fields: [\"key\", \"summary\", \"labels\"])\n            folder {\n                path\n            }\n        }\n    }\n}\n",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:13:19,550 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:20,398 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 125
2025-07-18 23:13:20,399 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:13:20,399 - ERROR - Response body: {"errors":[{"message":"Syntax Error: Cannot parse the unexpected character \"\\\\\".","locations":[{"line":2,"column":28}]}]}
2025-07-18 23:13:49,989 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:50,630 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:13:50,630 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:13:50,631 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n                folder {\n                    path\n                }\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:13:50,632 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:52,244 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:14:01,941 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:02,707 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:14:02,707 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:14:02,709 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:14:02,709 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:04,072 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:14:04,073 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:04,075 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:05,027 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:05,028 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:05,234 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:14:05,237 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:06,097 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:06,097 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:06,302 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:06,303 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:07,272 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:07,273 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:07,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:14:07,481 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:08,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:08,413 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:08,625 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:08,628 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:09,406 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:09,406 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:09,613 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:14:09,616 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:10,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:10,412 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:10,615 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:10,617 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:11,464 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:11,465 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:11,669 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:14:11,672 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:12,530 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:12,531 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:12,738 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:12,741 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:13,649 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:13,650 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:13,855 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:14:13,857 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:14,802 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:14,802 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:15,013 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:15,014 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:16,144 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:16,145 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:16,349 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:14:16,350 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:17,252 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:17,252 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:17,458 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:17,459 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:18,403 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:18,403 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:18,609 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:14:18,612 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:19,493 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:19,494 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:19,698 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:19,702 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:20,599 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:20,600 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:20,805 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:14:20,808 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:21,659 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:21,659 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:21,866 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:21,868 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:22,551 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:22,552 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:22,757 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:14:22,759 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:23,550 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:23,550 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:23,756 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:23,762 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:24,561 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:24,561 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:24,763 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:14:24,767 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:25,734 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:25,734 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:25,941 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:25,943 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:26,869 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:26,869 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:27,075 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:14:27,078 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:27,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:27,878 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:28,083 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:28,087 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:28,820 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:28,821 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:29,027 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:14:29,029 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:30,245 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:30,245 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:30,451 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:30,454 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:31,328 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:31,329 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:31,535 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:14:31,536 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:32,342 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:32,343 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:32,549 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:32,550 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:33,197 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:33,198 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:33,405 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:14:33,409 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:34,094 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:34,095 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:34,300 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:34,302 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:35,131 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:35,133 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:35,335 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:14:35,338 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:36,173 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:36,173 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:36,377 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:36,378 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:37,076 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:37,077 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:37,282 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:14:37,285 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:37,981 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:37,982 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:15,227 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:16,117 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:15:16,118 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:15:16,118 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetProjectInfo {\n        getTests(jql: \"project = FRAMED\", limit: 1) {\n            results {\n                projectId\n                jira(fields: [\"project\"])\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-07-18 23:15:16,120 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:17,581 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 688
2025-07-18 23:15:24,151 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:24,788 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:15:24,789 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:15:24,790 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:15:24,791 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:26,341 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:15:26,344 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:26,346 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:27,567 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:27,567 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:27,773 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:15:27,778 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:28,639 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:28,639 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:28,842 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:28,843 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:29,626 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:29,627 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:29,832 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:15:29,836 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:30,812 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:30,813 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:31,014 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:31,020 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:31,916 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:31,935 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:32,141 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:15:32,142 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:33,030 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:33,030 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:33,233 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:33,235 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:33,901 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:33,909 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:34,114 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:15:34,117 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:34,832 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:34,833 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:35,037 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:35,038 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:35,853 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:35,853 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:36,058 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:15:36,059 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:36,999 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:36,999 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:37,204 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:37,207 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:38,119 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:38,119 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:38,324 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:15:38,327 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:39,097 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:39,099 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:39,305 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:39,307 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:40,025 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:40,026 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:40,229 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:15:40,230 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:41,272 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:41,273 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:41,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:41,482 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:42,313 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:42,314 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:42,515 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:15:42,517 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:43,533 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:43,533 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:43,738 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:43,738 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:44,658 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:44,660 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:44,866 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:15:44,868 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:45,772 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:45,775 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:45,980 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:45,982 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:46,900 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:46,900 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:47,106 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:15:47,109 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:47,931 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:47,931 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:48,136 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:48,140 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:48,835 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:48,836 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:49,042 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:15:49,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:49,920 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:49,921 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:50,128 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:50,132 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:50,987 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:50,988 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:51,194 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:15:51,197 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:52,159 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:52,160 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:52,366 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:52,369 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:53,215 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:53,216 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:53,421 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:15:53,424 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:54,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:54,278 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:54,484 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:54,487 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:55,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:55,412 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:55,618 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:15:55,620 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:56,454 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:56,456 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:56,669 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:56,670 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:57,312 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:57,313 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:57,517 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:15:57,517 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:58,508 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:58,509 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:58,717 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:58,719 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:59,542 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:59,543 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:59,747 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:15:59,750 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:00,559 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:16:00,559 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:16:32,962 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:33,462 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:16:33,465 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:16:33,469 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:16:33,469 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:34,954 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:16:34,956 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page"
  }
}
2025-07-18 23:16:34,958 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:36,282 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 106
2025-07-18 23:16:36,489 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:16:36,491 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:37,705 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 114
2025-07-18 23:16:37,911 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:16:37,912 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:39,043 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 128
2025-07-18 23:16:39,246 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:16:39,249 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:40,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 120
2025-07-18 23:16:40,484 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:16:40,486 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:41,720 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 128
2025-07-18 23:16:41,926 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:16:41,929 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:43,143 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 128
2025-07-18 23:16:43,347 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:16:43,349 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:44,397 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 122
2025-07-18 23:16:44,604 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:16:44,605 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:45,751 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 124
2025-07-18 23:16:45,956 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:16:45,958 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:47,117 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 116
2025-07-18 23:16:47,323 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:16:47,326 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:48,462 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 130
2025-07-18 23:16:48,669 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:16:48,671 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:49,965 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 142
2025-07-18 23:16:50,173 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:16:50,176 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:51,093 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 138
2025-07-18 23:16:51,298 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:16:51,301 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:52,269 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 132
2025-07-18 23:16:52,475 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:16:52,477 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:53,679 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 136
2025-07-18 23:16:53,883 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:16:53,884 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:54,899 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 142
2025-07-18 23:16:55,104 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:16:55,106 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:56,191 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 136
2025-07-18 23:16:56,397 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:16:56,397 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:57,499 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 140
2025-07-18 23:16:57,705 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:16:57,708 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:58,659 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 136
2025-07-18 23:17:19,284 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:19,895 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:17:19,895 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:17:19,897 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:17:19,898 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:21,409 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:17:21,411 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page"
  }
}
2025-07-18 23:17:21,412 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:22,515 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-07-18 23:17:22,516 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:22,719 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:17:22,723 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:23,873 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 192
2025-07-18 23:17:23,873 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Date Bar already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:24,078 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:17:24,079 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:25,198 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 199
2025-07-18 23:17:25,199 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Core Navigation already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:25,402 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:17:25,405 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:26,548 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 195
2025-07-18 23:17:26,549 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Game States already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:26,754 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:17:26,756 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:27,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 197
2025-07-18 23:17:27,876 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Product Links already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:28,082 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:17:28,084 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:29,065 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 199
2025-07-18 23:17:29,066 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Matchup Display already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:29,271 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:17:29,275 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:30,167 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-07-18 23:17:30,168 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Jewel Events already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:30,373 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:17:30,376 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:31,490 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 199
2025-07-18 23:17:31,490 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Content Display already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:31,696 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:17:31,699 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:32,646 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-07-18 23:17:32,647 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:32,853 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:17:32,858 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:33,976 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 208
2025-07-18 23:17:33,976 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Security Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:34,182 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:17:34,185 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:35,316 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 208
2025-07-18 23:17:35,317 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Core Endpoints already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:35,521 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:17:35,525 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:36,440 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 209
2025-07-18 23:17:36,441 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Data Validation already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:36,642 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:17:36,643 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:37,504 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 210
2025-07-18 23:17:37,506 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Regression Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:37,712 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:17:37,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:38,762 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 205
2025-07-18 23:17:38,772 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Game States already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:38,975 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:17:38,976 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:40,094 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 211
2025-07-18 23:17:40,095 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Performance Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:40,300 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:17:40,302 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:41,184 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 208
2025-07-18 23:17:41,184 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Error Handling already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:41,390 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:17:41,391 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:42,478 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 211
2025-07-18 23:17:42,479 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Integration Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:42,684 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:42,685 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:43,788 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 206
2025-07-18 23:17:43,789 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Jewel Events already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:43,993 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158191",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:43,994 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:44,932 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:45,434 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158188",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:45,435 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:46,400 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:46,906 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158185",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:46,909 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:47,834 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:48,340 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158183",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:48,343 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:49,512 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:50,015 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158180",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:50,018 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:51,129 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-29 13:40:33,307 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:33,817 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:40:33,818 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:40:37,416 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:37,805 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:40:37,806 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:40:55,624 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:56,019 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:40:56,020 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:40:56,021 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Get Team Page - Valid Team",
          "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@critical",
            "@cross-platform"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
          "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
          "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
        },
        {
          "action": "Validate response schema",
          "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
          "result": "All required fields present | Section IDs format correct"
        }
      ]
    }
  }
}
2025-07-29 13:40:56,023 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:56,418 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:40:56,419 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:40:56,420 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:40:57,425 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Missing Team ID",
          "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@medium",
            "@cross-platform"
          ],
          "priority": {
            "name": "Medium"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
          "data": "Direct API call without teamId parameter",
          "result": "Status: 400 | Error message present | Contains expected error keys"
        },
        {
          "action": "Validate error response structure",
          "data": "Direct API call without teamId parameter",
          "result": "Response contains httpStatus or message | Proper error structure"
        }
      ]
    }
  }
}
2025-07-29 13:40:57,426 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:57,822 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:40:57,822 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:40:57,823 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:40:58,828 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "iOS User Agent",
          "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@ios"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
          "data": "User-Agent: MLB/24.24.0/iPhone",
          "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
        }
      ]
    }
  }
}
2025-07-29 13:40:58,829 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:59,333 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:40:59,333 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:40:59,333 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:00,335 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Android User Agent",
          "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@android"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send request with User-Agent: MLB/25.2.0/android",
          "data": "User-Agent: MLB/25.2.0/android",
          "result": "Article carousel returned | Android-specific content"
        }
      ]
    }
  }
}
2025-07-29 13:41:00,343 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:00,718 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:00,719 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:00,719 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:01,725 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "iPad User Agent",
          "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@medium",
            "@ipad"
          ],
          "priority": {
            "name": "Medium"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send request with User-Agent: MLB/24.24.0/iPad",
          "data": "User-Agent: MLB/24.24.0/iPad",
          "result": "Editorial with blurbs | Tablet-optimized layout"
        }
      ]
    }
  }
}
2025-07-29 13:41:01,732 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:02,224 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:02,224 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:02,225 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:03,230 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Postseason Team Page Sections",
          "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@cross-platform",
            "@jewel-event",
            "@postseason"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376",
        "FRAMED-1363"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
          "data": "Playoff-qualified team, Test Period: Postseason",
          "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
        }
      ]
    }
  }
}
2025-07-29 13:41:03,231 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:03,644 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:03,645 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:03,646 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:04,649 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Multiple Event Handling",
          "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@medium",
            "@cross-platform",
            "@jewel-event",
            "@all-star"
          ],
          "priority": {
            "name": "Medium"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376",
        "FRAMED-1367"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
          "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
          "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
        }
      ]
    }
  }
}
2025-07-29 13:41:04,651 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:05,107 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:05,107 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:05,107 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:06,113 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Jewel Event Localization",
          "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@cross-platform",
            "@jewel-event",
            "@localization"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376",
        "FRAMED-1364"
      ],
      "steps": [
        {
          "action": "Test all jewel events with Languages: en, es, ja",
          "data": "Languages: en, es, ja, Events: All jewel events",
          "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
        }
      ]
    }
  }
}
2025-07-29 13:41:06,115 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:06,520 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:06,520 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:06,520 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:07,535 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Response Time - Single Request",
          "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@cross-platform",
            "@performance"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Single request per team",
          "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
        },
        {
          "action": "Measure response time",
          "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "result": "Response time measured"
        },
        {
          "action": "Validate against SLA",
          "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "result": "SLA validation complete"
        }
      ]
    }
  }
}
2025-07-29 13:41:07,538 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:07,949 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:07,950 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:07,951 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:59,539 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:00,194 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:42:00,196 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:42:00,197 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Get Team Page - Valid Team",
        "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@critical",
          "@cross-platform"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
      },
      {
        "action": "Validate response schema",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "All required fields present | Section IDs format correct"
      }
    ]
  }
}
2025-07-29 13:42:00,200 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:00,611 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:00,615 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:00,616 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:01,621 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Missing Team ID",
        "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
        "data": "Direct API call without teamId parameter",
        "result": "Status: 400 | Error message present | Contains expected error keys"
      },
      {
        "action": "Validate error response structure",
        "data": "Direct API call without teamId parameter",
        "result": "Response contains httpStatus or message | Proper error structure"
      }
    ]
  }
}
2025-07-29 13:42:01,622 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:02,041 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:02,042 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:02,042 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:03,044 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iOS User Agent",
        "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@ios"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
        "data": "User-Agent: MLB/24.24.0/iPhone",
        "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
      }
    ]
  }
}
2025-07-29 13:42:03,049 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:03,470 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:03,471 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:03,471 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:04,475 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Android User Agent",
        "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@android"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/25.2.0/android",
        "data": "User-Agent: MLB/25.2.0/android",
        "result": "Article carousel returned | Android-specific content"
      }
    ]
  }
}
2025-07-29 13:42:04,479 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:04,988 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:04,988 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:04,989 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:05,995 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad User Agent",
        "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@ipad"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPad",
        "data": "User-Agent: MLB/24.24.0/iPad",
        "result": "Editorial with blurbs | Tablet-optimized layout"
      }
    ]
  }
}
2025-07-29 13:42:05,996 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:06,439 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:06,439 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:06,439 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:07,444 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Sections",
        "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@postseason"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376",
      "FRAMED-1363"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
        "data": "Playoff-qualified team, Test Period: Postseason",
        "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
      }
    ]
  }
}
2025-07-29 13:42:07,445 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:07,858 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:07,859 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:07,859 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:08,864 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Event Handling",
        "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform",
          "@jewel-event",
          "@all-star"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376",
      "FRAMED-1367"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
        "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
        "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
      }
    ]
  }
}
2025-07-29 13:42:08,865 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:09,318 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:09,319 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:09,319 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:10,322 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Jewel Event Localization",
        "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@localization"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376",
      "FRAMED-1364"
    ],
    "steps": [
      {
        "action": "Test all jewel events with Languages: en, es, ja",
        "data": "Languages: en, es, ja, Events: All jewel events",
        "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
      }
    ]
  }
}
2025-07-29 13:42:10,325 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:10,715 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:10,715 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:10,716 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:11,717 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Response Time - Single Request",
        "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@performance"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Single request per team",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
      },
      {
        "action": "Measure response time",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "Response time measured"
      },
      {
        "action": "Validate against SLA",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "SLA validation complete"
      }
    ]
  }
}
2025-07-29 13:42:11,718 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:12,161 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:12,162 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:12,162 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:44:48,901 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:49,412 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:44:49,412 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:44:49,412 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Get Team Page - Valid Team",
        "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@critical",
          "@cross-platform"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
      },
      {
        "action": "Validate response schema",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "All required fields present | Section IDs format correct"
      }
    ]
  }
}
2025-07-29 13:44:49,413 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:49,951 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:49,951 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:50,956 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Missing Team ID",
        "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
        "data": "Direct API call without teamId parameter",
        "result": "Status: 400 | Error message present | Contains expected error keys"
      },
      {
        "action": "Validate error response structure",
        "data": "Direct API call without teamId parameter",
        "result": "Response contains httpStatus or message | Proper error structure"
      }
    ]
  }
}
2025-07-29 13:44:50,960 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:51,537 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:51,538 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:52,542 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iOS User Agent",
        "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@ios"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
        "data": "User-Agent: MLB/24.24.0/iPhone",
        "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
      }
    ]
  }
}
2025-07-29 13:44:52,543 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:53,103 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:53,104 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:54,113 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Android User Agent",
        "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@android"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/25.2.0/android",
        "data": "User-Agent: MLB/25.2.0/android",
        "result": "Article carousel returned | Android-specific content"
      }
    ]
  }
}
2025-07-29 13:44:54,115 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:54,711 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:54,712 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:55,719 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad User Agent",
        "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@ipad"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPad",
        "data": "User-Agent: MLB/24.24.0/iPad",
        "result": "Editorial with blurbs | Tablet-optimized layout"
      }
    ]
  }
}
2025-07-29 13:44:55,721 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:56,275 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:56,276 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:57,287 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Sections",
        "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@postseason"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376",
      "FRAMED-1363"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
        "data": "Playoff-qualified team, Test Period: Postseason",
        "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
      }
    ]
  }
}
2025-07-29 13:44:57,292 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:57,904 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 233
2025-07-29 13:44:57,906 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376, FRAMED-1363!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:58,912 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Event Handling",
        "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform",
          "@jewel-event",
          "@all-star"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376",
      "FRAMED-1367"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
        "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
        "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
      }
    ]
  }
}
2025-07-29 13:44:58,915 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:59,540 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 233
2025-07-29 13:44:59,541 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376, FRAMED-1367!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:45:00,547 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Jewel Event Localization",
        "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@localization"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376",
      "FRAMED-1364"
    ],
    "steps": [
      {
        "action": "Test all jewel events with Languages: en, es, ja",
        "data": "Languages: en, es, ja, Events: All jewel events",
        "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
      }
    ]
  }
}
2025-07-29 13:45:00,551 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:01,154 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 233
2025-07-29 13:45:01,155 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376, FRAMED-1364!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:45:02,161 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Response Time - Single Request",
        "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@performance"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Single request per team",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
      },
      {
        "action": "Measure response time",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "Response time measured"
      },
      {
        "action": "Validate against SLA",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "SLA validation complete"
      }
    ]
  }
}
2025-07-29 13:45:02,163 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:02,738 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:45:02,739 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:45:34,236 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:34,625 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:45:34,626 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:45:34,627 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Get Team Page - Valid Team",
        "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@critical",
          "@cross-platform"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
      },
      {
        "action": "Validate response schema",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "All required fields present | Section IDs format correct"
      }
    ]
  }
}
2025-07-29 13:45:34,629 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:37,097 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 265
2025-07-29 13:45:38,103 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Missing Team ID",
        "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
        "data": "Direct API call without teamId parameter",
        "result": "Status: 400 | Error message present | Contains expected error keys"
      },
      {
        "action": "Validate error response structure",
        "data": "Direct API call without teamId parameter",
        "result": "Response contains httpStatus or message | Proper error structure"
      }
    ]
  }
}
2025-07-29 13:45:38,106 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:40,850 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 254
2025-07-29 13:45:41,854 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iOS User Agent",
        "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@ios"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
        "data": "User-Agent: MLB/24.24.0/iPhone",
        "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
      }
    ]
  }
}
2025-07-29 13:45:41,856 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:44,421 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 253
2025-07-29 13:45:45,422 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Android User Agent",
        "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@android"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/25.2.0/android",
        "data": "User-Agent: MLB/25.2.0/android",
        "result": "Article carousel returned | Android-specific content"
      }
    ]
  }
}
2025-07-29 13:45:45,425 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:48,232 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 257
2025-07-29 13:45:49,237 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad User Agent",
        "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@ipad"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPad",
        "data": "User-Agent: MLB/24.24.0/iPad",
        "result": "Editorial with blurbs | Tablet-optimized layout"
      }
    ]
  }
}
2025-07-29 13:45:49,240 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:51,798 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 254
2025-07-29 13:45:52,815 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Sections",
        "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@postseason"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175",
      "1158153"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
        "data": "Playoff-qualified team, Test Period: Postseason",
        "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
      }
    ]
  }
}
2025-07-29 13:45:52,831 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:55,455 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 277
2025-07-29 13:45:56,461 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Event Handling",
        "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform",
          "@jewel-event",
          "@all-star"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175",
      "1158160"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
        "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
        "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
      }
    ]
  }
}
2025-07-29 13:45:56,462 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:59,217 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 271
2025-07-29 13:46:00,224 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Jewel Event Localization",
        "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@localization"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175",
      "1158154"
    ],
    "steps": [
      {
        "action": "Test all jewel events with Languages: en, es, ja",
        "data": "Languages: en, es, ja, Events: All jewel events",
        "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
      }
    ]
  }
}
2025-07-29 13:46:00,225 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:46:02,686 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 272
2025-07-29 13:46:03,692 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Response Time - Single Request",
        "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@performance"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Single request per team",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
      },
      {
        "action": "Measure response time",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "Response time measured"
      },
      {
        "action": "Validate against SLA",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "SLA validation complete"
      }
    ]
  }
}
2025-07-29 13:46:03,697 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:46:06,285 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 269
