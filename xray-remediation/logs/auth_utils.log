2025-07-16 21:25:46,244 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:25:54,413 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:25:55,154 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:25:55,154 - ERROR - Failed to create backup: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:26:20,591 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:26:22,395 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:27:44,645 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:27:45,497 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:28:07,121 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:29:19,511 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:29:20,841 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:30:14,091 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:30:14,894 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:31:46,101 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:31:46,975 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-16 21:36:00,642 - INFO - Successfully obtained Xray authentication token
2025-07-16 21:36:01,609 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:20:48,810 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:20:49,562 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:21:09,914 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:21:44,924 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:21:46,676 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:22:33,370 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:22:34,202 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:22:34,203 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:22:34,205 - DEBUG - GraphQL request payload: {
  "query": "\n    query {\n        getTests(jql: \"project = FRAMED\", limit: 1) {\n            total\n        }\n    }\n    ",
  "variables": {}
}
2025-07-18 11:22:34,216 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:22:35,325 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 34
2025-07-18 11:22:35,326 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n                folder\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 5
  }
}
2025-07-18 11:22:35,327 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:22:35,947 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 168
2025-07-18 11:22:35,948 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:22:35,948 - ERROR - Response body: {"errors":[{"message":"Field \"folder\" of type \"Folder\" must have a selection of subfields. Did you mean \"folder { ... }\"?","locations":[{"line":8,"column":17}]}]}
2025-07-18 11:23:02,598 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:03,225 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:23:03,225 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:23:03,227 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:03,227 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:04,685 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:23:12,932 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:13,664 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:23:13,665 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:23:13,666 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:13,669 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:14,965 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:23:42,431 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:43,051 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:23:43,051 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:23:43,052 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:43,054 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:44,395 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:23:44,397 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:23:44,401 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:23:45,764 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:27:31,249 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:27:32,069 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:27:32,071 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:27:32,072 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 11:27:32,074 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:27:33,434 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:30:15,595 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158246",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:30:15,607 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:17,888 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:17,889 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:17,889 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:18,393 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158245",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:30:18,394 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:19,199 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:19,201 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:19,201 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:19,708 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158244",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:30:19,709 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:20,399 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:20,400 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:20,401 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:20,903 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158243",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:20,904 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:21,567 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:21,567 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:21,567 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:22,069 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158242",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:30:22,070 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:22,797 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:22,797 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:22,797 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:23,299 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158241",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "localization",
      "team_page"
    ]
  }
}
2025-07-18 11:30:23,300 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:24,029 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:24,029 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:24,029 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:24,533 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158240",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:24,535 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:25,216 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:25,217 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:25,217 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:25,722 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158239",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:25,724 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:26,498 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:26,499 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:26,499 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:27,006 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158238",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:27,010 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:27,789 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:27,789 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:27,789 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:28,290 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158237",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:30:28,292 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:28,853 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:28,854 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:28,854 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:29,359 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158236",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:29,360 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:29,845 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:29,845 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:29,845 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:30,347 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158235",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:30,348 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:31,068 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:31,068 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:31,068 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:31,569 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158234",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "parametrize",
      "team_page"
    ]
  }
}
2025-07-18 11:30:31,570 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:32,267 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:32,268 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:32,268 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:32,770 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158233",
    "labels": [
      "api",
      "cross_platform",
      "low",
      "team_page"
    ]
  }
}
2025-07-18 11:30:32,770 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:33,444 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:33,444 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:33,445 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:33,949 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158232",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "integration",
      "team_page"
    ]
  }
}
2025-07-18 11:30:33,956 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:34,656 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:34,657 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:34,657 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:35,159 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158231",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "integration",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:30:35,163 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:35,906 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:35,907 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:35,907 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:36,412 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158230",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "integration",
      "live_state",
      "team_page"
    ]
  }
}
2025-07-18 11:30:36,415 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:37,029 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:37,029 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:37,029 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:37,532 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158229",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "integration",
      "team_page"
    ]
  }
}
2025-07-18 11:30:37,534 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:38,254 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:38,254 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:38,254 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:38,759 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158228",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:38,761 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:39,383 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:39,383 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:39,383 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:39,889 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158227",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:30:39,890 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:40,587 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:40,587 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:40,587 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:41,097 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158226",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:41,114 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:41,818 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:41,818 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:41,818 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:42,319 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158225",
    "labels": [
      "api",
      "cross_platform",
      "final_state",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:42,321 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:43,243 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:43,243 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:43,243 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:43,749 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158224",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "suspended_state",
      "team_page"
    ]
  }
}
2025-07-18 11:30:43,750 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:44,357 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:44,358 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:44,358 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:44,859 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158223",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:44,861 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:45,621 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:45,705 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:45,705 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:46,213 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158222",
    "labels": [
      "api",
      "cross_platform",
      "delayed_state",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:46,218 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:46,922 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:46,923 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:46,923 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:47,425 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158221",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "live_state",
      "requires_live_game",
      "team_page"
    ]
  }
}
2025-07-18 11:30:47,427 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:48,022 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:48,022 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:48,022 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:48,528 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158220",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "team_page"
    ]
  }
}
2025-07-18 11:30:48,529 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:49,006 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:49,006 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:49,006 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:49,511 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158219",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "preview_state",
      "team_page"
    ]
  }
}
2025-07-18 11:30:49,514 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:50,181 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:50,181 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:50,181 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:50,684 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158215",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:50,685 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:51,180 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:51,181 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:51,181 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:51,684 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158214",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:51,685 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:52,379 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:52,381 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:52,415 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:52,936 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158213",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "navigation",
      "team_page"
    ]
  }
}
2025-07-18 11:30:52,937 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:53,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:53,636 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:53,636 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:54,150 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158212",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:54,153 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:56,391 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:56,392 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:56,392 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:56,898 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158211",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "live_state",
      "requires_live_game",
      "team_page"
    ]
  }
}
2025-07-18 11:30:56,904 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:57,674 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:57,674 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:57,674 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:58,180 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158210",
    "labels": [
      "api",
      "cross_platform",
      "localization",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:30:58,186 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:30:59,206 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:30:59,206 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:30:59,206 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:30:59,709 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158209",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "localization",
      "team_page"
    ]
  }
}
2025-07-18 11:30:59,711 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:01,276 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:01,276 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:01,276 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:01,786 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158208",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "localization",
      "team_page"
    ]
  }
}
2025-07-18 11:31:01,788 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:02,400 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:02,401 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:02,401 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:02,905 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158207",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:31:02,915 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:03,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:03,701 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:03,701 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:04,203 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158206",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "parametrize",
      "team_page"
    ]
  }
}
2025-07-18 11:31:04,206 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:04,729 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:04,729 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:04,729 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:05,238 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158205",
    "labels": [
      "api",
      "critical",
      "cross_platform",
      "regression",
      "team_page"
    ]
  }
}
2025-07-18 11:31:05,243 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:06,550 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:06,550 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:06,550 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:07,055 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158204",
    "labels": [
      "api",
      "cross_platform",
      "game_state",
      "high",
      "live_state",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:31:07,058 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:07,754 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:07,755 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:07,755 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:08,258 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158201",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "opening_day",
      "performance",
      "postseason",
      "team_page"
    ]
  }
}
2025-07-18 11:31:08,260 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:08,924 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:08,924 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:08,924 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:09,430 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158199",
    "labels": [
      "api",
      "cross_platform",
      "medium",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:31:09,431 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:10,330 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:10,330 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:10,330 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:10,836 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158196",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "performance",
      "team_page"
    ]
  }
}
2025-07-18 11:31:10,847 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:11,539 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:11,539 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:11,539 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:12,047 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158191",
    "labels": [
      "api",
      "cross_platform",
      "international",
      "jewel_event",
      "medium",
      "team_page"
    ]
  }
}
2025-07-18 11:31:12,050 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:12,561 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:12,561 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:12,561 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:13,063 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158188",
    "labels": [
      "api",
      "cross_platform",
      "jewel_event",
      "medium",
      "spring_training",
      "team_page"
    ]
  }
}
2025-07-18 11:31:13,073 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:13,806 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:13,807 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:13,807 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:14,312 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158185",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page",
      "world_series"
    ]
  }
}
2025-07-18 11:31:14,314 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:15,095 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:15,096 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:15,096 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:15,600 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158183",
    "labels": [
      "all_star",
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "team_page"
    ]
  }
}
2025-07-18 11:31:15,601 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:16,354 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:16,354 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:16,354 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:31:16,855 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestLabels($issueId: String!, $labels: [String]!) {\n            updateTest(issueId: $issueId, labels: $labels) {\n                issueId\n                jira(fields: [\"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158180",
    "labels": [
      "api",
      "cross_platform",
      "high",
      "jewel_event",
      "opening_day",
      "team_page"
    ]
  }
}
2025-07-18 11:31:16,856 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:31:17,555 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 226
2025-07-18 11:31:17,556 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 11:31:17,556 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":13}]}]}
2025-07-18 11:54:35,748 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:54:36,627 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:54:36,629 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:54:36,631 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels {\n            getTests(jql: \"project = FRAMED AND labels IS NOT EMPTY\", limit: 100) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {}
}
2025-07-18 11:54:36,632 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:54:38,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 11:56:27,780 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:56:28,774 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 11:56:28,774 - INFO - Successfully obtained Xray authentication token
2025-07-18 11:56:28,775 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestsWithLabels {\n            getTests(jql: \"project = FRAMED AND labels IS NOT EMPTY\", limit: 100) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {}
}
2025-07-18 11:56:28,776 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 11:56:30,077 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:00:47,827 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:00:48,541 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:00:48,542 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:00:48,554 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:00:48,555 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:00:52,298 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:00:59,079 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:00:59,658 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:00:59,659 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:00:59,664 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:00:59,665 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:00,891 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:01:00,894 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:00,903 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:01,510 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:01,511 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:01,511 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:01,719 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:01,725 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:03,051 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:03,051 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:03,051 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:03,259 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Core Endpoints",
    "parentId": null
  }
}
2025-07-18 12:01:03,274 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:04,141 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:04,142 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:04,142 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:04,345 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:04,347 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:05,285 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:05,286 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:05,286 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:05,495 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:05,497 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:06,241 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:06,242 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:06,242 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:06,444 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Data Validation",
    "parentId": null
  }
}
2025-07-18 12:01:06,446 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:07,387 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:07,388 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:07,388 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:07,599 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:07,601 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:08,195 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:08,196 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:08,196 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:08,399 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:08,400 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:08,955 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:08,955 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:08,955 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:09,164 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Error Handling",
    "parentId": null
  }
}
2025-07-18 12:01:09,166 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:09,723 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:09,723 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:09,724 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:09,927 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:09,930 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:10,484 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:10,484 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:10,484 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:10,689 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:10,690 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:11,300 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:11,301 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:11,301 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:11,506 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Game States",
    "parentId": null
  }
}
2025-07-18 12:01:11,508 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:12,245 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:12,246 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:12,246 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:12,451 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:12,456 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:13,101 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:13,102 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:13,102 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:13,319 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:13,321 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:13,831 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:13,834 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:13,834 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:14,040 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Integration Tests",
    "parentId": null
  }
}
2025-07-18 12:01:14,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:14,952 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:14,954 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:14,954 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:15,155 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:15,157 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:21,054 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:21,056 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:21,056 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:21,261 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:21,263 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:22,266 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:22,267 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:22,267 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:22,471 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Jewel Events",
    "parentId": null
  }
}
2025-07-18 12:01:22,474 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:23,135 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:23,136 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:23,136 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:23,341 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:23,344 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:24,094 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:24,100 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:24,100 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:24,304 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:24,306 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:25,076 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:25,077 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:25,077 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:25,281 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Performance Tests",
    "parentId": null
  }
}
2025-07-18 12:01:25,283 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:26,037 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:26,038 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:26,038 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:26,243 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:26,246 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:26,985 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:26,986 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:26,986 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:27,191 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:27,193 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:27,830 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:27,830 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:27,830 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:28,035 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Regression Tests",
    "parentId": null
  }
}
2025-07-18 12:01:28,037 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:28,753 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:28,755 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:28,755 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:28,960 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:28,962 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:29,664 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:29,665 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:29,665 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:29,877 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "API Tests",
    "parentId": null
  }
}
2025-07-18 12:01:29,882 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:30,789 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:30,789 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:30,790 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:30,996 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Security Tests",
    "parentId": null
  }
}
2025-07-18 12:01:30,997 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:31,518 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:31,518 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:31,518 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:31,722 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:31,723 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:32,459 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:32,460 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:32,460 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:32,665 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Content Display",
    "parentId": null
  }
}
2025-07-18 12:01:32,666 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:33,386 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:33,392 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:33,392 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:33,596 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:33,597 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:34,503 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:34,504 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:34,504 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:34,709 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Core Navigation",
    "parentId": null
  }
}
2025-07-18 12:01:34,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:35,499 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:35,501 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:35,501 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:35,709 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:35,711 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:37,316 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:37,317 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:37,317 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:37,523 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Date Bar",
    "parentId": null
  }
}
2025-07-18 12:01:37,527 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:38,068 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:38,069 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:38,070 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:38,276 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:38,279 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:39,157 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:39,158 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:39,158 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:39,361 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Game States",
    "parentId": null
  }
}
2025-07-18 12:01:39,363 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:40,034 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:40,034 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:40,035 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:40,242 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:40,243 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:40,803 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:40,804 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:40,804 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:41,010 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Jewel Events",
    "parentId": null
  }
}
2025-07-18 12:01:41,012 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:41,746 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:41,747 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:41,747 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:41,955 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:41,957 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:42,677 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:42,678 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:42,678 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:42,884 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Matchup Display",
    "parentId": null
  }
}
2025-07-18 12:01:42,886 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:43,416 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:43,417 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:43,417 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:43,622 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Team Page",
    "parentId": null
  }
}
2025-07-18 12:01:43,626 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:44,201 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:44,202 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:44,202 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:01:44,406 - DEBUG - GraphQL request payload: {
  "query": "\n                    mutation CreateFolder($projectKey: String!, $name: String!, $parentId: String) {\n                        createTestFolder(projectKey: $projectKey, name: $name, parentId: $parentId) {\n                            folder {\n                                id\n                                name\n                                path\n                            }\n                        }\n                    }\n                    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Product Links",
    "parentId": null
  }
}
2025-07-18 12:01:44,409 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:01:45,163 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 238
2025-07-18 12:01:45,163 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:01:45,163 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestFolder\" on type \"Mutation\". Did you mean \"updateTestFolder\", \"createFolder\", \"createTestSet\", \"createTestPlan\", or \"deleteFolder\"?","locations":[{"line":3,"column":25}]}]}
2025-07-18 12:02:05,824 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:06,692 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:02:06,693 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:02:06,697 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:02:06,699 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:08,064 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:02:40,514 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:41,923 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:02:41,928 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:02:41,931 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetFolders($projectKey: String!) {\n        getTestRepositoryFolders(projectKey: $projectKey, folderId: null) {\n            folders {\n                id\n                name\n                path\n            }\n        }\n    }\n    ",
  "variables": {
    "projectKey": "FRAMED"
  }
}
2025-07-18 12:02:41,933 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:42,681 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 129
2025-07-18 12:02:42,682 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:02:42,683 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getTestRepositoryFolders\" on type \"Query\".","locations":[{"line":3,"column":9}]}]}
2025-07-18 12:02:42,692 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateFolder($projectKey: String!, $name: String!) {\n        createFolder(projectKey: $projectKey, name: $name, testRepositoryPath: \"/\") {\n            folder {\n                id\n                name\n                path\n            }\n        }\n    }\n    ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Test Folder"
  }
}
2025-07-18 12:02:42,694 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:02:43,520 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 686
2025-07-18 12:02:43,522 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:02:43,522 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectKey\" on field \"createFolder\" of type \"Mutation\". Did you mean \"projectId\"?","locations":[{"line":3,"column":22}]},{"message":"Unknown argument \"name\" on field \"createFolder\" of type \"Mutation\".","locations":[{"line":3,"column":47}]},{"message":"Unknown argument \"testRepositoryPath\" on field \"createFolder\" of type \"Mutation\".","locations":[{"line":3,"column":60}]},{"message":"Cannot query field \"id\" on type \"SimpleFolderResults\".","locations":[{"line":5,"column":17}]},{"message":"Field \"createFolder\" argument \"path\" of type \"String!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-07-18 12:03:22,073 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:22,776 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:03:22,778 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:03:22,779 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:22,782 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:23,921 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:03:23,937 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:23,944 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:25,476 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:03:40,968 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:41,724 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:03:41,728 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:03:41,730 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:41,738 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:42,966 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:03:42,977 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:03:42,979 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:03:44,385 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:04:58,914 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:04:59,709 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 12:04:59,710 - INFO - Successfully obtained Xray authentication token
2025-07-18 12:04:59,710 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:04:59,711 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:01,214 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:05:01,225 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 12:05:01,230 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:02,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 12:05:02,715 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158177"
    ]
  }
}
2025-07-18 12:05:02,728 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:03,449 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:03,451 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:03,451 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:03,453 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158175"
    ]
  }
}
2025-07-18 12:05:03,465 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:04,018 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:04,020 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:04,021 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:04,021 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158174"
    ]
  }
}
2025-07-18 12:05:04,025 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:04,769 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:04,771 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:04,771 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:04,771 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158172"
    ]
  }
}
2025-07-18 12:05:04,775 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:05,316 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:05,317 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:05,317 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:05,321 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158170"
    ]
  }
}
2025-07-18 12:05:05,327 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:05,862 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:05,864 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:05,864 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:05,865 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158226",
    "preconditionIssueIds": [
      "1158169"
    ]
  }
}
2025-07-18 12:05:05,867 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:06,627 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:06,628 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:06,628 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:06,633 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158167"
    ]
  }
}
2025-07-18 12:05:06,635 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:07,233 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:07,234 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:07,234 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:07,237 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158224",
    "preconditionIssueIds": [
      "1158165"
    ]
  }
}
2025-07-18 12:05:07,239 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:08,000 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:08,001 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:08,001 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:08,002 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158163"
    ]
  }
}
2025-07-18 12:05:08,003 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:08,695 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:08,695 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:08,695 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:08,696 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158220",
    "preconditionIssueIds": [
      "1158162"
    ]
  }
}
2025-07-18 12:05:08,697 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:09,370 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:09,374 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:09,374 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:09,374 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158160"
    ]
  }
}
2025-07-18 12:05:09,375 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:10,293 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:10,294 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:10,295 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:10,295 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158158"
    ]
  }
}
2025-07-18 12:05:10,301 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:11,053 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:11,057 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:11,057 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:11,057 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158156"
    ]
  }
}
2025-07-18 12:05:11,058 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:11,880 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:11,881 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:11,881 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:11,881 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158154"
    ]
  }
}
2025-07-18 12:05:11,882 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:12,536 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:12,537 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:12,537 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:12,537 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158153"
    ]
  }
}
2025-07-18 12:05:12,538 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:13,312 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:13,460 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:13,461 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:13,481 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158201",
    "preconditionIssueIds": [
      "1158151"
    ]
  }
}
2025-07-18 12:05:13,515 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:14,221 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:14,235 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:14,236 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:14,246 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158201",
    "preconditionIssueIds": [
      "1158149"
    ]
  }
}
2025-07-18 12:05:14,253 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:14,987 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:14,988 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:14,988 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:14,988 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158210",
    "preconditionIssueIds": [
      "1158147"
    ]
  }
}
2025-07-18 12:05:14,990 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:15,532 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:15,534 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:15,534 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:15,534 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158146"
    ]
  }
}
2025-07-18 12:05:15,536 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:16,153 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:16,153 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:16,154 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:16,154 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158144"
    ]
  }
}
2025-07-18 12:05:16,155 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:16,857 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:16,858 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:16,858 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:16,859 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158142"
    ]
  }
}
2025-07-18 12:05:16,860 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:17,446 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:17,447 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:17,447 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:17,447 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158140"
    ]
  }
}
2025-07-18 12:05:17,448 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:18,038 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:18,039 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:18,039 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:18,040 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158139"
    ]
  }
}
2025-07-18 12:05:18,043 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:18,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:18,635 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:18,635 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:18,635 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158138"
    ]
  }
}
2025-07-18 12:05:18,636 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:19,263 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:19,265 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:19,265 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:19,266 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158137"
    ]
  }
}
2025-07-18 12:05:19,268 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:20,053 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:20,054 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:20,054 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:20,055 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158136"
    ]
  }
}
2025-07-18 12:05:20,056 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:21,123 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:21,123 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:21,123 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:21,124 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158135"
    ]
  }
}
2025-07-18 12:05:21,124 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:21,901 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:21,904 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:21,905 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:21,906 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158134"
    ]
  }
}
2025-07-18 12:05:21,909 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:22,619 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:22,619 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:22,619 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:22,623 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158226",
    "preconditionIssueIds": [
      "1158133"
    ]
  }
}
2025-07-18 12:05:22,629 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:23,483 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:23,485 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:23,485 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:23,487 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158132"
    ]
  }
}
2025-07-18 12:05:23,491 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:24,217 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:24,219 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:24,219 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:24,219 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158224",
    "preconditionIssueIds": [
      "1158131"
    ]
  }
}
2025-07-18 12:05:24,221 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:24,972 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:24,974 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:24,974 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:24,974 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158130"
    ]
  }
}
2025-07-18 12:05:24,975 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:25,650 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:25,650 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:25,650 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:25,651 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158220",
    "preconditionIssueIds": [
      "1158129"
    ]
  }
}
2025-07-18 12:05:25,652 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:26,204 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:26,205 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:26,205 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:26,206 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158128"
    ]
  }
}
2025-07-18 12:05:26,207 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:27,976 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:27,978 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:27,978 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:27,982 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158127"
    ]
  }
}
2025-07-18 12:05:27,984 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:28,610 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:28,610 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:28,610 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:28,612 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158126"
    ]
  }
}
2025-07-18 12:05:28,613 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:29,229 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:29,230 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:29,230 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:29,230 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158125"
    ]
  }
}
2025-07-18 12:05:29,231 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:29,800 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:29,801 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:29,801 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:29,802 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158124"
    ]
  }
}
2025-07-18 12:05:29,805 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:30,478 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:30,479 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:30,479 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:30,481 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158123"
    ]
  }
}
2025-07-18 12:05:30,483 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:30,989 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:30,989 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:30,989 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:30,990 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158221",
    "preconditionIssueIds": [
      "1158122"
    ]
  }
}
2025-07-18 12:05:30,992 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:31,669 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:31,670 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:31,670 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:31,671 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158121"
    ]
  }
}
2025-07-18 12:05:31,673 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:32,300 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:32,301 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:32,301 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 12:05:32,301 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158213",
    "preconditionIssueIds": [
      "1158120"
    ]
  }
}
2025-07-18 12:05:32,302 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 12:05:32,811 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 157
2025-07-18 12:05:32,814 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 12:05:32,814 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"warnings\" on type \"AddPreconditionsResult\". Did you mean \"warning\"?","locations":[{"line":4,"column":17}]}]}
2025-07-18 14:10:17,737 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:18,573 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 14:10:18,574 - INFO - Successfully obtained Xray authentication token
2025-07-18 14:10:18,576 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"description\"])\n                    tests(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 14:10:18,578 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:19,991 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 14:10:19,992 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    preconditions(limit: 10) {\n                        total\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 14:10:19,993 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:21,230 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 14:10:21,240 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158211",
    "preconditionIssueIds": [
      "1158177"
    ]
  }
}
2025-07-18 14:10:21,240 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:22,472 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:22,473 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158175"
    ]
  }
}
2025-07-18 14:10:22,475 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:23,648 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:23,649 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158174"
    ]
  }
}
2025-07-18 14:10:23,651 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:24,904 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:24,906 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158172"
    ]
  }
}
2025-07-18 14:10:24,907 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:26,078 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:26,083 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158170"
    ]
  }
}
2025-07-18 14:10:26,086 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:27,336 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:27,338 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158169"
    ]
  }
}
2025-07-18 14:10:27,340 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:29,251 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:29,252 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158167"
    ]
  }
}
2025-07-18 14:10:29,253 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:30,532 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:30,532 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158165"
    ]
  }
}
2025-07-18 14:10:30,533 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:31,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:31,638 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158163"
    ]
  }
}
2025-07-18 14:10:31,640 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:32,865 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:32,866 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158162"
    ]
  }
}
2025-07-18 14:10:32,868 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:34,062 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:34,064 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158160"
    ]
  }
}
2025-07-18 14:10:34,065 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:35,424 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:35,430 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158158"
    ]
  }
}
2025-07-18 14:10:35,438 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:36,747 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:36,750 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158156"
    ]
  }
}
2025-07-18 14:10:36,751 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:38,107 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:38,107 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158154"
    ]
  }
}
2025-07-18 14:10:38,109 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:39,273 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:39,275 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158153"
    ]
  }
}
2025-07-18 14:10:39,277 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:40,293 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:40,300 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158151"
    ]
  }
}
2025-07-18 14:10:40,310 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:41,366 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:41,368 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158149"
    ]
  }
}
2025-07-18 14:10:41,370 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:42,554 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:42,556 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158210",
    "preconditionIssueIds": [
      "1158147"
    ]
  }
}
2025-07-18 14:10:42,558 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:43,527 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:43,530 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158146"
    ]
  }
}
2025-07-18 14:10:43,532 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:44,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:44,701 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158144"
    ]
  }
}
2025-07-18 14:10:44,702 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:45,973 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:45,973 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158142"
    ]
  }
}
2025-07-18 14:10:45,974 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:47,136 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:47,139 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158207",
    "preconditionIssueIds": [
      "1158140"
    ]
  }
}
2025-07-18 14:10:47,144 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:48,258 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:48,259 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158211",
    "preconditionIssueIds": [
      "1158138"
    ]
  }
}
2025-07-18 14:10:48,262 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:49,460 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:49,462 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158240",
    "preconditionIssueIds": [
      "1158137"
    ]
  }
}
2025-07-18 14:10:49,464 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:50,464 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:50,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158136"
    ]
  }
}
2025-07-18 14:10:50,487 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:51,803 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:51,804 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158135"
    ]
  }
}
2025-07-18 14:10:51,805 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:53,132 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:53,133 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158134"
    ]
  }
}
2025-07-18 14:10:53,134 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:54,327 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:54,328 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158133"
    ]
  }
}
2025-07-18 14:10:54,329 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:55,472 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:55,474 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158132"
    ]
  }
}
2025-07-18 14:10:55,475 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:56,658 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:56,659 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158131"
    ]
  }
}
2025-07-18 14:10:56,661 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:10:59,065 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:10:59,068 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158130"
    ]
  }
}
2025-07-18 14:10:59,071 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:00,335 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:00,338 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158129"
    ]
  }
}
2025-07-18 14:11:00,339 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:01,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:01,420 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158128"
    ]
  }
}
2025-07-18 14:11:01,421 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:02,769 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:02,770 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158191",
    "preconditionIssueIds": [
      "1158127"
    ]
  }
}
2025-07-18 14:11:02,770 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:04,066 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:04,068 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158188",
    "preconditionIssueIds": [
      "1158126"
    ]
  }
}
2025-07-18 14:11:04,069 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:05,405 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:05,406 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158185",
    "preconditionIssueIds": [
      "1158125"
    ]
  }
}
2025-07-18 14:11:05,407 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:06,558 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:06,561 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158209",
    "preconditionIssueIds": [
      "1158124"
    ]
  }
}
2025-07-18 14:11:06,563 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:07,939 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:07,940 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158245",
    "preconditionIssueIds": [
      "1158123"
    ]
  }
}
2025-07-18 14:11:07,941 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:09,129 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:09,138 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158246",
    "preconditionIssueIds": [
      "1158122"
    ]
  }
}
2025-07-18 14:11:09,145 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:10,418 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 14:11:10,421 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddPrecondition($testIssueId: String!, $preconditionIssueIds: [String]!) {\n            addPreconditionsToTest(issueId: $testIssueId, preconditionIssueIds: $preconditionIssueIds) {\n                warning\n            }\n        }\n        ",
  "variables": {
    "testIssueId": "1158207",
    "preconditionIssueIds": [
      "1158121"
    ]
  }
}
2025-07-18 14:11:10,426 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 14:11:11,686 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 52
2025-07-18 23:06:56,132 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:57,040 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:06:57,041 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:06:57,041 - DEBUG - GraphQL request payload: {
  "query": "\n    query IntrospectFolderOperations {\n        __type(name: \"Mutation\") {\n            fields {\n                name\n                description\n                args {\n                    name\n                    type {\n                        name\n                        kind\n                        ofType {\n                            name\n                            kind\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-07-18 23:06:57,043 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:57,957 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:06:58,075 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:58,723 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:06:58,723 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:06:58,724 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetFolders($projectId: String!) {\n                getFolders(projectId: $projectId) {\n                    folders {\n                        id\n                        name\n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "projectKey": "FRAMED",
    "projectId": "FRAMED"
  }
}
2025-07-18 23:06:58,724 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:06:59,488 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 144
2025-07-18 23:06:59,489 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:06:59,489 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getFolders\" on type \"Query\". Did you mean \"getFolder\"?","locations":[{"line":3,"column":17}]}]}
2025-07-18 23:06:59,489 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTestRepository($projectKey: String!) {\n                getTestRepository(projectKey: $projectKey) {\n                    folders {\n                        id\n                        name\n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "projectKey": "FRAMED",
    "projectId": "FRAMED"
  }
}
2025-07-18 23:06:59,491 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:00,303 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 237
2025-07-18 23:07:00,303 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:07:00,303 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getTestRepository\" on type \"Query\". Did you mean \"getTestSet\", \"getTestSets\", \"getTestExecution\", \"getTestExecutions\", or \"getTestRunById\"?","locations":[{"line":3,"column":17}]}]}
2025-07-18 23:07:00,304 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:01,109 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:07:01,110 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:07:01,110 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation CreateFolder($path: String!, $projectId: String!) {\n                createFolder(path: $path, projectId: $projectId) {\n                    folder {\n                        id\n                        name\n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "path": "/Test Folder",
    "projectId": "FRAMED"
  }
}
2025-07-18 23:07:01,110 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:01,767 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 122
2025-07-18 23:07:01,767 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:07:01,767 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"id\" on type \"SimpleFolderResults\".","locations":[{"line":5,"column":25}]}]}
2025-07-18 23:07:01,768 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation CreateFolder($projectKey: String!, $name: String!) {\n                createFolder(projectKey: $projectKey, name: $name) {\n                    folder {\n                        id\n                        name  \n                        path\n                    }\n                }\n            }\n            ",
  "variables": {
    "projectKey": "FRAMED",
    "name": "Test Folder"
  }
}
2025-07-18 23:07:01,768 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:07:02,532 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 548
2025-07-18 23:07:02,533 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:07:02,533 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectKey\" on field \"createFolder\" of type \"Mutation\". Did you mean \"projectId\"?","locations":[{"line":3,"column":30}]},{"message":"Unknown argument \"name\" on field \"createFolder\" of type \"Mutation\".","locations":[{"line":3,"column":55}]},{"message":"Cannot query field \"id\" on type \"SimpleFolderResults\".","locations":[{"line":5,"column":25}]},{"message":"Field \"createFolder\" argument \"path\" of type \"String!\" is required but not provided.","locations":[{"line":3,"column":17}]}]}
2025-07-18 23:12:57,005 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:12:57,554 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:12:57,555 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:12:57,559 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:12:57,559 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:12:59,866 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:13:18,430 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:19,547 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:13:19,548 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:13:19,550 - DEBUG - GraphQL request payload: {
  "query": "\nquery GetTests($jql: String\\!, $limit: Int\\!) {\n    getTests(jql: $jql, limit: $limit) {\n        total\n        results {\n            issueId\n            jira(fields: [\"key\", \"summary\", \"labels\"])\n            folder {\n                path\n            }\n        }\n    }\n}\n",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:13:19,550 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:20,398 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 125
2025-07-18 23:13:20,399 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-18 23:13:20,399 - ERROR - Response body: {"errors":[{"message":"Syntax Error: Cannot parse the unexpected character \"\\\\\".","locations":[{"line":2,"column":28}]}]}
2025-07-18 23:13:49,989 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:50,630 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:13:50,630 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:13:50,631 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n                folder {\n                    path\n                }\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:13:50,632 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:13:52,244 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:14:01,941 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:02,707 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:14:02,707 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:14:02,709 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:14:02,709 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:04,072 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:14:04,073 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:04,075 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:05,027 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:05,028 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:05,234 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:14:05,237 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:06,097 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:06,097 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:06,302 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:06,303 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:07,272 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:07,273 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:07,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:14:07,481 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:08,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:08,413 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:08,625 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:08,628 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:09,406 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:09,406 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:09,613 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:14:09,616 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:10,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:10,412 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:10,615 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:10,617 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:11,464 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:11,465 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:11,669 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:14:11,672 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:12,530 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:12,531 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:12,738 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:12,741 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:13,649 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:13,650 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:13,855 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:14:13,857 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:14,802 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:14,802 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:15,013 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:15,014 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:16,144 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:16,145 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:16,349 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:14:16,350 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:17,252 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:17,252 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:17,458 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:14:17,459 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:18,403 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:18,403 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:18,609 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:14:18,612 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:19,493 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:19,494 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:19,698 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:19,702 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:20,599 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:20,600 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:20,805 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:14:20,808 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:21,659 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:21,659 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:21,866 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:21,868 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:22,551 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:22,552 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:22,757 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:14:22,759 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:23,550 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:23,550 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:23,756 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:23,762 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:24,561 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:24,561 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:24,763 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:14:24,767 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:25,734 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:25,734 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:25,941 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:25,943 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:26,869 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:26,869 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:27,075 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:14:27,078 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:27,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:27,878 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:28,083 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:28,087 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:28,820 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:28,821 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:29,027 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:14:29,029 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:30,245 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:30,245 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:30,451 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:30,454 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:31,328 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:31,329 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:31,535 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:14:31,536 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:32,342 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:32,343 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:32,549 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:32,550 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:33,197 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:33,198 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:33,405 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:14:33,409 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:34,094 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:34,095 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:34,300 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:34,302 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:35,131 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:35,133 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:35,335 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:14:35,338 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:36,173 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:36,173 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:36,377 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:14:36,378 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:37,076 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:37,077 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:14:37,282 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:14:37,285 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:14:37,981 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:14:37,982 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:15,227 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:16,117 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:15:16,118 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:15:16,118 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetProjectInfo {\n        getTests(jql: \"project = FRAMED\", limit: 1) {\n            results {\n                projectId\n                jira(fields: [\"project\"])\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-07-18 23:15:16,120 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:17,581 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 688
2025-07-18 23:15:24,151 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:24,788 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:15:24,789 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:15:24,790 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:15:24,791 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:26,341 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:15:26,344 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:26,346 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:27,567 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:27,567 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:27,773 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:15:27,778 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:28,639 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:28,639 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:28,842 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:28,843 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:29,626 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:29,627 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:29,832 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:15:29,836 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:30,812 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:30,813 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:31,014 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:31,020 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:31,916 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:31,935 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:32,141 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:15:32,142 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:33,030 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:33,030 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:33,233 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:33,235 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:33,901 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:33,909 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:34,114 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:15:34,117 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:34,832 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:34,833 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:35,037 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:35,038 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:35,853 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:35,853 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:36,058 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:15:36,059 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:36,999 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:36,999 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:37,204 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:37,207 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:38,119 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:38,119 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:38,324 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:15:38,327 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:39,097 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:39,099 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:39,305 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page"
  }
}
2025-07-18 23:15:39,307 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:40,025 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:40,026 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:40,229 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:15:40,230 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:41,272 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:41,273 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:41,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:41,482 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:42,313 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:42,314 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:42,515 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:15:42,517 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:43,533 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:43,533 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:43,738 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:43,738 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:44,658 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:44,660 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:44,866 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:15:44,868 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:45,772 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:45,775 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:45,980 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:45,982 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:46,900 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:46,900 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:47,106 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:15:47,109 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:47,931 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:47,931 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:48,136 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:48,140 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:48,835 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:48,836 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:49,042 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:15:49,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:49,920 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:49,921 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:50,128 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:50,132 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:50,987 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:50,988 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:51,194 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:15:51,197 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:52,159 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:52,160 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:52,366 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:52,369 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:53,215 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:53,216 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:53,421 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:15:53,424 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:54,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:54,278 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:54,484 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:54,487 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:55,411 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:55,412 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:55,618 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:15:55,620 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:56,454 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:56,456 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:56,669 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:56,670 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:57,312 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:57,313 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:57,517 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:15:57,517 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:58,508 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:58,509 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:58,717 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:15:58,719 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:15:59,542 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:15:59,543 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:15:59,747 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "FRAMED",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:15:59,750 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:00,559 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 202
2025-07-18 23:16:00,559 - ERROR - GraphQL errors: [{'message': "User doesn't have permissions to view/edit test repository for project with id FRAMED", 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:16:32,962 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:33,462 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:16:33,465 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:16:33,469 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:16:33,469 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:34,954 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:16:34,956 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page"
  }
}
2025-07-18 23:16:34,958 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:36,282 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 106
2025-07-18 23:16:36,489 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:16:36,491 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:37,705 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 114
2025-07-18 23:16:37,911 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:16:37,912 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:39,043 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 128
2025-07-18 23:16:39,246 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:16:39,249 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:40,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 120
2025-07-18 23:16:40,484 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:16:40,486 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:41,720 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 128
2025-07-18 23:16:41,926 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:16:41,929 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:43,143 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 128
2025-07-18 23:16:43,347 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:16:43,349 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:44,397 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 122
2025-07-18 23:16:44,604 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:16:44,605 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:45,751 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 124
2025-07-18 23:16:45,956 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:16:45,958 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:47,117 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 116
2025-07-18 23:16:47,323 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:16:47,326 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:48,462 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 130
2025-07-18 23:16:48,669 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:16:48,671 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:49,965 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 142
2025-07-18 23:16:50,173 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:16:50,176 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:51,093 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 138
2025-07-18 23:16:51,298 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:16:51,301 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:52,269 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 132
2025-07-18 23:16:52,475 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:16:52,477 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:53,679 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 136
2025-07-18 23:16:53,883 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:16:53,884 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:54,899 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 142
2025-07-18 23:16:55,104 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:16:55,106 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:56,191 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 136
2025-07-18 23:16:56,397 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:16:56,397 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:57,499 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 140
2025-07-18 23:16:57,705 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:16:57,708 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:16:58,659 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 136
2025-07-18 23:17:19,284 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:19,895 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-18 23:17:19,895 - INFO - Successfully obtained Xray authentication token
2025-07-18 23:17:19,897 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-18 23:17:19,898 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:21,409 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-18 23:17:21,411 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page"
  }
}
2025-07-18 23:17:21,412 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:22,515 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-07-18 23:17:22,516 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:22,719 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Date Bar"
  }
}
2025-07-18 23:17:22,723 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:23,873 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 192
2025-07-18 23:17:23,873 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Date Bar already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:24,078 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Core Navigation"
  }
}
2025-07-18 23:17:24,079 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:25,198 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 199
2025-07-18 23:17:25,199 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Core Navigation already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:25,402 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Game States"
  }
}
2025-07-18 23:17:25,405 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:26,548 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 195
2025-07-18 23:17:26,549 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Game States already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:26,754 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Product Links"
  }
}
2025-07-18 23:17:26,756 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:27,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 197
2025-07-18 23:17:27,876 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Product Links already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:28,082 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Matchup Display"
  }
}
2025-07-18 23:17:28,084 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:29,065 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 199
2025-07-18 23:17:29,066 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Matchup Display already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:29,271 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Jewel Events"
  }
}
2025-07-18 23:17:29,275 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:30,167 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-07-18 23:17:30,168 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Jewel Events already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:30,373 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/Content Display"
  }
}
2025-07-18 23:17:30,376 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:31,490 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 199
2025-07-18 23:17:31,490 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/Content Display already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:31,696 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests"
  }
}
2025-07-18 23:17:31,699 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:32,646 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-07-18 23:17:32,647 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:32,853 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Security Tests"
  }
}
2025-07-18 23:17:32,858 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:33,976 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 208
2025-07-18 23:17:33,976 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Security Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:34,182 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Core Endpoints"
  }
}
2025-07-18 23:17:34,185 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:35,316 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 208
2025-07-18 23:17:35,317 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Core Endpoints already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:35,521 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Data Validation"
  }
}
2025-07-18 23:17:35,525 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:36,440 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 209
2025-07-18 23:17:36,441 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Data Validation already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:36,642 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Regression Tests"
  }
}
2025-07-18 23:17:36,643 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:37,504 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 210
2025-07-18 23:17:37,506 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Regression Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:37,712 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Game States"
  }
}
2025-07-18 23:17:37,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:38,762 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 205
2025-07-18 23:17:38,772 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Game States already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:38,975 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Performance Tests"
  }
}
2025-07-18 23:17:38,976 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:40,094 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 211
2025-07-18 23:17:40,095 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Performance Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:40,300 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-18 23:17:40,302 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:41,184 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 208
2025-07-18 23:17:41,184 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Error Handling already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:41,390 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Integration Tests"
  }
}
2025-07-18 23:17:41,391 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:42,478 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 211
2025-07-18 23:17:42,479 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Integration Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:42,684 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:42,685 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:43,788 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 206
2025-07-18 23:17:43,789 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Jewel Events already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-18 23:17:43,993 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158191",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:43,994 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:44,932 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:45,434 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158188",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:45,435 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:46,400 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:46,906 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158185",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:46,909 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:47,834 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:48,340 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158183",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:48,343 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:49,512 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-18 23:17:50,015 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n            updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n        }\n        ",
  "variables": {
    "issueId": "1158180",
    "folderPath": "/Team Page/API Tests/Jewel Events"
  }
}
2025-07-18 23:17:50,018 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-18 23:17:51,129 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 57
2025-07-29 13:40:33,307 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:33,817 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:40:33,818 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:40:37,416 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:37,805 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:40:37,806 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:40:55,624 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:56,019 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:40:56,020 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:40:56,021 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Get Team Page - Valid Team",
          "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@critical",
            "@cross-platform"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
          "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
          "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
        },
        {
          "action": "Validate response schema",
          "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
          "result": "All required fields present | Section IDs format correct"
        }
      ]
    }
  }
}
2025-07-29 13:40:56,023 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:56,418 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:40:56,419 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:40:56,420 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:40:57,425 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Missing Team ID",
          "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@medium",
            "@cross-platform"
          ],
          "priority": {
            "name": "Medium"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
          "data": "Direct API call without teamId parameter",
          "result": "Status: 400 | Error message present | Contains expected error keys"
        },
        {
          "action": "Validate error response structure",
          "data": "Direct API call without teamId parameter",
          "result": "Response contains httpStatus or message | Proper error structure"
        }
      ]
    }
  }
}
2025-07-29 13:40:57,426 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:57,822 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:40:57,822 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:40:57,823 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:40:58,828 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "iOS User Agent",
          "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@ios"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
          "data": "User-Agent: MLB/24.24.0/iPhone",
          "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
        }
      ]
    }
  }
}
2025-07-29 13:40:58,829 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:40:59,333 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:40:59,333 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:40:59,333 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:00,335 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Android User Agent",
          "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@android"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send request with User-Agent: MLB/25.2.0/android",
          "data": "User-Agent: MLB/25.2.0/android",
          "result": "Article carousel returned | Android-specific content"
        }
      ]
    }
  }
}
2025-07-29 13:41:00,343 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:00,718 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:00,719 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:00,719 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:01,725 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "iPad User Agent",
          "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@medium",
            "@ipad"
          ],
          "priority": {
            "name": "Medium"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Send request with User-Agent: MLB/24.24.0/iPad",
          "data": "User-Agent: MLB/24.24.0/iPad",
          "result": "Editorial with blurbs | Tablet-optimized layout"
        }
      ]
    }
  }
}
2025-07-29 13:41:01,732 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:02,224 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:02,224 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:02,225 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:03,230 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Postseason Team Page Sections",
          "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@cross-platform",
            "@jewel-event",
            "@postseason"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376",
        "FRAMED-1363"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
          "data": "Playoff-qualified team, Test Period: Postseason",
          "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
        }
      ]
    }
  }
}
2025-07-29 13:41:03,231 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:03,644 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:03,645 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:03,646 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:04,649 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Multiple Event Handling",
          "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@medium",
            "@cross-platform",
            "@jewel-event",
            "@all-star"
          ],
          "priority": {
            "name": "Medium"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376",
        "FRAMED-1367"
      ],
      "steps": [
        {
          "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
          "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
          "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
        }
      ]
    }
  }
}
2025-07-29 13:41:04,651 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:05,107 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:05,107 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:05,107 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:06,113 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Jewel Event Localization",
          "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@cross-platform",
            "@jewel-event",
            "@localization"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376",
        "FRAMED-1364"
      ],
      "steps": [
        {
          "action": "Test all jewel events with Languages: en, es, ja",
          "data": "Languages: en, es, ja, Events: All jewel events",
          "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
        }
      ]
    }
  }
}
2025-07-29 13:41:06,115 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:06,520 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:06,520 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:06,520 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:07,535 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($testInput: CreateTestInput!) {\n            createTest(testInput: $testInput) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "testInput": {
      "jira": {
        "fields": {
          "project": {
            "key": "FRAMED"
          },
          "summary": "Response Time - Single Request",
          "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "issuetype": {
            "name": "Test"
          },
          "labels": [
            "@team-page",
            "@api",
            "@high",
            "@cross-platform",
            "@performance"
          ],
          "priority": {
            "name": "High"
          }
        }
      },
      "testType": "Manual",
      "preconditionIds": [
        "FRAMED-1376"
      ],
      "steps": [
        {
          "action": "Single request per team",
          "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
        },
        {
          "action": "Measure response time",
          "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "result": "Response time measured"
        },
        {
          "action": "Validate against SLA",
          "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
          "result": "SLA validation complete"
        }
      ]
    }
  }
}
2025-07-29 13:41:07,538 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:41:07,949 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 514
2025-07-29 13:41:07,950 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:41:07,951 - ERROR - Response body: {"errors":[{"message":"Unknown type \"CreateTestInput\". Did you mean \"CreateStepInput\", \"CreateTestResult\", \"UpdateStepInput\", \"TestTypeInput\", or \"UpdateTestTypeInput\"?","locations":[{"line":2,"column":41}]},{"message":"Unknown argument \"testInput\" on field \"createTest\" of type \"Mutation\". Did you mean \"testType\"?","locations":[{"line":3,"column":24}]},{"message":"Field \"createTest\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":13}]}]}
2025-07-29 13:41:59,539 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:00,194 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:42:00,196 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:42:00,197 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Get Team Page - Valid Team",
        "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@critical",
          "@cross-platform"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
      },
      {
        "action": "Validate response schema",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "All required fields present | Section IDs format correct"
      }
    ]
  }
}
2025-07-29 13:42:00,200 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:00,611 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:00,615 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:00,616 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:01,621 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Missing Team ID",
        "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
        "data": "Direct API call without teamId parameter",
        "result": "Status: 400 | Error message present | Contains expected error keys"
      },
      {
        "action": "Validate error response structure",
        "data": "Direct API call without teamId parameter",
        "result": "Response contains httpStatus or message | Proper error structure"
      }
    ]
  }
}
2025-07-29 13:42:01,622 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:02,041 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:02,042 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:02,042 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:03,044 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iOS User Agent",
        "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@ios"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
        "data": "User-Agent: MLB/24.24.0/iPhone",
        "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
      }
    ]
  }
}
2025-07-29 13:42:03,049 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:03,470 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:03,471 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:03,471 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:04,475 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Android User Agent",
        "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@android"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/25.2.0/android",
        "data": "User-Agent: MLB/25.2.0/android",
        "result": "Article carousel returned | Android-specific content"
      }
    ]
  }
}
2025-07-29 13:42:04,479 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:04,988 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:04,988 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:04,989 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:05,995 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad User Agent",
        "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@ipad"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPad",
        "data": "User-Agent: MLB/24.24.0/iPad",
        "result": "Editorial with blurbs | Tablet-optimized layout"
      }
    ]
  }
}
2025-07-29 13:42:05,996 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:06,439 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:06,439 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:06,439 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:07,444 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Sections",
        "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@postseason"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376",
      "FRAMED-1363"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
        "data": "Playoff-qualified team, Test Period: Postseason",
        "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
      }
    ]
  }
}
2025-07-29 13:42:07,445 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:07,858 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:07,859 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:07,859 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:08,864 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Event Handling",
        "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform",
          "@jewel-event",
          "@all-star"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376",
      "FRAMED-1367"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
        "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
        "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
      }
    ]
  }
}
2025-07-29 13:42:08,865 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:09,318 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:09,319 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:09,319 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:10,322 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Jewel Event Localization",
        "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@localization"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376",
      "FRAMED-1364"
    ],
    "steps": [
      {
        "action": "Test all jewel events with Languages: en, es, ja",
        "data": "Languages: en, es, ja, Events: All jewel events",
        "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
      }
    ]
  }
}
2025-07-29 13:42:10,325 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:10,715 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:10,715 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:10,716 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:42:11,717 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: String, $preconditionIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIds: $preconditionIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Response Time - Single Request",
        "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@performance"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": "Manual",
    "preconditionIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Single request per team",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
      },
      {
        "action": "Measure response time",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "Response time measured"
      },
      {
        "action": "Validate against SLA",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "SLA validation complete"
      }
    ]
  }
}
2025-07-29 13:42:11,718 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:42:12,161 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 358
2025-07-29 13:42:12,162 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-29 13:42:12,162 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"preconditionIds\" on field \"createTest\" of type \"Mutation\". Did you mean \"preconditionIssueIds\"?","locations":[{"line":3,"column":58}]},{"message":"Variable \"$testType\" of type \"String\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":43},{"line":3,"column":47}]}]}
2025-07-29 13:44:48,901 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:49,412 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:44:49,412 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:44:49,412 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Get Team Page - Valid Team",
        "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@critical",
          "@cross-platform"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
      },
      {
        "action": "Validate response schema",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "All required fields present | Section IDs format correct"
      }
    ]
  }
}
2025-07-29 13:44:49,413 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:49,951 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:49,951 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:50,956 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Missing Team ID",
        "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
        "data": "Direct API call without teamId parameter",
        "result": "Status: 400 | Error message present | Contains expected error keys"
      },
      {
        "action": "Validate error response structure",
        "data": "Direct API call without teamId parameter",
        "result": "Response contains httpStatus or message | Proper error structure"
      }
    ]
  }
}
2025-07-29 13:44:50,960 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:51,537 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:51,538 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:52,542 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iOS User Agent",
        "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@ios"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
        "data": "User-Agent: MLB/24.24.0/iPhone",
        "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
      }
    ]
  }
}
2025-07-29 13:44:52,543 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:53,103 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:53,104 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:54,113 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Android User Agent",
        "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@android"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/25.2.0/android",
        "data": "User-Agent: MLB/25.2.0/android",
        "result": "Article carousel returned | Android-specific content"
      }
    ]
  }
}
2025-07-29 13:44:54,115 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:54,711 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:54,712 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:55,719 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad User Agent",
        "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@ipad"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPad",
        "data": "User-Agent: MLB/24.24.0/iPad",
        "result": "Editorial with blurbs | Tablet-optimized layout"
      }
    ]
  }
}
2025-07-29 13:44:55,721 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:56,275 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:44:56,276 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:57,287 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Sections",
        "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@postseason"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376",
      "FRAMED-1363"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
        "data": "Playoff-qualified team, Test Period: Postseason",
        "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
      }
    ]
  }
}
2025-07-29 13:44:57,292 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:57,904 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 233
2025-07-29 13:44:57,906 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376, FRAMED-1363!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:44:58,912 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Event Handling",
        "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform",
          "@jewel-event",
          "@all-star"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376",
      "FRAMED-1367"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
        "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
        "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
      }
    ]
  }
}
2025-07-29 13:44:58,915 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:44:59,540 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 233
2025-07-29 13:44:59,541 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376, FRAMED-1367!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:45:00,547 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Jewel Event Localization",
        "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@localization"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376",
      "FRAMED-1364"
    ],
    "steps": [
      {
        "action": "Test all jewel events with Languages: en, es, ja",
        "data": "Languages: en, es, ja, Events: All jewel events",
        "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
      }
    ]
  }
}
2025-07-29 13:45:00,551 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:01,154 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 233
2025-07-29 13:45:01,155 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376, FRAMED-1364!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:45:02,161 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Response Time - Single Request",
        "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@performance"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "FRAMED-1376"
    ],
    "steps": [
      {
        "action": "Single request per team",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
      },
      {
        "action": "Measure response time",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "Response time measured"
      },
      {
        "action": "Validate against SLA",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "SLA validation complete"
      }
    ]
  }
}
2025-07-29 13:45:02,163 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:02,738 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 220
2025-07-29 13:45:02,739 - ERROR - GraphQL errors: [{'message': "Error creating Test: in field 'preconditions', preconditions with the following ids not found: FRAMED-1376!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-29 13:45:34,236 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:34,625 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-29 13:45:34,626 - INFO - Successfully obtained Xray authentication token
2025-07-29 13:45:34,627 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Get Team Page - Valid Team",
        "description": "**Test Description:**\nTest Case ID: API-001\nGet Team Page - Valid Team\n\n**Test Tags:**\n@team-page, @api, @critical, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nteamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@critical",
          "@cross-platform"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with ?teamId=147&lang=en",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "Status: 200 | Valid JSON structure | Contains sections array | Team info present"
      },
      {
        "action": "Validate response schema",
        "data": "teamId=147, lang=en, User-Agent: MLB/25.2.0/android",
        "result": "All required fields present | Section IDs format correct"
      }
    ]
  }
}
2025-07-29 13:45:34,629 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:37,097 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 265
2025-07-29 13:45:38,103 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Missing Team ID",
        "description": "**Test Description:**\nTest Case ID: API-015\nMissing Team ID\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nDirect API call without teamId parameter",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 without teamId parameter",
        "data": "Direct API call without teamId parameter",
        "result": "Status: 400 | Error message present | Contains expected error keys"
      },
      {
        "action": "Validate error response structure",
        "data": "Direct API call without teamId parameter",
        "result": "Response contains httpStatus or message | Proper error structure"
      }
    ]
  }
}
2025-07-29 13:45:38,106 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:40,850 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 254
2025-07-29 13:45:41,854 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iOS User Agent",
        "description": "**Test Description:**\nTest Case ID: API-012\niOS User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @ios\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPhone",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@ios"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPhone",
        "data": "User-Agent: MLB/24.24.0/iPhone",
        "result": "Editorial feed returned | iOS-specific content | Correct image sizes"
      }
    ]
  }
}
2025-07-29 13:45:41,856 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:44,421 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 253
2025-07-29 13:45:45,422 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Android User Agent",
        "description": "**Test Description:**\nTest Case ID: API-013\nAndroid User Agent\n\n**Test Tags:**\n@team-page, @api, @high, @android\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/25.2.0/android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@android"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/25.2.0/android",
        "data": "User-Agent: MLB/25.2.0/android",
        "result": "Article carousel returned | Android-specific content"
      }
    ]
  }
}
2025-07-29 13:45:45,425 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:48,232 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 257
2025-07-29 13:45:49,237 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad User Agent",
        "description": "**Test Description:**\nTest Case ID: API-014\niPad User Agent\n\n**Test Tags:**\n@team-page, @api, @medium, @ipad\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nUser-Agent: MLB/24.24.0/iPad",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@ipad"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Send request with User-Agent: MLB/24.24.0/iPad",
        "data": "User-Agent: MLB/24.24.0/iPad",
        "result": "Editorial with blurbs | Tablet-optimized layout"
      }
    ]
  }
}
2025-07-29 13:45:49,240 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:51,798 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 254
2025-07-29 13:45:52,815 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Sections",
        "description": "**Test Description:**\nTest Case ID: API-JE-003\nPostseason Team Page Sections\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @postseason\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPlayoff-qualified team, Test Period: Postseason",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@postseason"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175",
      "1158153"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with qualified playoff team",
        "data": "Playoff-qualified team, Test Period: Postseason",
        "result": "Playoff section present | Series information | Next game details | Playoff-specific content"
      }
    ]
  }
}
2025-07-29 13:45:52,831 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:55,455 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 277
2025-07-29 13:45:56,461 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Event Handling",
        "description": "**Test Description:**\nTest Case ID: API-JE-007\nMultiple Event Handling\n\n**Test Tags:**\n@team-page, @api, @medium, @cross-platform, @jewel-event, @all-star\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nTest Period: All-Star Week, Test Scenario: HRD + ASG active",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@medium",
          "@cross-platform",
          "@jewel-event",
          "@all-star"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175",
      "1158160"
    ],
    "steps": [
      {
        "action": "Send GET request to /api/teamPage/v1 with HRD + ASG active",
        "data": "Test Period: All-Star Week, Test Scenario: HRD + ASG active",
        "result": "Both events in response | Proper prioritization | No data conflicts | Clear event separation"
      }
    ]
  }
}
2025-07-29 13:45:56,462 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:45:59,217 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 271
2025-07-29 13:46:00,224 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Jewel Event Localization",
        "description": "**Test Description:**\nTest Case ID: API-JE-008\nJewel Event Localization\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @jewel-event, @localization\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nLanguages: en, es, ja, Events: All jewel events",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@jewel-event",
          "@localization"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175",
      "1158154"
    ],
    "steps": [
      {
        "action": "Test all jewel events with Languages: en, es, ja",
        "data": "Languages: en, es, ja, Events: All jewel events",
        "result": "Event names localized | Dates properly formatted | Content in correct language | URLs localized"
      }
    ]
  }
}
2025-07-29 13:46:00,225 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:46:02,686 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 272
2025-07-29 13:46:03,692 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateTest($jira: JSON!, $testType: UpdateTestTypeInput, $preconditionIssueIds: [String], $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, preconditionIssueIds: $preconditionIssueIds, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Response Time - Single Request",
        "description": "**Test Description:**\nTest Case ID: API-PERF-001\nResponse Time - Single Request\n\n**Test Tags:**\n@team-page, @api, @high, @cross-platform, @performance\n\n**Execution:** Automated via pytest\n\n**Test Data:**\nPerformance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "@team-page",
          "@api",
          "@high",
          "@cross-platform",
          "@performance"
        ],
        "priority": {
          "name": "High"
        }
      }
    },
    "testType": {
      "name": "Manual"
    },
    "preconditionIssueIds": [
      "1158175"
    ],
    "steps": [
      {
        "action": "Single request per team",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "P50: < 500ms | P95: < 1000ms | P99: < 2000ms"
      },
      {
        "action": "Measure response time",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "Response time measured"
      },
      {
        "action": "Validate against SLA",
        "data": "Performance testing, Acceptance Criteria: P50: < 500ms, P95: < 1000ms, P99: < 2000ms",
        "result": "SLA validation complete"
      }
    ]
  }
}
2025-07-29 13:46:03,697 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-29 13:46:06,285 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 269
2025-07-31 13:12:34,284 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:12:35,007 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 13:12:35,008 - INFO - Successfully obtained Xray authentication token
2025-07-31 13:12:35,008 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetProject($projectKey: String!) {\n            getProjects(keys: [$projectKey]) {\n                results {\n                    id\n                    key\n                    name\n                }\n            }\n        }\n        ",
  "variables": {
    "projectKey": "FRAMED"
  }
}
2025-07-31 13:12:35,009 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:12:35,551 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 193
2025-07-31 13:12:35,552 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 13:12:35,552 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getProjects\" on type \"Query\". Did you mean \"getTests\", \"getProjectSettings\", or \"getPreconditions\"?","locations":[{"line":3,"column":13}]}]}
2025-07-31 13:13:21,335 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:21,987 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 13:13:21,988 - INFO - Successfully obtained Xray authentication token
2025-07-31 13:13:21,989 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetProjectFromTest($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    projectId\n                    jira(fields: [\"key\", \"project\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED"
  }
}
2025-07-31 13:13:21,992 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:24,103 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 708
2025-07-31 13:13:24,105 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestLocation($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "key = FRAMED-1294"
  }
}
2025-07-31 13:13:24,107 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:39,393 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 184
2025-07-31 13:13:39,399 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation CreateFolder($projectId: String!, $path: String!) {\n                createFolder(projectId: $projectId, path: $path) {\n                    folder {\n                        name\n                        path\n                    }\n                    warnings\n                }\n            }\n            ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page"
  }
}
2025-07-31 13:13:39,403 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:40,343 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-07-31 13:13:40,344 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page already exists.', 'locations': [{'line': 3, 'column': 17}], 'path': ['createFolder']}]
2025-07-31 13:13:40,345 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation CreateFolder($projectId: String!, $path: String!) {\n                createFolder(projectId: $projectId, path: $path) {\n                    folder {\n                        name\n                        path\n                    }\n                    warnings\n                }\n            }\n            ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests"
  }
}
2025-07-31 13:13:40,349 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:41,263 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-07-31 13:13:41,264 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests already exists.', 'locations': [{'line': 3, 'column': 17}], 'path': ['createFolder']}]
2025-07-31 13:13:41,265 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation CreateFolder($projectId: String!, $path: String!) {\n                createFolder(projectId: $projectId, path: $path) {\n                    folder {\n                        name\n                        path\n                    }\n                    warnings\n                }\n            }\n            ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Error Handling"
  }
}
2025-07-31 13:13:41,267 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:42,452 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 208
2025-07-31 13:13:42,453 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests/Error Handling already exists.', 'locations': [{'line': 3, 'column': 17}], 'path': ['createFolder']}]
2025-07-31 13:13:42,454 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTest($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "key = FRAMED-1294"
  }
}
2025-07-31 13:13:42,457 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:43,919 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 86
2025-07-31 13:13:43,921 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation AddTestToFolder($projectId: String!, $path: String!, $testIssueIds: [String]!) {\n            addTestsToFolder(projectId: $projectId, path: $path, testIssueIds: $testIssueIds) {\n                folder {\n                    name\n                    path\n                    testsCount\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests/Error Handling",
    "testIssueIds": [
      "1149173"
    ]
  }
}
2025-07-31 13:13:43,925 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:45,442 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 140
2025-07-31 13:13:45,447 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestLocation($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "key = FRAMED-1294"
  }
}
2025-07-31 13:13:45,449 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:13:46,778 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 217
2025-07-31 13:19:02,658 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:19:03,341 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 13:19:03,342 - INFO - Successfully obtained Xray authentication token
2025-07-31 13:19:03,343 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetProjectFromTest($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    projectId\n                    jira(fields: [\"key\", \"project\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED"
  }
}
2025-07-31 13:19:03,344 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:19:04,513 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 708
2025-07-31 13:19:04,516 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetAPITests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED AND labels = 'api'",
    "limit": 200
  }
}
2025-07-31 13:19:04,518 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:19:05,702 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 13:19:05,705 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-31 13:19:05,706 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:19:07,128 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 13:20:12,497 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:13,074 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 13:20:13,075 - INFO - Successfully obtained Xray authentication token
2025-07-31 13:20:13,076 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetProjectFromTest($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    projectId\n                    jira(fields: [\"key\", \"project\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED"
  }
}
2025-07-31 13:20:13,077 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:14,390 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 708
2025-07-31 13:20:14,393 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetAPITests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED AND labels = 'api'",
    "limit": 200
  }
}
2025-07-31 13:20:14,395 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:15,682 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 13:20:15,685 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-31 13:20:15,687 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:16,902 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 13:20:16,904 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests"
  }
}
2025-07-31 13:20:16,906 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:17,970 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-07-31 13:20:17,971 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-31 13:20:17,972 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Preconditions"
  }
}
2025-07-31 13:20:17,973 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:19,640 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 99
2025-07-31 13:20:19,640 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation AddIssuesToFolder($projectId: String!, $path: String!, $issueIds: [String]!) {\n                addIssuesToFolder(projectId: $projectId, path: $path, issueIds: $issueIds) {\n                    folder {\n                        name\n                        path\n                        preconditionsCount\n                        issuesCount\n                    }\n                    warnings\n                }\n            }\n            ",
  "variables": {
    "projectId": "25557",
    "path": "/Preconditions",
    "issueIds": [
      "1158177",
      "1158175",
      "1158174",
      "1158172",
      "1158170",
      "1158169",
      "1158167",
      "1158165",
      "1158163",
      "1158162"
    ]
  }
}
2025-07-31 13:20:19,641 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:21,012 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 145
2025-07-31 13:20:21,013 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation AddIssuesToFolder($projectId: String!, $path: String!, $issueIds: [String]!) {\n                addIssuesToFolder(projectId: $projectId, path: $path, issueIds: $issueIds) {\n                    folder {\n                        name\n                        path\n                        preconditionsCount\n                        issuesCount\n                    }\n                    warnings\n                }\n            }\n            ",
  "variables": {
    "projectId": "25557",
    "path": "/Preconditions",
    "issueIds": [
      "1158160",
      "1158158",
      "1158156",
      "1158154",
      "1158153",
      "1158151",
      "1158149",
      "1158147",
      "1158146",
      "1158144"
    ]
  }
}
2025-07-31 13:20:21,014 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:22,369 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 145
2025-07-31 13:20:22,371 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation AddIssuesToFolder($projectId: String!, $path: String!, $issueIds: [String]!) {\n                addIssuesToFolder(projectId: $projectId, path: $path, issueIds: $issueIds) {\n                    folder {\n                        name\n                        path\n                        preconditionsCount\n                        issuesCount\n                    }\n                    warnings\n                }\n            }\n            ",
  "variables": {
    "projectId": "25557",
    "path": "/Preconditions",
    "issueIds": [
      "1158142",
      "1158140",
      "1158139"
    ]
  }
}
2025-07-31 13:20:22,373 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:23,644 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 145
2025-07-31 13:20:33,021 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:33,722 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 13:20:33,722 - INFO - Successfully obtained Xray authentication token
2025-07-31 13:20:33,723 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetProjectFromTest($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    projectId\n                    jira(fields: [\"key\", \"project\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED"
  }
}
2025-07-31 13:20:33,724 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:35,030 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 708
2025-07-31 13:20:35,031 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetAPITests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED AND labels = 'api'",
    "limit": 200
  }
}
2025-07-31 13:20:35,034 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:36,218 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 13:20:36,221 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-31 13:20:36,222 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:37,456 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 13:20:37,459 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($projectId: String!, $path: String!) {\n            createFolder(projectId: $projectId, path: $path) {\n                folder {\n                    name\n                    path\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests"
  }
}
2025-07-31 13:20:37,460 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:38,483 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-07-31 13:20:38,484 - ERROR - GraphQL errors: [{'message': 'Error creating folder: folder with path /Team Page/API Tests already exists.', 'locations': [{'line': 3, 'column': 13}], 'path': ['createFolder']}]
2025-07-31 13:20:38,485 - DEBUG - GraphQL request payload: {
  "query": "\n            mutation AddTestsToFolder($projectId: String!, $path: String!, $testIssueIds: [String]!) {\n                addTestsToFolder(projectId: $projectId, path: $path, testIssueIds: $testIssueIds) {\n                    folder {\n                        name\n                        path\n                        testsCount\n                    }\n                    warnings\n                }\n            }\n            ",
  "variables": {
    "projectId": "25557",
    "path": "/Team Page/API Tests",
    "testIssueIds": [
      "1158246",
      "1158245",
      "1158244",
      "1158243",
      "1158242",
      "1158241",
      "1158240",
      "1158239",
      "1158238",
      "1158237",
      "1158191",
      "1158188",
      "1158185",
      "1158183",
      "1158180"
    ]
  }
}
2025-07-31 13:20:38,486 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:39,783 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 121
2025-07-31 13:20:46,819 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:47,373 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 13:20:47,375 - INFO - Successfully obtained Xray authentication token
2025-07-31 13:20:47,376 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetProjectFromTest($jql: String!) {\n            getTests(jql: $jql, limit: 1) {\n                results {\n                    projectId\n                    jira(fields: [\"key\", \"project\"])\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED"
  }
}
2025-07-31 13:20:47,377 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:48,604 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 708
2025-07-31 13:20:48,606 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetAPITests($jql: String!, $limit: Int!) {\n            getTests(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED AND labels = 'api'",
    "limit": 200
  }
}
2025-07-31 13:20:48,608 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:49,853 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 13:20:49,856 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditions($jql: String!, $limit: Int!) {\n            getPreconditions(jql: $jql, limit: $limit) {\n                total\n                results {\n                    issueId\n                    jira(fields: [\"key\", \"summary\"])\n                    folder {\n                        name\n                        path\n                    }\n                }\n            }\n        }\n        ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 100
  }
}
2025-07-31 13:20:49,857 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 13:20:51,021 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-07-31 18:24:30,734 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:24:31,598 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 18:24:31,604 - INFO - Successfully obtained Xray authentication token
2025-07-31 18:25:48,520 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:49,123 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 18:25:49,123 - INFO - Successfully obtained Xray authentication token
2025-07-31 18:25:49,124 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-001 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-001: Team Selection via Drawer",
        "team-page",
        "android",
        "navigation",
        "critical",
        "ios",
        "functional",
        "smoke",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:49,125 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:49,686 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:49,687 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:49,687 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:50,190 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-002 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual",
        "TC-002: Team Selection with Special Characters"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:50,192 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:50,745 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:50,752 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:50,753 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:51,259 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-003 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "requires-live-game",
        "game-state",
        "team-page",
        "live-state",
        "android",
        "critical",
        "ios",
        "functional",
        "TC-003: MIG Display During Live Game",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team with live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:51,261 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:51,974 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:51,974 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:51,974 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:52,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-004 - Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "TC-004: MIG Calendar Navigation",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "date-bar",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "View MIG section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:52,481 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:53,246 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:53,247 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:53,247 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:53,754 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-005 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "all-star",
        "team-page",
        "android",
        "TC-005: Home Run Derby Display",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team page during HRD period",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:53,755 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:54,400 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:54,401 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:54,401 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:54,906 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-006 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "TC-006: Article Carousel Navigation",
        "navigation",
        "content-display",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Top Stories section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:54,907 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:55,610 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:55,611 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:55,611 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:56,117 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-007 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "TC-007: Video Content Playback",
        "android",
        "content-display",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to video carousel",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:56,118 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:56,686 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:56,686 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:56,686 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:57,190 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-008 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "content-display",
        "medium",
        "ios",
        "functional",
        "TC-008: Editorial Module Display",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:57,191 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:57,926 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:57,927 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:57,927 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:58,433 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-009 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "localization",
        "critical",
        "ios",
        "functional",
        "high",
        "TC-009: Spanish Language Support",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:58,436 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:25:58,992 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:25:58,993 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:25:58,993 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:25:59,498 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-010 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "TC-010: Japanese Language Support",
        "android",
        "localization",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:25:59,499 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:00,677 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:00,678 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:00,678 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:01,180 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-011 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "TC-011: Deep Link Navigation",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:01,182 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:01,933 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:01,933 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:01,933 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:02,439 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-012 - Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
      "description": "Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "critical",
        "ios",
        "functional",
        "high",
        "TC-012: Schedule Navigation",
        "team_page",
        "product-links",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Team Info section",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:02,441 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:03,011 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:03,011 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:03,011 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:03,511 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-013 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-013: Page Load Performance",
        "performance",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "smoke",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open app and navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:03,514 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:04,202 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:04,203 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:04,203 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:04,707 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-014 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "performance",
        "team-page",
        "android",
        "navigation",
        "medium",
        "ios",
        "functional",
        "team_page",
        "TC-014: Team Switching Performance",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:04,708 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:05,445 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:05,445 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:05,445 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:05,951 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-015 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-015: Offline Behavior",
        "team-page",
        "android",
        "regression",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable airplane mode",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
        "data": "",
        "result": ""
      },
      {
        "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:05,952 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:06,625 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:06,625 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:06,625 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:07,131 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-016 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "regression",
        "medium",
        "ios",
        "functional",
        "TC-016: Invalid Team Data",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:07,132 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:07,896 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:07,897 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:07,897 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:08,402 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-017 - Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "accessibility",
        "critical",
        "ios",
        "functional",
        "talkback",
        "high",
        "voiceover",
        "team_page",
        "TC-017: Screen Reader Support",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable screen reader",
        "data": "",
        "result": ""
      },
      {
        "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
        "data": "",
        "result": ""
      },
      {
        "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:08,403 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:09,098 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:09,100 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:09,101 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:09,609 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-018 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-018: Dynamic Type Support",
        "team-page",
        "android",
        "accessibility",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Set device to largest text size",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:09,611 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:10,342 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:10,342 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:10,342 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:10,848 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-019 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-019: Feature Parity Check",
        "team-page",
        "android",
        "critical",
        "cross-platform",
        "functional",
        "ios",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open same team on both platforms",
        "data": "",
        "result": ""
      },
      {
        "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
        "data": "",
        "result": ""
      },
      {
        "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:10,849 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:11,640 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:11,642 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:11,642 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:12,147 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-020 - Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
      "description": "Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "ipad",
        "team-page",
        "matchup-display",
        "android",
        "TC-020: iPad MIG Layout",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page on iPad",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:12,148 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:12,691 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:12,691 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:12,691 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:13,196 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-021 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "analytics",
        "android",
        "medium",
        "ios",
        "functional",
        "TC-021: Event Tracking",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Charles Proxy",
        "data": "",
        "result": ""
      },
      {
        "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:13,197 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:13,925 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:13,927 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:13,928 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:14,433 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-022 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "TC-022: Opening Day Content Display",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "opening-day",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page on Opening Day",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:14,435 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:15,227 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:15,228 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:15,228 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:15,730 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-023 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "all-star",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "TC-023: All-Star Game Team Page Updates",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to any team page during All-Star break",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:15,736 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:16,649 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:16,649 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:16,650 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:17,155 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-024 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "team-page",
        "TC-024: Postseason Team Page Display",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "postseason",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to playoff team's page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:17,158 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:17,989 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:17,990 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:17,991 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:18,494 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-025 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "TC-025: World Series Team Page",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "world-series",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to World Series team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
        "data": "",
        "result": ""
      },
      {
        "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:18,495 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:19,235 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:19,235 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:19,235 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:19,742 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-026 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "team-page",
        "spring-training",
        "android",
        "TC-026: Spring Training Team Page",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during ST",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
        "data": "",
        "result": ""
      },
      {
        "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:19,743 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:20,579 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:20,579 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:20,579 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:21,086 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-027 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-027: International Series Team Display",
        "jewel-event",
        "international",
        "team-page",
        "android",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to participating team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:21,090 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:21,771 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:21,771 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:21,772 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:22,277 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-028 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "team-page",
        "android",
        "medium",
        "ios",
        "functional",
        "TC-028: Multiple Jewel Events Display",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "During All-Star week with HRD",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
        "data": "",
        "result": ""
      },
      {
        "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:22,280 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:22,822 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:22,822 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:22,822 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:23,327 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-029 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-029: Warmup State Display",
        "game-state",
        "preview-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during warmup",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
        "data": "",
        "result": ""
      },
      {
        "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:23,328 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:24,000 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:24,001 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:24,001 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:24,504 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-030 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "delayed-state",
        "team-page",
        "TC-030: Rain Delay Handling",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during delay",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:24,505 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:25,263 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:25,263 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:25,263 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:25,769 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-031 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "TC-031: Suspended Game With Resume Date",
        "team-page",
        "suspended-state",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:25,770 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:26,451 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:26,451 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:26,451 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:26,959 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-032 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-032: Manager Challenge State",
        "game-state",
        "team-page",
        "live-state",
        "android",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate during manager challenge",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:26,962 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:27,534 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:27,535 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:27,535 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:28,040 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-033 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "final-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "TC-033: Postponed Game Rescheduling",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:28,041 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:28,780 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:28,781 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:28,781 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:29,287 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-034 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "final-state",
        "team-page",
        "android",
        "ios",
        "functional",
        "TC-034: Forfeit Game Display",
        "team_page",
        "low",
        "manual"
      ],
      "priority": {
        "name": "Low"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:29,290 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:30,468 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:30,470 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:30,470 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:30,975 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-035 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-035: Game State Transition Timing",
        "game-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "state-transition",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
        "data": "",
        "result": ""
      },
      {
        "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:30,983 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:31,694 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:31,695 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:31,695 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:32,197 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-036 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "TC-036: Double Header Game State Display",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both games display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both games clearly separated",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify different states &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game 1/Game 2 indicators",
        "data": "",
        "result": ""
      },
      {
        "action": "Test switching between games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Independent state tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper time display for each",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:32,198 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:32,792 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:32,792 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:32,792 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:33,299 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-037 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "TC-037: Extra Innings State Display",
        "team-page",
        "live-state",
        "android",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check inning display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Extra inning number shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify free runner indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Free runner rule applied",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper score tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No display issues with 10+ innings",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:33,303 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:33,930 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:33,931 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:33,932 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:26:34,435 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                jiraId\n                issueId\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-038 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "team-page",
        "android",
        "TC-038: Game State Error Recovery",
        "regression",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force app to background during live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Wait 5 minutes",
        "data": "",
        "result": ""
      },
      {
        "action": "Return to Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current game state loads",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct state displays &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck on old state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth recovery process",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:26:34,436 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:26:35,119 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 235
2025-07-31 18:26:35,119 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-07-31 18:26:35,119 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"jiraId\" on type \"CreateTestResult\".","locations":[{"line":4,"column":17}]},{"message":"Cannot query field \"issueId\" on type \"CreateTestResult\".","locations":[{"line":5,"column":17}]}]}
2025-07-31 18:28:21,779 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:22,398 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 18:28:22,400 - INFO - Successfully obtained Xray authentication token
2025-07-31 18:28:22,402 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-001 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-001: Team Selection via Drawer",
        "team-page",
        "android",
        "navigation",
        "critical",
        "ios",
        "functional",
        "smoke",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:22,408 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:23,094 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:23,095 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:23,601 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-002 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual",
        "TC-002: Team Selection with Special Characters"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:23,604 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:24,352 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:24,354 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:24,873 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-003 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "requires-live-game",
        "game-state",
        "team-page",
        "live-state",
        "android",
        "critical",
        "ios",
        "functional",
        "TC-003: MIG Display During Live Game",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team with live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:24,874 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:25,734 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:25,735 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:26,241 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-004 - Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "TC-004: MIG Calendar Navigation",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "date-bar",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "View MIG section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:26,246 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:26,964 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:26,965 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:27,469 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-005 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "all-star",
        "team-page",
        "android",
        "TC-005: Home Run Derby Display",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team page during HRD period",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:27,473 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:28,157 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:28,158 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:28,663 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-006 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "TC-006: Article Carousel Navigation",
        "navigation",
        "content-display",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Top Stories section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:28,667 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:29,420 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:29,421 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:29,928 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-007 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "TC-007: Video Content Playback",
        "android",
        "content-display",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to video carousel",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:29,931 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:30,645 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:30,646 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:31,149 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-008 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "content-display",
        "medium",
        "ios",
        "functional",
        "TC-008: Editorial Module Display",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:31,152 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:31,702 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:31,703 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:32,206 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-009 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "localization",
        "critical",
        "ios",
        "functional",
        "high",
        "TC-009: Spanish Language Support",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:32,212 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:32,752 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:32,752 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:33,257 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-010 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "TC-010: Japanese Language Support",
        "android",
        "localization",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:33,260 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:33,913 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:33,915 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:34,420 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-011 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "TC-011: Deep Link Navigation",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:34,422 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:34,997 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:35,000 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:35,510 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-012 - Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
      "description": "Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "navigation",
        "critical",
        "ios",
        "functional",
        "high",
        "TC-012: Schedule Navigation",
        "team_page",
        "product-links",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Team Info section",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:35,512 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:36,333 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:36,337 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:36,843 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-013 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-013: Page Load Performance",
        "performance",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "smoke",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open app and navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:36,848 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:37,414 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:37,418 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:37,925 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-014 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "performance",
        "team-page",
        "android",
        "navigation",
        "medium",
        "ios",
        "functional",
        "team_page",
        "TC-014: Team Switching Performance",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:37,930 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:38,568 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:38,569 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:39,075 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-015 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-015: Offline Behavior",
        "team-page",
        "android",
        "regression",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable airplane mode",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
        "data": "",
        "result": ""
      },
      {
        "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:39,078 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:39,758 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:39,758 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:40,263 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-016 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "regression",
        "medium",
        "ios",
        "functional",
        "TC-016: Invalid Team Data",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:40,265 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:41,045 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:41,046 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:41,552 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-017 - Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "android",
        "accessibility",
        "critical",
        "ios",
        "functional",
        "talkback",
        "high",
        "voiceover",
        "team_page",
        "TC-017: Screen Reader Support",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable screen reader",
        "data": "",
        "result": ""
      },
      {
        "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
        "data": "",
        "result": ""
      },
      {
        "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:41,556 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:42,326 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:42,327 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:42,834 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-018 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-018: Dynamic Type Support",
        "team-page",
        "android",
        "accessibility",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Set device to largest text size",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:42,838 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:43,561 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:43,562 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:44,069 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-019 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-019: Feature Parity Check",
        "team-page",
        "android",
        "critical",
        "cross-platform",
        "functional",
        "ios",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open same team on both platforms",
        "data": "",
        "result": ""
      },
      {
        "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
        "data": "",
        "result": ""
      },
      {
        "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:44,073 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:44,736 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:44,738 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:45,245 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-020 - Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
      "description": "Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "ipad",
        "team-page",
        "matchup-display",
        "android",
        "TC-020: iPad MIG Layout",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page on iPad",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:45,248 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:46,166 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:46,166 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:46,671 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-021 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "team-page",
        "analytics",
        "android",
        "medium",
        "ios",
        "functional",
        "TC-021: Event Tracking",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Charles Proxy",
        "data": "",
        "result": ""
      },
      {
        "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:46,673 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:47,245 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:47,246 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:47,753 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-022 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "TC-022: Opening Day Content Display",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "opening-day",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page on Opening Day",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:47,760 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:48,620 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:48,621 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:49,128 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-023 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "all-star",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "TC-023: All-Star Game Team Page Updates",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to any team page during All-Star break",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:49,131 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:49,933 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:49,934 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:50,441 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-024 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "team-page",
        "TC-024: Postseason Team Page Display",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "postseason",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to playoff team's page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:50,443 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:51,182 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:51,183 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:51,686 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-025 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "TC-025: World Series Team Page",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "world-series",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to World Series team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
        "data": "",
        "result": ""
      },
      {
        "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:51,692 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:52,343 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:52,344 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:52,851 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-026 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "team-page",
        "spring-training",
        "android",
        "TC-026: Spring Training Team Page",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during ST",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
        "data": "",
        "result": ""
      },
      {
        "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:52,853 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:53,647 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:53,647 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:54,153 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-027 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-027: International Series Team Display",
        "jewel-event",
        "international",
        "team-page",
        "android",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to participating team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:54,160 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:54,898 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:54,899 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:55,401 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-028 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "jewel-event",
        "team-page",
        "android",
        "medium",
        "ios",
        "functional",
        "TC-028: Multiple Jewel Events Display",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "During All-Star week with HRD",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
        "data": "",
        "result": ""
      },
      {
        "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:55,406 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:55,971 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:55,973 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:56,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-029 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-029: Warmup State Display",
        "game-state",
        "preview-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during warmup",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
        "data": "",
        "result": ""
      },
      {
        "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:56,481 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:57,228 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:57,231 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:57,744 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-030 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "delayed-state",
        "team-page",
        "TC-030: Rain Delay Handling",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during delay",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:57,748 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:58,450 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:58,455 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:28:58,961 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-031 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "TC-031: Suspended Game With Resume Date",
        "team-page",
        "suspended-state",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:28:58,964 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:28:59,656 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:28:59,656 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:00,162 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-032 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-032: Manager Challenge State",
        "game-state",
        "team-page",
        "live-state",
        "android",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate during manager challenge",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:00,166 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:01,064 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:29:01,064 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:01,569 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-033 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "final-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "TC-033: Postponed Game Rescheduling",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:01,572 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:02,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:29:02,278 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:02,783 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-034 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "final-state",
        "team-page",
        "android",
        "ios",
        "functional",
        "TC-034: Forfeit Game Display",
        "team_page",
        "low",
        "manual"
      ],
      "priority": {
        "name": "Low"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:02,785 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:03,355 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:29:03,357 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:03,871 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-035 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "TC-035: Game State Transition Timing",
        "game-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "state-transition",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
        "data": "",
        "result": ""
      },
      {
        "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:03,874 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:04,599 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:29:04,600 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:05,105 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-036 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "team-page",
        "android",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "TC-036: Double Header Game State Display",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both games display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both games clearly separated",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify different states &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game 1/Game 2 indicators",
        "data": "",
        "result": ""
      },
      {
        "action": "Test switching between games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Independent state tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper time display for each",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:05,108 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:05,824 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:29:05,825 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:06,334 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-037 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "TC-037: Extra Innings State Display",
        "team-page",
        "live-state",
        "android",
        "medium",
        "ios",
        "functional",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "Medium"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check inning display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Extra inning number shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify free runner indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Free runner rule applied",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper score tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No display issues with 10+ innings",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:06,343 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:06,917 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:29:06,924 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:07,429 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "project": {
        "key": "FRAMED"
      },
      "summary": "[Functional] Team Page - TC-038 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
      "issuetype": {
        "name": "Test"
      },
      "labels": [
        "game-state",
        "team-page",
        "android",
        "TC-038: Game State Error Recovery",
        "regression",
        "critical",
        "ios",
        "functional",
        "high",
        "team_page",
        "manual"
      ],
      "priority": {
        "name": "High"
      },
      "components": [
        {
          "name": "team_page"
        }
      ]
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force app to background during live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Wait 5 minutes",
        "data": "",
        "result": ""
      },
      {
        "action": "Return to Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current game state loads",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct state displays &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck on old state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth recovery process",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:07,430 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:08,090 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 200
2025-07-31 18:29:08,090 - ERROR - GraphQL errors: [{'message': "Error creating Test: field 'jira' is required and should contain field 'fields' inside!", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:46,077 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:46,897 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 18:29:46,899 - INFO - Successfully obtained Xray authentication token
2025-07-31 18:29:46,900 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-001 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-001: Team Selection via Drawer",
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:46,903 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:48,614 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 284
2025-07-31 18:29:48,616 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-001: Team Selection via Drawer' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:49,121 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-002 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual",
          "TC-002: Team Selection with Special Characters"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:49,125 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:50,451 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 297
2025-07-31 18:29:50,453 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-002: Team Selection with Special Characters' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:50,957 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-003 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "requires-live-game",
          "game-state",
          "team-page",
          "live-state",
          "android",
          "critical",
          "ios",
          "functional",
          "TC-003: MIG Display During Live Game",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team with live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:50,959 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:52,330 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 287
2025-07-31 18:29:52,332 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-003: MIG Display During Live Game' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:52,847 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-004 - Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "TC-004: MIG Calendar Navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "date-bar",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "View MIG section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:52,857 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:54,259 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 282
2025-07-31 18:29:54,259 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-004: MIG Calendar Navigation' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:54,769 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-005 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "all-star",
          "team-page",
          "android",
          "TC-005: Home Run Derby Display",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team page during HRD period",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:54,776 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:56,314 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 281
2025-07-31 18:29:56,316 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-005: Home Run Derby Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:56,820 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-006 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "TC-006: Article Carousel Navigation",
          "navigation",
          "content-display",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Top Stories section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:56,823 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:29:58,215 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 286
2025-07-31 18:29:58,215 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-006: Article Carousel Navigation' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:29:58,721 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-007 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "TC-007: Video Content Playback",
          "android",
          "content-display",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to video carousel",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:29:58,723 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:00,096 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 281
2025-07-31 18:30:00,098 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-007: Video Content Playback' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:00,611 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-008 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "content-display",
          "medium",
          "ios",
          "functional",
          "TC-008: Editorial Module Display",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:00,614 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:02,007 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 283
2025-07-31 18:30:02,008 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-008: Editorial Module Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:02,514 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-009 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "localization",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-009: Spanish Language Support",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:02,517 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:03,920 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 283
2025-07-31 18:30:03,921 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-009: Spanish Language Support' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:04,426 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-010 - Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "TC-010: Japanese Language Support",
          "android",
          "localization",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:04,428 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:07,655 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 284
2025-07-31 18:30:07,655 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-010: Japanese Language Support' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:08,162 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-011 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "TC-011: Deep Link Navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:08,170 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:09,641 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-07-31 18:30:09,642 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-011: Deep Link Navigation' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:10,152 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-012 - Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
        "description": "Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-012: Schedule Navigation",
          "team_page",
          "product-links",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Team Info section",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:10,154 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:11,583 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 278
2025-07-31 18:30:11,584 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-012: Schedule Navigation' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:12,092 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-013 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-013: Page Load Performance",
          "performance",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open app and navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:12,098 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:13,820 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 280
2025-07-31 18:30:13,821 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-013: Page Load Performance' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:14,327 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-014 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "performance",
          "team-page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "team_page",
          "TC-014: Team Switching Performance",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:14,330 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:15,699 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 285
2025-07-31 18:30:15,701 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-014: Team Switching Performance' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:16,208 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-015 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-015: Offline Behavior",
          "team-page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable airplane mode",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
        "data": "",
        "result": ""
      },
      {
        "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:16,209 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:17,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 275
2025-07-31 18:30:17,701 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-015: Offline Behavior' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:18,207 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-016 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "regression",
          "medium",
          "ios",
          "functional",
          "TC-016: Invalid Team Data",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:18,208 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:19,870 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 276
2025-07-31 18:30:19,877 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-016: Invalid Team Data' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:20,385 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-017 - Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "accessibility",
          "critical",
          "ios",
          "functional",
          "talkback",
          "high",
          "voiceover",
          "team_page",
          "TC-017: Screen Reader Support",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable screen reader",
        "data": "",
        "result": ""
      },
      {
        "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
        "data": "",
        "result": ""
      },
      {
        "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:20,391 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:21,915 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 280
2025-07-31 18:30:21,917 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-017: Screen Reader Support' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:22,428 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-018 - Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-018: Dynamic Type Support",
          "team-page",
          "android",
          "accessibility",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Set device to largest text size",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:22,431 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:23,853 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-07-31 18:30:23,854 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-018: Dynamic Type Support' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:24,361 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-019 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-019: Feature Parity Check",
          "team-page",
          "android",
          "critical",
          "cross-platform",
          "functional",
          "ios",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open same team on both platforms",
        "data": "",
        "result": ""
      },
      {
        "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
        "data": "",
        "result": ""
      },
      {
        "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:24,365 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:37,218 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-07-31 18:30:37,221 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-019: Feature Parity Check' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:37,727 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-020 - Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
        "description": "Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "ipad",
          "team-page",
          "matchup-display",
          "android",
          "TC-020: iPad MIG Layout",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page on iPad",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:37,730 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:39,114 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 274
2025-07-31 18:30:39,116 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-020: iPad MIG Layout' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:39,622 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-021 - Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "analytics",
          "android",
          "medium",
          "ios",
          "functional",
          "TC-021: Event Tracking",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Charles Proxy",
        "data": "",
        "result": ""
      },
      {
        "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:39,626 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:40,911 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 273
2025-07-31 18:30:40,912 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-021: Event Tracking' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:41,419 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-022 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "TC-022: Opening Day Content Display",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "opening-day",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page on Opening Day",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:41,423 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:42,870 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 286
2025-07-31 18:30:42,871 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-022: Opening Day Content Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:43,375 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-023 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "all-star",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "TC-023: All-Star Game Team Page Updates",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to any team page during All-Star break",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:43,379 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:44,768 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 290
2025-07-31 18:30:44,769 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-023: All-Star Game Team Page Updates' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:45,274 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-024 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "TC-024: Postseason Team Page Display",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "postseason",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to playoff team's page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:45,280 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:46,759 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 287
2025-07-31 18:30:46,762 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-024: Postseason Team Page Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:47,267 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-025 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "TC-025: World Series Team Page",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "world-series",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to World Series team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
        "data": "",
        "result": ""
      },
      {
        "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:47,279 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:48,839 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 281
2025-07-31 18:30:48,840 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-025: World Series Team Page' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:49,344 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-026 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "spring-training",
          "android",
          "TC-026: Spring Training Team Page",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during ST",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
        "data": "",
        "result": ""
      },
      {
        "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:49,348 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:50,858 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 284
2025-07-31 18:30:50,858 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-026: Spring Training Team Page' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:51,365 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-027 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-027: International Series Team Display",
          "jewel-event",
          "international",
          "team-page",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to participating team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:51,369 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:52,880 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 292
2025-07-31 18:30:52,881 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-027: International Series Team Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:53,391 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-028 - Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "android",
          "medium",
          "ios",
          "functional",
          "TC-028: Multiple Jewel Events Display",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "During All-Star week with HRD",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
        "data": "",
        "result": ""
      },
      {
        "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:53,398 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:54,993 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 288
2025-07-31 18:30:54,996 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-028: Multiple Jewel Events Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:55,503 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-029 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-029: Warmup State Display",
          "game-state",
          "preview-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during warmup",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
        "data": "",
        "result": ""
      },
      {
        "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:55,516 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:56,813 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-07-31 18:30:56,814 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-029: Warmup State Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:57,321 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-030 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "delayed-state",
          "team-page",
          "TC-030: Rain Delay Handling",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during delay",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:57,329 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:30:58,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 278
2025-07-31 18:30:58,878 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-030: Rain Delay Handling' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:30:59,384 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-031 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "TC-031: Suspended Game With Resume Date",
          "team-page",
          "suspended-state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:30:59,386 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:00,764 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 290
2025-07-31 18:31:00,765 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-031: Suspended Game With Resume Date' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:01,270 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-032 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-032: Manager Challenge State",
          "game-state",
          "team-page",
          "live-state",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate during manager challenge",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:01,273 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:02,462 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 282
2025-07-31 18:31:02,463 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-032: Manager Challenge State' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:02,967 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-033 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "final-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-033: Postponed Game Rescheduling",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:02,973 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:04,433 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 286
2025-07-31 18:31:04,435 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-033: Postponed Game Rescheduling' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:04,938 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-034 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "final-state",
          "team-page",
          "android",
          "ios",
          "functional",
          "TC-034: Forfeit Game Display",
          "team_page",
          "low",
          "manual"
        ],
        "priority": {
          "name": "Low"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:04,940 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:06,343 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-07-31 18:31:06,345 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-034: Forfeit Game Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:06,863 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-035 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-035: Game State Transition Timing",
          "game-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "state-transition",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
        "data": "",
        "result": ""
      },
      {
        "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:06,865 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:08,130 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 287
2025-07-31 18:31:08,131 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-035: Game State Transition Timing' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:08,639 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-036 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "TC-036: Double Header Game State Display",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both games display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both games clearly separated",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify different states &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game 1/Game 2 indicators",
        "data": "",
        "result": ""
      },
      {
        "action": "Test switching between games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Independent state tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper time display for each",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:08,643 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:09,975 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 291
2025-07-31 18:31:09,976 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-036: Double Header Game State Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:10,482 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-037 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "TC-037: Extra Innings State Display",
          "team-page",
          "live-state",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check inning display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Extra inning number shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify free runner indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Free runner rule applied",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper score tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No display issues with 10+ innings",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:10,483 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:11,984 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 286
2025-07-31 18:31:11,984 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-037: Extra Innings State Display' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:12,489 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-038 - Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "team-page",
          "android",
          "TC-038: Game State Error Recovery",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force app to background during live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Wait 5 minutes",
        "data": "",
        "result": ""
      },
      {
        "action": "Return to Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current game state loads",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct state displays &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck on old state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth recovery process",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:12,491 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:14,003 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 284
2025-07-31 18:31:14,005 - ERROR - GraphQL errors: [{'message': "Issue create failed! - summary: The summary is invalid because it contains newline characters., labels: The label 'TC-038: Game State Error Recovery' can't contain spaces.", 'locations': [{'line': 3, 'column': 13}], 'path': ['createTest']}]
2025-07-31 18:31:53,032 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:53,932 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 18:31:53,933 - INFO - Successfully obtained Xray authentication token
2025-07-31 18:31:53,939 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-001 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-001-_Team_Selection_via_Drawer",
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:53,943 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:31:57,185 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:31:57,695 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-002 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual",
          "TC-002-_Team_Selection_with_Special_Characters"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:31:57,697 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:00,773 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:01,275 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-003 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "requires-live-game",
          "game-state",
          "team-page",
          "live-state",
          "android",
          "critical",
          "ios",
          "functional",
          "TC-003-_MIG_Display_During_Live_Game",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team with live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:01,283 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:04,467 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:04,970 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-004 - Folder: Team Page/Date Bar",
        "description": "Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "TC-004-_MIG_Calendar_Navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "date-bar",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "View MIG section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:04,971 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:07,630 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:08,139 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-005 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "all-star",
          "team-page",
          "android",
          "TC-005-_Home_Run_Derby_Display",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team page during HRD period",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:08,143 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:11,083 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:11,592 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-006 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "TC-006-_Article_Carousel_Navigation",
          "navigation",
          "content-display",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Top Stories section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:11,599 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:14,392 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:14,899 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-007 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "TC-007-_Video_Content_Playback",
          "android",
          "content-display",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to video carousel",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:14,911 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:17,788 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:18,297 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-008 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "content-display",
          "medium",
          "ios",
          "functional",
          "TC-008-_Editorial_Module_Display",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:18,301 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:21,727 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:22,235 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-009 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "localization",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-009-_Spanish_Language_Support",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:22,240 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:25,066 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:25,573 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-010 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "TC-010-_Japanese_Language_Support",
          "android",
          "localization",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:25,577 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:28,623 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:29,126 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-011 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "TC-011-_Deep_Link_Navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:29,128 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:31,950 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:32,457 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-012 - Folder: Team Page/Product Links",
        "description": "Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-012-_Schedule_Navigation",
          "team_page",
          "product-links",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Team Info section",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:32,460 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:35,496 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:36,005 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-013 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-013-_Page_Load_Performance",
          "performance",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open app and navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:36,017 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:39,057 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:39,564 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-014 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "performance",
          "team-page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "team_page",
          "TC-014-_Team_Switching_Performance",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:39,569 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:42,418 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:42,924 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-015 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-015-_Offline_Behavior",
          "team-page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable airplane mode",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
        "data": "",
        "result": ""
      },
      {
        "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:42,927 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:45,687 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:46,194 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-016 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "regression",
          "medium",
          "ios",
          "functional",
          "TC-016-_Invalid_Team_Data",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:46,199 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:48,959 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:49,463 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-017 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "accessibility",
          "critical",
          "ios",
          "functional",
          "talkback",
          "high",
          "voiceover",
          "team_page",
          "TC-017-_Screen_Reader_Support",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable screen reader",
        "data": "",
        "result": ""
      },
      {
        "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
        "data": "",
        "result": ""
      },
      {
        "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:49,464 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:52,560 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:53,072 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-018 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-018-_Dynamic_Type_Support",
          "team-page",
          "android",
          "accessibility",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Set device to largest text size",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:53,077 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:55,834 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:56,338 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-019 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-019-_Feature_Parity_Check",
          "team-page",
          "android",
          "critical",
          "cross-platform",
          "functional",
          "ios",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open same team on both platforms",
        "data": "",
        "result": ""
      },
      {
        "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
        "data": "",
        "result": ""
      },
      {
        "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:56,343 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:32:59,135 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:32:59,646 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-020 - Folder: Team Page/Matchup Display",
        "description": "Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "ipad",
          "team-page",
          "matchup-display",
          "android",
          "TC-020-_iPad_MIG_Layout",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page on iPad",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:32:59,648 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:02,520 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:03,031 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-021 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "analytics",
          "android",
          "medium",
          "ios",
          "functional",
          "TC-021-_Event_Tracking",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Charles Proxy",
        "data": "",
        "result": ""
      },
      {
        "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:03,046 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:06,070 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:06,581 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-022 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "TC-022-_Opening_Day_Content_Display",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "opening-day",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page on Opening Day",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:06,593 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:09,324 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:09,831 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-023 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "all-star",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "TC-023-_All-Star_Game_Team_Page_Updates",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to any team page during All-Star break",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:09,832 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:12,693 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:13,199 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-024 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "TC-024-_Postseason_Team_Page_Display",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "postseason",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to playoff team's page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:13,204 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:16,280 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:16,788 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-025 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "TC-025-_World_Series_Team_Page",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "world-series",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to World Series team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
        "data": "",
        "result": ""
      },
      {
        "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:16,790 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:19,617 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:20,124 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-026 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "spring-training",
          "android",
          "TC-026-_Spring_Training_Team_Page",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during ST",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
        "data": "",
        "result": ""
      },
      {
        "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:20,129 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:23,098 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:23,605 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-027 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-027-_International_Series_Team_Display",
          "jewel-event",
          "international",
          "team-page",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to participating team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:23,610 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:26,645 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:27,153 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-028 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "android",
          "medium",
          "ios",
          "functional",
          "TC-028-_Multiple_Jewel_Events_Display",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "During All-Star week with HRD",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
        "data": "",
        "result": ""
      },
      {
        "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:27,158 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:29,918 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:30,424 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-029 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-029-_Warmup_State_Display",
          "game-state",
          "preview-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during warmup",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
        "data": "",
        "result": ""
      },
      {
        "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:30,427 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:33,039 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:33,547 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-030 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "delayed-state",
          "team-page",
          "TC-030-_Rain_Delay_Handling",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during delay",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:33,552 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:36,493 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:36,999 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-031 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "TC-031-_Suspended_Game_With_Resume_Date",
          "team-page",
          "suspended-state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:37,005 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:39,949 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:40,456 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-032 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-032-_Manager_Challenge_State",
          "game-state",
          "team-page",
          "live-state",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate during manager challenge",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:40,458 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:43,532 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:44,041 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-033 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "final-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-033-_Postponed_Game_Rescheduling",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:44,045 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:46,814 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:47,322 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-034 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "final-state",
          "team-page",
          "android",
          "ios",
          "functional",
          "TC-034-_Forfeit_Game_Display",
          "team_page",
          "low",
          "manual"
        ],
        "priority": {
          "name": "Low"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:47,326 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 18:33:50,087 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 18:33:50,596 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-035 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-035-_Game_State_Transition_Timing",
          "game-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "state-transition",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
        "data": "",
        "result": ""
      },
      {
        "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 18:33:50,597 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:41:44,553 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:41:45,369 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 19:41:45,377 - INFO - Successfully obtained Xray authentication token
2025-07-31 19:41:45,378 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-001 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-001-_Team_Selection_via_Drawer",
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:41:45,381 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:41:48,559 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:41:55,788 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:41:56,518 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 19:41:56,519 - INFO - Successfully obtained Xray authentication token
2025-07-31 19:41:56,521 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-001 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-001-_Team_Selection_via_Drawer",
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:41:56,525 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:41:59,477 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:27,371 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:27,925 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-07-31 19:42:27,927 - INFO - Successfully obtained Xray authentication token
2025-07-31 19:42:27,928 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-001 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nTest Data: Test with all 30 teams",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-001-_Team_Selection_via_Drawer",
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:27,931 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:30,624 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:31,131 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-002 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1005",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual",
          "TC-002-_Team_Selection_with_Special_Characters"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:31,135 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:34,546 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:35,052 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-003 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "requires-live-game",
          "game-state",
          "team-page",
          "live-state",
          "android",
          "critical",
          "ios",
          "functional",
          "TC-003-_MIG_Display_During_Live_Game",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team with live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:35,056 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:38,059 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:38,566 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-004 - Folder: Team Page/Date Bar",
        "description": "Folder: Team Page/Date Bar\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "TC-004-_MIG_Calendar_Navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "date-bar",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "View MIG section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:38,569 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:41,192 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:41,698 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-005 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1200, FRAMED-1222",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "all-star",
          "team-page",
          "android",
          "TC-005-_Home_Run_Derby_Display",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to team page during HRD period",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:41,702 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:44,308 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:44,815 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-006 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "TC-006-_Article_Carousel_Navigation",
          "navigation",
          "content-display",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Top Stories section",
        "data": "",
        "result": ""
      },
      {
        "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:44,816 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:47,499 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:48,008 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-007 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "TC-007-_Video_Content_Playback",
          "android",
          "content-display",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to video carousel",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:48,015 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:50,738 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:51,243 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-008 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-871",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "content-display",
          "medium",
          "ios",
          "functional",
          "TC-008-_Editorial_Module_Display",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:51,244 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:53,765 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:54,270 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-009 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1107, FRAMED-1117",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "localization",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-009-_Spanish_Language_Support",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
        "data": "",
        "result": ""
      },
      {
        "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:54,274 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:56,983 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:42:57,487 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-010 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1176",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "TC-010-_Japanese_Language_Support",
          "android",
          "localization",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:42:57,488 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:42:59,936 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:00,442 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-011 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "TC-011-_Deep_Link_Navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:00,444 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:02,904 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:03,413 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-012 - Folder: Team Page/Product Links",
        "description": "Folder: Team Page/Product Links\nPlatforms: iOS, Android\nRelated Issues: FRAMED-642",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-012-_Schedule_Navigation",
          "team_page",
          "product-links",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Scroll to Team Info section",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
        "data": "",
        "result": ""
      },
      {
        "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:03,416 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:06,023 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:06,530 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-013 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-013-_Page_Load_Performance",
          "performance",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force close app",
        "data": "",
        "result": ""
      },
      {
        "action": "Open app and navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:06,533 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:09,248 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:09,752 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-014 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "performance",
          "team-page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "team_page",
          "TC-014-_Team_Switching_Performance",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:09,754 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:12,371 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:12,880 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-015 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-015-_Offline_Behavior",
          "team-page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable airplane mode",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
        "data": "",
        "result": ""
      },
      {
        "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:12,883 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:15,630 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:16,136 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-016 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android\nRelated Issues: FRAMED-728",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "regression",
          "medium",
          "ios",
          "functional",
          "TC-016-_Invalid_Team_Data",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:16,140 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:19,604 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:20,113 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-017 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS (VoiceOver), Android (TalkBack)",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "android",
          "accessibility",
          "critical",
          "ios",
          "functional",
          "talkback",
          "high",
          "voiceover",
          "team_page",
          "TC-017-_Screen_Reader_Support",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Enable screen reader",
        "data": "",
        "result": ""
      },
      {
        "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
        "data": "",
        "result": ""
      },
      {
        "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:20,114 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:23,423 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:23,929 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-018 - Folder: Team Page/Content Display",
        "description": "Folder: Team Page/Content Display\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-018-_Dynamic_Type_Support",
          "team-page",
          "android",
          "accessibility",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Set device to largest text size",
        "data": "",
        "result": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
        "data": "",
        "result": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:23,931 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:26,497 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:27,001 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-019 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-019-_Feature_Parity_Check",
          "team-page",
          "android",
          "critical",
          "cross-platform",
          "functional",
          "ios",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open same team on both platforms",
        "data": "",
        "result": ""
      },
      {
        "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
        "data": "",
        "result": ""
      },
      {
        "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:27,004 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:29,583 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:30,086 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-020 - Folder: Team Page/Matchup Display",
        "description": "Folder: Team Page/Matchup Display\nPlatforms: iOS, Android\nRelated Issues: FRAMED-1078",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "ipad",
          "team-page",
          "matchup-display",
          "android",
          "TC-020-_iPad_MIG_Layout",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Team Page on iPad",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:30,089 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:32,615 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:33,121 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-021 - Folder: Team Page/Core Navigation",
        "description": "Folder: Team Page/Core Navigation\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "team-page",
          "analytics",
          "android",
          "medium",
          "ios",
          "functional",
          "TC-021-_Event_Tracking",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Open Charles Proxy",
        "data": "",
        "result": ""
      },
      {
        "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:33,122 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:35,724 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:36,233 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-022 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "TC-022-_Opening_Day_Content_Display",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "opening-day",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page on Opening Day",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:36,236 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:38,741 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:39,249 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-023 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "all-star",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "TC-023-_All-Star_Game_Team_Page_Updates",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to any team page during All-Star break",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:39,252 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:41,500 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:42,006 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-024 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "TC-024-_Postseason_Team_Page_Display",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "postseason",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to playoff team's page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:42,007 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:44,716 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:45,223 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-025 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "TC-025-_World_Series_Team_Page",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "world-series",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to World Series team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
        "data": "",
        "result": ""
      },
      {
        "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:45,224 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:47,705 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:48,210 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-026 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "spring-training",
          "android",
          "TC-026-_Spring_Training_Team_Page",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during ST",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
        "data": "",
        "result": ""
      },
      {
        "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:48,211 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:50,946 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:51,454 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-027 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-027-_International_Series_Team_Display",
          "jewel-event",
          "international",
          "team-page",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to participating team page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:51,458 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:53,950 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:54,454 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-028 - Folder: Team Page/Jewel Events",
        "description": "Folder: Team Page/Jewel Events\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "jewel-event",
          "team-page",
          "android",
          "medium",
          "ios",
          "functional",
          "TC-028-_Multiple_Jewel_Events_Display",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "During All-Star week with HRD",
        "data": "",
        "result": ""
      },
      {
        "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
        "data": "",
        "result": ""
      },
      {
        "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:54,455 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:43:57,024 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:43:57,531 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-029 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-029-_Warmup_State_Display",
          "game-state",
          "preview-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during warmup",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
        "data": "",
        "result": ""
      },
      {
        "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:43:57,532 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:00,251 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:00,754 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-030 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "delayed-state",
          "team-page",
          "TC-030-_Rain_Delay_Handling",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page during delay",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:00,756 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:03,470 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:03,976 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-031 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "TC-031-_Suspended_Game_With_Resume_Date",
          "team-page",
          "suspended-state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:03,977 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:07,031 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:07,534 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-032 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-032-_Manager_Challenge_State",
          "game-state",
          "team-page",
          "live-state",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate during manager challenge",
        "data": "",
        "result": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:07,535 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:10,030 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:10,537 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-033 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "final-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "TC-033-_Postponed_Game_Rescheduling",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
        "data": "",
        "result": ""
      },
      {
        "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:10,543 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:12,973 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:13,479 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-034 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "final-state",
          "team-page",
          "android",
          "ios",
          "functional",
          "TC-034-_Forfeit_Game_Display",
          "team_page",
          "low",
          "manual"
        ],
        "priority": {
          "name": "Low"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:13,481 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:15,942 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:16,451 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-035 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "TC-035-_Game_State_Transition_Timing",
          "game-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "state-transition",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
        "data": "",
        "result": ""
      },
      {
        "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
        "data": "",
        "result": ""
      },
      {
        "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:16,455 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:18,971 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:19,476 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-036 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "team-page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "TC-036-_Double_Header_Game_State_Display",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check both games display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both games clearly separated",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify different states &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game 1/Game 2 indicators",
        "data": "",
        "result": ""
      },
      {
        "action": "Test switching between games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Independent state tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper time display for each",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:19,478 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:23,737 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:24,244 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-037 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "TC-037-_Extra_Innings_State_Display",
          "team-page",
          "live-state",
          "android",
          "medium",
          "ios",
          "functional",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "data": "",
        "result": ""
      },
      {
        "action": "Check inning display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Extra inning number shown",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify free runner indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Free runner rule applied",
        "data": "",
        "result": ""
      },
      {
        "action": "Monitor score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper score tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No display issues with 10+ innings",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:24,245 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:26,813 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-07-31 19:44:27,320 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFunctionalTest($jira: JSON!, $testType: UpdateTestTypeInput, $steps: [CreateStepInput]) {\n            createTest(jira: $jira, testType: $testType, steps: $steps) {\n                test {\n                    issueId\n                    jira(fields: [\"key\"])\n                }\n                warnings\n            }\n        }\n        ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "[Functional] Team Page - TC-038 - Folder: Team Page/Game States",
        "description": "Folder: Team Page/Game States\nPlatforms: iOS, Android",
        "issuetype": {
          "name": "Test"
        },
        "labels": [
          "game-state",
          "team-page",
          "android",
          "TC-038-_Game_State_Error_Recovery",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "team_page",
          "manual"
        ],
        "priority": {
          "name": "High"
        },
        "components": [
          {
            "name": "team_page"
          }
        ]
      }
    },
    "testType": {
      "name": "Manual"
    },
    "steps": [
      {
        "action": "Force app to background during live game",
        "data": "",
        "result": ""
      },
      {
        "action": "Wait 5 minutes",
        "data": "",
        "result": ""
      },
      {
        "action": "Return to Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current game state loads",
        "data": "",
        "result": ""
      },
      {
        "action": "Verify correct state displays &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck on old state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth recovery process",
        "data": "",
        "result": ""
      }
    ]
  }
}
2025-07-31 19:44:27,321 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-07-31 19:44:29,909 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 97
2025-08-01 11:18:58,384 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:18:59,209 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:18:59,209 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:18:59,211 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetPreconditions($jql: String!, $limit: Int!) {\n        getPreconditions(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                summary\n                definition\n                labels\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 1000
  }
}
2025-08-01 11:18:59,213 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:19:00,206 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 227
2025-08-01 11:19:00,209 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:19:00,209 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"summary\" on type \"Precondition\".","locations":[{"line":7,"column":17}]},{"message":"Cannot query field \"labels\" on type \"Precondition\".","locations":[{"line":9,"column":17}]}]}
2025-08-01 11:19:26,420 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:19:27,197 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:19:27,198 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:19:27,199 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetPreconditions($jql: String!, $limit: Int!) {\n        getPreconditions(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"summary\", \"labels\"]) {\n                    summary\n                    labels\n                }\n                definition\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 1000
  }
}
2025-08-01 11:19:27,203 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:19:27,941 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 142
2025-08-01 11:19:27,941 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:19:27,941 - ERROR - Response body: {"errors":[{"message":"Field \"jira\" must not have a selection since type \"JSON\" has no subfields.","locations":[{"line":7,"column":53}]}]}
2025-08-01 11:19:59,943 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:20:00,661 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:20:00,662 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:20:00,662 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetPreconditions($jql: String!, $limit: Int!) {\n        getPreconditions(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                summary\n                definition\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 1000
  }
}
2025-08-01 11:20:00,664 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:20:01,394 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 120
2025-08-01 11:20:01,394 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:20:01,394 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"summary\" on type \"Precondition\".","locations":[{"line":7,"column":17}]}]}
2025-08-01 11:20:41,375 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:20:42,220 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:20:42,220 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:20:42,221 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetPreconditions($jql: String!, $limit: Int!) {\n        getPreconditions(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n                definition\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED",
    "limit": 1000
  }
}
2025-08-01 11:20:42,222 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:20:43,653 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 11:22:37,074 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:37,687 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:22:37,688 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:22:37,688 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "User has the app installed and opened",
    "definition": "User has the app installed and opened",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:37,689 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:38,403 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:38,404 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:38,404 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:38,907 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "App is on Team Page",
    "definition": "App is on Team Page",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:38,910 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:39,647 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:39,648 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:39,648 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:40,151 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Selected team has a live game",
    "definition": "Selected team has a live game",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:40,152 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:40,804 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:40,805 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:40,805 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:41,308 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "HRD is scheduled",
    "definition": "HRD is scheduled",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:41,313 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:41,992 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:41,994 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:41,994 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:42,501 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Device language set to Spanish",
    "definition": "Device language set to Spanish",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:42,506 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:43,250 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:43,252 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:43,252 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:43,761 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Device language set to Japanese",
    "definition": "Device language set to Japanese",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:43,764 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:44,357 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:44,358 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:44,358 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:44,864 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Testing during Opening Day period",
    "definition": "Testing during Opening Day period",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:44,867 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:45,459 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:45,460 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:45,460 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:45,967 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Testing during All-Star period",
    "definition": "Testing during All-Star period",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:45,968 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:46,671 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:46,671 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:46,671 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:47,176 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Team qualified for postseason",
    "definition": "Team qualified for postseason",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:47,178 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:47,925 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:47,925 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:47,925 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:48,427 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Team in World Series",
    "definition": "Team in World Series",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:48,429 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:49,242 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:49,242 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:49,243 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:49,749 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Spring Training period active",
    "definition": "Spring Training period active",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:49,755 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:50,354 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:50,355 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:50,355 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:50,861 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Team playing in International Series",
    "definition": "Team playing in International Series",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:50,863 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:51,409 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:51,409 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:51,409 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:51,910 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Multiple jewel events active",
    "definition": "Multiple jewel events active",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:51,914 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:52,643 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:52,644 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:52,644 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:53,147 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Team has game in warmup state",
    "definition": "Team has game in warmup state",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:53,149 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:53,843 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:53,844 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:53,844 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:54,350 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Game in rain delay",
    "definition": "Game in rain delay",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:54,351 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:54,989 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:54,990 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:54,990 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:55,497 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Suspended game with scheduled resume",
    "definition": "Suspended game with scheduled resume",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:55,499 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:56,455 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:56,456 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:56,456 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:56,966 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Live game with active challenge",
    "definition": "Live game with active challenge",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:56,971 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:57,693 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:57,694 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:57,694 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:58,200 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Recently postponed game",
    "definition": "Recently postponed game",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:58,201 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:22:58,943 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:22:58,945 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:22:58,945 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:22:59,451 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Forfeit game (rare)",
    "definition": "Forfeit game (rare)",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:22:59,453 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:00,118 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:23:00,118 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:00,119 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:23:00,624 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Team playing doubleheader",
    "definition": "Team playing doubleheader",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:23:00,626 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:01,304 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:23:01,305 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:01,306 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:23:01,814 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($projectId: String!, $summary: String!, $definition: String!, $labels: [String]) {\n        createPrecondition(\n            projectId: $projectId,\n            precondition: {\n                summary: $summary,\n                definition: $definition,\n                labels: $labels\n            }\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "projectId": "10000",
    "summary": "Game in extra innings",
    "definition": "Game in extra innings",
    "labels": [
      "functional",
      "team-page",
      "automated"
    ]
  }
}
2025-08-01 11:23:01,816 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:02,605 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 485
2025-08-01 11:23:02,607 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:02,607 - ERROR - Response body: {"errors":[{"message":"Unknown argument \"projectId\" on field \"createPrecondition\" of type \"Mutation\".","locations":[{"line":4,"column":13}]},{"message":"Unknown argument \"precondition\" on field \"createPrecondition\" of type \"Mutation\". Did you mean \"preconditionType\" or \"definition\"?","locations":[{"line":5,"column":13}]},{"message":"Field \"createPrecondition\" argument \"jira\" of type \"JSON!\" is required but not provided.","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:23:30,078 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:31,125 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:23:31,126 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:23:31,126 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "User has the app installed and opened",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "User has the app installed and opened"
  }
}
2025-08-01 11:23:31,128 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:31,802 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:31,802 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:31,802 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:32,309 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "App is on Team Page",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "App is on Team Page"
  }
}
2025-08-01 11:23:32,313 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:32,828 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:32,829 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:32,829 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:33,357 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Selected team has a live game",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Selected team has a live game"
  }
}
2025-08-01 11:23:33,360 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:34,088 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:34,089 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:34,089 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:34,596 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "HRD is scheduled",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "HRD is scheduled"
  }
}
2025-08-01 11:23:34,600 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:35,124 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:35,126 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:35,126 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:35,632 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Device language set to Spanish",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Device language set to Spanish"
  }
}
2025-08-01 11:23:35,634 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:36,311 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:36,312 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:36,313 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:36,819 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Device language set to Japanese",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Device language set to Japanese"
  }
}
2025-08-01 11:23:36,822 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:37,493 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:37,494 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:37,494 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:37,996 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Testing during Opening Day period",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Testing during Opening Day period"
  }
}
2025-08-01 11:23:37,999 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:38,739 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:38,740 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:38,740 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:39,250 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Testing during All-Star period",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Testing during All-Star period"
  }
}
2025-08-01 11:23:39,252 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:40,050 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:40,051 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:40,052 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:40,555 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team qualified for postseason",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Team qualified for postseason"
  }
}
2025-08-01 11:23:40,556 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:41,257 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:41,259 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:41,260 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:41,766 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team in World Series",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Team in World Series"
  }
}
2025-08-01 11:23:41,768 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:42,287 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:42,289 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:42,290 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:42,793 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Spring Training period active",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Spring Training period active"
  }
}
2025-08-01 11:23:42,796 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:43,476 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:43,477 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:43,477 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:43,980 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team playing in International Series",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Team playing in International Series"
  }
}
2025-08-01 11:23:43,981 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:44,648 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:44,649 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:44,649 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:45,154 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Multiple jewel events active",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Multiple jewel events active"
  }
}
2025-08-01 11:23:45,157 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:45,806 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:45,808 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:45,808 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:46,317 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team has game in warmup state",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Team has game in warmup state"
  }
}
2025-08-01 11:23:46,326 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:47,222 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:47,223 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:47,223 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:47,730 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Game in rain delay",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Game in rain delay"
  }
}
2025-08-01 11:23:47,732 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:48,425 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:48,426 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:48,426 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:48,932 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Suspended game with scheduled resume",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Suspended game with scheduled resume"
  }
}
2025-08-01 11:23:48,936 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:49,647 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:49,647 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:49,648 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:50,153 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Live game with active challenge",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Live game with active challenge"
  }
}
2025-08-01 11:23:50,159 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:50,867 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:50,868 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:50,868 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:51,376 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Recently postponed game",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Recently postponed game"
  }
}
2025-08-01 11:23:51,379 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:52,249 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:52,250 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:52,250 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:52,758 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Forfeit game (rare)",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Forfeit game (rare)"
  }
}
2025-08-01 11:23:52,760 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:53,366 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:53,367 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:53,367 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:53,872 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team playing doubleheader",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Team playing doubleheader"
  }
}
2025-08-01 11:23:53,874 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:54,393 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:54,394 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:54,394 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:23:54,899 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $preconditionType: String, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            preconditionType: $preconditionType,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Game in extra innings",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "preconditionType": "GENERIC",
    "definition": "Game in extra innings"
  }
}
2025-08-01 11:23:54,901 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:23:55,435 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 201
2025-08-01 11:23:55,435 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:23:55,435 - ERROR - Response body: {"errors":[{"message":"Variable \"$preconditionType\" of type \"String\" used in position expecting type \"UpdatePreconditionTypeInput\".","locations":[{"line":2,"column":47},{"line":5,"column":31}]}]}
2025-08-01 11:24:17,599 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:17,990 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:24:17,991 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:24:17,991 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "User has the app installed and opened",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "User has the app installed and opened"
  }
}
2025-08-01 11:24:17,992 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:18,786 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:18,787 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:19,295 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "App is on Team Page",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "App is on Team Page"
  }
}
2025-08-01 11:24:19,298 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:19,888 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:19,896 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:20,400 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Selected team has a live game",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Selected team has a live game"
  }
}
2025-08-01 11:24:20,402 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:21,281 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:21,281 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:21,783 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "HRD is scheduled",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "HRD is scheduled"
  }
}
2025-08-01 11:24:21,784 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:22,554 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:22,555 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:23,063 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Device language set to Spanish",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Device language set to Spanish"
  }
}
2025-08-01 11:24:23,067 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:23,886 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:23,887 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:24,394 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Device language set to Japanese",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Device language set to Japanese"
  }
}
2025-08-01 11:24:24,396 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:25,247 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:25,248 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:25,752 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Testing during Opening Day period",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Testing during Opening Day period"
  }
}
2025-08-01 11:24:25,754 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:26,597 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:26,597 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:27,103 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Testing during All-Star period",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Testing during All-Star period"
  }
}
2025-08-01 11:24:27,104 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:27,935 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:27,936 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:28,444 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team qualified for postseason",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team qualified for postseason"
  }
}
2025-08-01 11:24:28,445 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:29,279 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:29,280 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:29,783 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team in World Series",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team in World Series"
  }
}
2025-08-01 11:24:29,786 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:30,578 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:30,578 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:31,082 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Spring Training period active",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Spring Training period active"
  }
}
2025-08-01 11:24:31,086 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:31,844 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:31,844 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:32,345 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team playing in International Series",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team playing in International Series"
  }
}
2025-08-01 11:24:32,348 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:33,087 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:33,088 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:33,593 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Multiple jewel events active",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Multiple jewel events active"
  }
}
2025-08-01 11:24:33,595 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:34,371 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:34,372 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:34,875 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team has game in warmup state",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team has game in warmup state"
  }
}
2025-08-01 11:24:34,876 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:35,627 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:35,628 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:36,131 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Game in rain delay",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Game in rain delay"
  }
}
2025-08-01 11:24:36,134 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:36,826 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:36,826 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:37,327 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Suspended game with scheduled resume",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Suspended game with scheduled resume"
  }
}
2025-08-01 11:24:37,328 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:38,111 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:38,112 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:38,617 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Live game with active challenge",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Live game with active challenge"
  }
}
2025-08-01 11:24:38,618 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:39,233 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:39,234 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:39,745 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Recently postponed game",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Recently postponed game"
  }
}
2025-08-01 11:24:39,747 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:40,440 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:40,441 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:40,947 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Forfeit game (rare)",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Forfeit game (rare)"
  }
}
2025-08-01 11:24:40,949 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:41,796 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:41,796 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:42,302 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Team playing doubleheader",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team playing doubleheader"
  }
}
2025-08-01 11:24:42,313 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:43,112 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:43,112 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:24:43,617 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "id": "10000"
        },
        "summary": "Game in extra innings",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Game in extra innings"
  }
}
2025-08-01 11:24:43,620 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:24:44,212 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 225
2025-08-01 11:24:44,216 - ERROR - GraphQL errors: [{'message': 'Error retrieving Project from Jira with key "10000": No project could be found with id \'10000\'.', 'locations': [{'line': 3, 'column': 9}], 'path': ['createPrecondition']}]
2025-08-01 11:25:19,718 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:20,453 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:25:20,453 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:25:20,455 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "User has the app installed and opened",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "User has the app installed and opened"
  }
}
2025-08-01 11:25:20,456 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:23,360 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 163
2025-08-01 11:25:23,363 - INFO - Operation logged: create_precondition
2025-08-01 11:25:23,863 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "App is on Team Page",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "App is on Team Page"
  }
}
2025-08-01 11:25:23,865 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:26,812 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 145
2025-08-01 11:25:26,813 - INFO - Operation logged: create_precondition
2025-08-01 11:25:27,315 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Selected team has a live game",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Selected team has a live game"
  }
}
2025-08-01 11:25:27,323 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:30,080 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 155
2025-08-01 11:25:30,096 - INFO - Operation logged: create_precondition
2025-08-01 11:25:30,601 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "HRD is scheduled",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "HRD is scheduled"
  }
}
2025-08-01 11:25:30,608 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:33,255 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 142
2025-08-01 11:25:33,503 - INFO - Operation logged: create_precondition
2025-08-01 11:25:34,005 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Device language set to Spanish",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Device language set to Spanish"
  }
}
2025-08-01 11:25:34,010 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:36,620 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 156
2025-08-01 11:25:36,620 - INFO - Operation logged: create_precondition
2025-08-01 11:25:37,121 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Device language set to Japanese",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Device language set to Japanese"
  }
}
2025-08-01 11:25:37,124 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:39,619 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 157
2025-08-01 11:25:39,624 - INFO - Operation logged: create_precondition
2025-08-01 11:25:40,133 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Testing during Opening Day period",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Testing during Opening Day period"
  }
}
2025-08-01 11:25:40,137 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:42,744 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 159
2025-08-01 11:25:42,746 - INFO - Operation logged: create_precondition
2025-08-01 11:25:43,251 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Testing during All-Star period",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Testing during All-Star period"
  }
}
2025-08-01 11:25:43,254 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:45,845 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 156
2025-08-01 11:25:45,847 - INFO - Operation logged: create_precondition
2025-08-01 11:25:46,352 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team qualified for postseason",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team qualified for postseason"
  }
}
2025-08-01 11:25:46,355 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:49,289 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 155
2025-08-01 11:25:49,292 - INFO - Operation logged: create_precondition
2025-08-01 11:25:49,801 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team in World Series",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team in World Series"
  }
}
2025-08-01 11:25:49,803 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:53,194 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 146
2025-08-01 11:25:53,195 - INFO - Operation logged: create_precondition
2025-08-01 11:25:53,700 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Spring Training period active",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Spring Training period active"
  }
}
2025-08-01 11:25:53,710 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:56,154 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 155
2025-08-01 11:25:56,155 - INFO - Operation logged: create_precondition
2025-08-01 11:25:56,660 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team playing in International Series",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team playing in International Series"
  }
}
2025-08-01 11:25:56,662 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:25:59,520 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 162
2025-08-01 11:25:59,523 - INFO - Operation logged: create_precondition
2025-08-01 11:26:00,028 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple jewel events active",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Multiple jewel events active"
  }
}
2025-08-01 11:26:00,031 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:02,765 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 154
2025-08-01 11:26:02,768 - INFO - Operation logged: create_precondition
2025-08-01 11:26:03,273 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team has game in warmup state",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team has game in warmup state"
  }
}
2025-08-01 11:26:03,275 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:06,500 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 155
2025-08-01 11:26:06,506 - INFO - Operation logged: create_precondition
2025-08-01 11:26:07,011 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Game in rain delay",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Game in rain delay"
  }
}
2025-08-01 11:26:07,014 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:09,604 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 144
2025-08-01 11:26:09,614 - INFO - Operation logged: create_precondition
2025-08-01 11:26:10,121 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Suspended game with scheduled resume",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Suspended game with scheduled resume"
  }
}
2025-08-01 11:26:10,123 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:12,638 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 162
2025-08-01 11:26:12,640 - INFO - Operation logged: create_precondition
2025-08-01 11:26:13,146 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Live game with active challenge",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Live game with active challenge"
  }
}
2025-08-01 11:26:13,152 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:15,967 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 157
2025-08-01 11:26:15,970 - INFO - Operation logged: create_precondition
2025-08-01 11:26:16,477 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Recently postponed game",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Recently postponed game"
  }
}
2025-08-01 11:26:16,479 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:19,339 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 149
2025-08-01 11:26:19,341 - INFO - Operation logged: create_precondition
2025-08-01 11:26:19,846 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Forfeit game (rare)",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Forfeit game (rare)"
  }
}
2025-08-01 11:26:19,850 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:22,693 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 145
2025-08-01 11:26:22,695 - INFO - Operation logged: create_precondition
2025-08-01 11:26:23,201 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team playing doubleheader",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Team playing doubleheader"
  }
}
2025-08-01 11:26:23,209 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:25,694 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 151
2025-08-01 11:26:25,696 - INFO - Operation logged: create_precondition
2025-08-01 11:26:26,209 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreatePrecondition($jira: JSON!, $definition: String) {\n        createPrecondition(\n            jira: $jira,\n            definition: $definition\n        ) {\n            precondition {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Game in extra innings",
        "labels": [
          "functional",
          "team-page",
          "automated"
        ]
      }
    },
    "definition": "Game in extra innings"
  }
}
2025-08-01 11:26:26,211 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:26:29,179 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 147
2025-08-01 11:26:29,181 - INFO - Operation logged: create_precondition
2025-08-01 11:29:50,738 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:51,492 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:29:51,493 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:29:51,494 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Selection via Drawer",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
          "expectedResult": ""
        },
        {
          "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:51,499 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:52,203 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:29:52,204 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:29:52,204 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:29:52,711 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Selection with Special Characters",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:52,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:53,384 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:29:53,384 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:29:53,384 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:29:53,888 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "MIG Display During Live Game",
        "labels": [
          "requires_live_game",
          "game_state",
          "team_page",
          "live_state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to team with live game",
          "expectedResult": ""
        },
        {
          "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
          "expectedResult": ""
        },
        {
          "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
          "expectedResult": ""
        },
        {
          "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:53,903 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:54,466 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:29:54,467 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:29:54,467 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:29:54,972 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "MIG Calendar Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "date_bar",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "View MIG section",
          "expectedResult": ""
        },
        {
          "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
          "expectedResult": ""
        },
        {
          "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:54,973 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:55,670 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:29:55,671 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:29:55,672 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:29:56,177 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Home Run Derby Display",
        "labels": [
          "jewel_event",
          "all_star",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to team page during HRD period",
          "expectedResult": ""
        },
        {
          "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:56,182 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:56,838 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:29:56,839 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:29:56,839 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:29:57,350 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Article Carousel Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "content_display",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Scroll to Top Stories section",
          "expectedResult": ""
        },
        {
          "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
          "expectedResult": ""
        },
        {
          "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:57,363 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:58,050 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:29:58,051 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:29:58,051 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:29:58,558 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Video Content Playback",
        "labels": [
          "team_page",
          "android",
          "content_display",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Scroll to video carousel",
          "expectedResult": ""
        },
        {
          "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
          "expectedResult": ""
        },
        {
          "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:58,560 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:29:59,191 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:29:59,192 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:29:59,192 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:29:59,694 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Editorial Module Display",
        "labels": [
          "team_page",
          "android",
          "content_display",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:29:59,700 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:00,348 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:00,348 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:00,348 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:00,859 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Spanish Language Support",
        "labels": [
          "team_page",
          "android",
          "localization",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Open Team Page",
          "expectedResult": ""
        },
        {
          "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
          "expectedResult": ""
        },
        {
          "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
          "expectedResult": ""
        },
        {
          "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:00,861 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:01,394 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:01,398 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:01,399 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:01,914 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Japanese Language Support",
        "labels": [
          "team_page",
          "android",
          "localization",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Open Team Page",
          "expectedResult": ""
        },
        {
          "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
          "expectedResult": ""
        },
        {
          "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:01,916 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:02,903 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:02,903 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:02,903 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:03,418 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Deep Link Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Close app",
          "expectedResult": ""
        },
        {
          "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
          "expectedResult": ""
        },
        {
          "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:03,428 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:03,981 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:03,983 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:03,983 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:04,489 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Schedule Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "product_links",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Scroll to Team Info section",
          "expectedResult": ""
        },
        {
          "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
          "expectedResult": ""
        },
        {
          "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:04,490 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:05,258 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:05,259 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:05,259 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:05,763 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Page Load Performance",
        "labels": [
          "performance",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Force close app",
          "expectedResult": ""
        },
        {
          "action": "Open app and navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:05,766 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:06,468 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:06,468 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:06,468 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:06,977 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Switching Performance",
        "labels": [
          "performance",
          "team_page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
          "expectedResult": ""
        },
        {
          "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:06,980 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:07,515 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:07,517 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:07,518 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:08,029 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Offline Behavior",
        "labels": [
          "team_page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Enable airplane mode",
          "expectedResult": ""
        },
        {
          "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
          "expectedResult": ""
        },
        {
          "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:08,033 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:08,783 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:08,784 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:08,784 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:09,292 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Invalid Team Data",
        "labels": [
          "team_page",
          "android",
          "regression",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:09,295 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:10,031 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:10,031 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:10,031 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:10,541 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Screen Reader Support",
        "labels": [
          "team_page",
          "android",
          "accessibility",
          "critical",
          "ios",
          "functional",
          "talkback",
          "high",
          "voiceover",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Enable screen reader",
          "expectedResult": ""
        },
        {
          "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
          "expectedResult": ""
        },
        {
          "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:10,544 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:11,759 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:11,760 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:11,761 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:12,265 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Dynamic Type Support",
        "labels": [
          "team_page",
          "android",
          "accessibility",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Set device to largest text size",
          "expectedResult": ""
        },
        {
          "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
          "expectedResult": ""
        },
        {
          "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:12,267 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:12,977 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:12,977 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:12,978 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:13,494 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Feature Parity Check",
        "labels": [
          "team_page",
          "android",
          "critical",
          "cross_platform",
          "functional",
          "ios",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Open same team on both platforms",
          "expectedResult": ""
        },
        {
          "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
          "expectedResult": ""
        },
        {
          "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:13,497 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:14,162 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:14,162 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:14,162 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:14,663 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad MIG Layout",
        "labels": [
          "ipad",
          "team_page",
          "matchup_display",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Open Team Page on iPad",
          "expectedResult": ""
        },
        {
          "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
          "expectedResult": ""
        },
        {
          "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:14,665 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:15,395 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:15,395 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:15,395 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:15,899 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Event Tracking",
        "labels": [
          "team_page",
          "analytics",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Open Charles Proxy",
          "expectedResult": ""
        },
        {
          "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
          "expectedResult": ""
        },
        {
          "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:15,900 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:16,636 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:16,636 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:16,636 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:17,143 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Opening Day Content Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "opening_day",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page on Opening Day",
          "expectedResult": ""
        },
        {
          "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
          "expectedResult": ""
        },
        {
          "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
          "expectedResult": ""
        },
        {
          "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:17,146 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:17,844 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:17,845 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:17,845 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:18,345 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "All-Star Game Team Page Updates",
        "labels": [
          "jewel_event",
          "all_star",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to any team page during All-Star break",
          "expectedResult": ""
        },
        {
          "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
          "expectedResult": ""
        },
        {
          "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
          "expectedResult": ""
        },
        {
          "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:18,347 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:18,987 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:18,988 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:18,988 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:19,495 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "postseason",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to playoff team's page",
          "expectedResult": ""
        },
        {
          "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
          "expectedResult": ""
        },
        {
          "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
          "expectedResult": ""
        },
        {
          "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:19,498 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:20,219 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:20,220 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:20,220 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:20,726 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "World Series Team Page",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "world_series",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to World Series team page",
          "expectedResult": ""
        },
        {
          "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
          "expectedResult": ""
        },
        {
          "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
          "expectedResult": ""
        },
        {
          "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:20,727 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:21,475 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:21,475 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:21,475 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:21,981 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Spring Training Team Page",
        "labels": [
          "jewel_event",
          "team_page",
          "spring_training",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page during ST",
          "expectedResult": ""
        },
        {
          "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
          "expectedResult": ""
        },
        {
          "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
          "expectedResult": ""
        },
        {
          "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:21,982 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:22,530 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:22,534 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:22,535 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:23,042 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "International Series Team Display",
        "labels": [
          "jewel_event",
          "international",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to participating team page",
          "expectedResult": ""
        },
        {
          "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
          "expectedResult": ""
        },
        {
          "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
          "expectedResult": ""
        },
        {
          "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:23,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:23,542 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:23,543 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:23,543 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:24,051 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Jewel Events Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "During All-Star week with HRD",
          "expectedResult": ""
        },
        {
          "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
          "expectedResult": ""
        },
        {
          "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
          "expectedResult": ""
        },
        {
          "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:24,056 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:24,579 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:24,580 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:24,580 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:25,085 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Warmup State Display",
        "labels": [
          "game_state",
          "preview_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page during warmup",
          "expectedResult": ""
        },
        {
          "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
          "expectedResult": ""
        },
        {
          "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
          "expectedResult": ""
        },
        {
          "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:25,094 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:25,829 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:25,830 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:25,830 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:26,335 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Rain Delay Handling",
        "labels": [
          "game_state",
          "delayed_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page during delay",
          "expectedResult": ""
        },
        {
          "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
          "expectedResult": ""
        },
        {
          "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
          "expectedResult": ""
        },
        {
          "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:26,337 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:26,906 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:26,907 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:26,907 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:27,413 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Suspended Game With Resume Date",
        "labels": [
          "game_state",
          "team_page",
          "suspended_state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
          "expectedResult": ""
        },
        {
          "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
          "expectedResult": ""
        },
        {
          "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:27,416 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:27,953 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:27,961 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:27,961 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:28,469 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Manager Challenge State",
        "labels": [
          "game_state",
          "team_page",
          "live_state",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate during manager challenge",
          "expectedResult": ""
        },
        {
          "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
          "expectedResult": ""
        },
        {
          "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
          "expectedResult": ""
        },
        {
          "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:28,471 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:29,234 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:29,235 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:29,235 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:29,744 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postponed Game Rescheduling",
        "labels": [
          "game_state",
          "final_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
          "expectedResult": ""
        },
        {
          "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
          "expectedResult": ""
        },
        {
          "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:29,747 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:30,486 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:30,487 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:30,487 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:30,993 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Forfeit Game Display",
        "labels": [
          "game_state",
          "final_state",
          "team_page",
          "android",
          "ios",
          "functional",
          "low",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
          "expectedResult": ""
        },
        {
          "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
          "expectedResult": ""
        },
        {
          "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:30,994 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:31,716 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:31,717 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:31,717 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:32,222 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Game State Transition Timing",
        "labels": [
          "game_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "state_transition",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
          "expectedResult": ""
        },
        {
          "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
          "expectedResult": ""
        },
        {
          "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
          "expectedResult": ""
        },
        {
          "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:32,226 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:32,900 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:32,901 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:32,901 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:33,406 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Double Header Game State Display",
        "labels": [
          "game_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Check both games display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both games clearly separated",
          "expectedResult": ""
        },
        {
          "action": "Verify different states &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game 1/Game 2 indicators",
          "expectedResult": ""
        },
        {
          "action": "Test switching between games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Independent state tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper time display for each",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:33,412 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:34,079 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:34,080 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:34,080 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:34,583 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Extra Innings State Display",
        "labels": [
          "game_state",
          "team_page",
          "live_state",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Navigate to Team Page",
          "expectedResult": ""
        },
        {
          "action": "Check inning display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Extra inning number shown",
          "expectedResult": ""
        },
        {
          "action": "Verify free runner indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Free runner rule applied",
          "expectedResult": ""
        },
        {
          "action": "Monitor score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper score tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No display issues with 10+ innings",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:34,585 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:35,413 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:35,416 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:35,416 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:30:35,926 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: TestTypeInput!, $jira: JSON!, $testSpecification: TestSpecificationInput) {\n        createTest(testType: $testType, jira: $jira, testSpecification: $testSpecification) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Game State Error Recovery",
        "labels": [
          "game_state",
          "team_page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "testSpecification": {
      "steps": [
        {
          "action": "Force app to background during live game",
          "expectedResult": ""
        },
        {
          "action": "Wait 5 minutes",
          "expectedResult": ""
        },
        {
          "action": "Return to Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current game state loads",
          "expectedResult": ""
        },
        {
          "action": "Verify correct state displays &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck on old state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth recovery process",
          "expectedResult": ""
        }
      ]
    }
  }
}
2025-08-01 11:30:35,930 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:30:36,659 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 562
2025-08-01 11:30:36,660 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:30:36,660 - ERROR - Response body: {"errors":[{"message":"Unknown type \"TestSpecificationInput\". Did you mean \"TestWithVersionInput\", \"UpdatePreconditionInput\", \"TestRunDefectOperationsInput\", or \"TestRunEvidenceOperationsInput\"?","locations":[{"line":2,"column":86}]},{"message":"Unknown argument \"testSpecification\" on field \"createTest\" of type \"Mutation\".","locations":[{"line":3,"column":54}]},{"message":"Variable \"$testType\" of type \"TestTypeInput!\" used in position expecting type \"UpdateTestTypeInput\".","locations":[{"line":2,"column":25},{"line":3,"column":30}]}]}
2025-08-01 11:31:03,896 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:31:04,857 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:31:04,859 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:31:04,860 - DEBUG - GraphQL request payload: {
  "query": "\n    query IntrospectCreateTest {\n        __type(name: \"Mutation\") {\n            fields {\n                name\n                args {\n                    name\n                    type {\n                        name\n                        kind\n                        ofType {\n                            name\n                            kind\n                        }\n                    }\n                }\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-08-01 11:31:04,861 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:31:05,421 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 11:31:05,489 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetTestTypes {\n            __type(name: \"UpdateTestTypeInput\") {\n                inputFields {\n                    name\n                    type {\n                        name\n                        kind\n                        ofType {\n                            name\n                            kind\n                        }\n                    }\n                }\n            }\n        }\n        ",
  "variables": {}
}
2025-08-01 11:31:05,501 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:31:06,137 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 177
2025-08-01 11:31:27,153 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:31:27,712 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:31:27,713 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:31:27,714 - DEBUG - GraphQL request payload: {
  "query": "\n    query IntrospectStepInput {\n        __type(name: \"CreateStepInput\") {\n            inputFields {\n                name\n                type {\n                    name\n                    kind\n                    ofType {\n                        name\n                        kind\n                    }\n                }\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-08-01 11:31:27,717 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:31:28,405 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 574
2025-08-01 11:32:00,275 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:00,932 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:32:00,932 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:32:00,933 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Selection via Drawer",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:00,934 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:04,035 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 185
2025-08-01 11:32:04,036 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:04,540 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Selection with Special Characters",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:04,541 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:07,385 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 198
2025-08-01 11:32:07,387 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:07,891 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "MIG Display During Live Game",
        "labels": [
          "requires_live_game",
          "game_state",
          "team_page",
          "live_state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to team with live game",
        "result": "",
        "data": ""
      },
      {
        "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
        "result": "",
        "data": ""
      },
      {
        "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:07,893 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:10,849 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 188
2025-08-01 11:32:10,850 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:11,356 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "MIG Calendar Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "date_bar",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "View MIG section",
        "result": "",
        "data": ""
      },
      {
        "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:11,358 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:14,349 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 11:32:14,352 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:14,859 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Home Run Derby Display",
        "labels": [
          "jewel_event",
          "all_star",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to team page during HRD period",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:14,861 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:17,623 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 11:32:17,627 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:18,132 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Article Carousel Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "content_display",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Scroll to Top Stories section",
        "result": "",
        "data": ""
      },
      {
        "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:18,134 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:22,068 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 11:32:22,070 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:22,581 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Video Content Playback",
        "labels": [
          "team_page",
          "android",
          "content_display",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Scroll to video carousel",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:22,598 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:25,539 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 11:32:25,540 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:26,043 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Editorial Module Display",
        "labels": [
          "team_page",
          "android",
          "content_display",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:26,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:28,739 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 184
2025-08-01 11:32:28,741 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:29,242 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Spanish Language Support",
        "labels": [
          "team_page",
          "android",
          "localization",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
        "result": "",
        "data": ""
      },
      {
        "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:29,243 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:31,931 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 184
2025-08-01 11:32:31,932 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:32,460 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Japanese Language Support",
        "labels": [
          "team_page",
          "android",
          "localization",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
        "result": "",
        "data": ""
      },
      {
        "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:32,508 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:35,264 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 185
2025-08-01 11:32:35,269 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:35,775 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Deep Link Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Close app",
        "result": "",
        "data": ""
      },
      {
        "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:35,783 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:38,624 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:32:38,626 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:39,131 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Schedule Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "product_links",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Scroll to Team Info section",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:39,134 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:41,766 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 179
2025-08-01 11:32:41,767 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:42,270 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Page Load Performance",
        "labels": [
          "performance",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Force close app",
        "result": "",
        "data": ""
      },
      {
        "action": "Open app and navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:42,271 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:45,053 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 181
2025-08-01 11:32:45,057 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:45,566 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Switching Performance",
        "labels": [
          "performance",
          "team_page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:45,568 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:48,084 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 186
2025-08-01 11:32:48,086 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:48,592 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Offline Behavior",
        "labels": [
          "team_page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Enable airplane mode",
        "result": "",
        "data": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
        "result": "",
        "data": ""
      },
      {
        "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:48,594 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:51,342 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 176
2025-08-01 11:32:51,343 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:51,848 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Invalid Team Data",
        "labels": [
          "team_page",
          "android",
          "regression",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:51,849 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:54,534 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 177
2025-08-01 11:32:54,535 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:55,041 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Screen Reader Support",
        "labels": [
          "team_page",
          "android",
          "accessibility",
          "critical",
          "ios",
          "functional",
          "talkback",
          "high",
          "voiceover",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Enable screen reader",
        "result": "",
        "data": ""
      },
      {
        "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
        "result": "",
        "data": ""
      },
      {
        "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:55,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:32:57,970 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 181
2025-08-01 11:32:57,971 - INFO - Operation logged: create_functional_test
2025-08-01 11:32:58,472 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Dynamic Type Support",
        "labels": [
          "team_page",
          "android",
          "accessibility",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Set device to largest text size",
        "result": "",
        "data": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
        "result": "",
        "data": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:32:58,473 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:01,116 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:33:01,118 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:01,619 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Feature Parity Check",
        "labels": [
          "team_page",
          "android",
          "critical",
          "cross_platform",
          "functional",
          "ios",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open same team on both platforms",
        "result": "",
        "data": ""
      },
      {
        "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
        "result": "",
        "data": ""
      },
      {
        "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:01,620 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:04,517 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:33:04,527 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:05,030 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad MIG Layout",
        "labels": [
          "ipad",
          "team_page",
          "matchup_display",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Team Page on iPad",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:05,032 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:08,090 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 175
2025-08-01 11:33:08,099 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:08,602 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Event Tracking",
        "labels": [
          "team_page",
          "analytics",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Charles Proxy",
        "result": "",
        "data": ""
      },
      {
        "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:08,606 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:11,415 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 174
2025-08-01 11:33:11,416 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:11,924 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Opening Day Content Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "opening_day",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page on Opening Day",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:11,936 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:14,972 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 11:33:14,974 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:15,480 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "All-Star Game Team Page Updates",
        "labels": [
          "jewel_event",
          "all_star",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to any team page during All-Star break",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:15,482 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:18,300 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 191
2025-08-01 11:33:18,302 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:18,807 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "postseason",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to playoff team's page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:18,811 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:21,586 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 188
2025-08-01 11:33:21,589 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:22,095 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "World Series Team Page",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "world_series",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to World Series team page",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
        "result": "",
        "data": ""
      },
      {
        "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
        "result": "",
        "data": ""
      },
      {
        "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:22,096 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:24,885 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 11:33:24,888 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:25,392 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Spring Training Team Page",
        "labels": [
          "jewel_event",
          "team_page",
          "spring_training",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page during ST",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
        "result": "",
        "data": ""
      },
      {
        "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:25,393 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:28,140 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 185
2025-08-01 11:33:28,151 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:28,658 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "International Series Team Display",
        "labels": [
          "jewel_event",
          "international",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to participating team page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
        "result": "",
        "data": ""
      },
      {
        "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:28,660 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:31,490 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-08-01 11:33:31,490 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:31,994 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Jewel Events Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "During All-Star week with HRD",
        "result": "",
        "data": ""
      },
      {
        "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
        "result": "",
        "data": ""
      },
      {
        "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:31,995 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:34,485 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 189
2025-08-01 11:33:34,488 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:34,994 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Warmup State Display",
        "labels": [
          "game_state",
          "preview_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page during warmup",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
        "result": "",
        "data": ""
      },
      {
        "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:34,995 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:37,778 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:33:37,779 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:38,285 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Rain Delay Handling",
        "labels": [
          "game_state",
          "delayed_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page during delay",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:38,288 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:41,056 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 179
2025-08-01 11:33:41,057 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:41,563 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Suspended Game With Resume Date",
        "labels": [
          "game_state",
          "team_page",
          "suspended_state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:41,567 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:44,168 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 191
2025-08-01 11:33:44,170 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:44,672 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Manager Challenge State",
        "labels": [
          "game_state",
          "team_page",
          "live_state",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate during manager challenge",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:44,672 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:47,406 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 11:33:47,418 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:47,921 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postponed Game Rescheduling",
        "labels": [
          "game_state",
          "final_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:47,922 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:50,783 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 11:33:50,785 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:51,286 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Forfeit Game Display",
        "labels": [
          "game_state",
          "final_state",
          "team_page",
          "android",
          "ios",
          "functional",
          "low",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:51,286 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:53,873 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:33:53,874 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:54,383 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Game State Transition Timing",
        "labels": [
          "game_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "state_transition",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
        "result": "",
        "data": ""
      },
      {
        "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
        "result": "",
        "data": ""
      },
      {
        "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:54,386 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:33:56,992 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 188
2025-08-01 11:33:56,994 - INFO - Operation logged: create_functional_test
2025-08-01 11:33:57,499 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Double Header Game State Display",
        "labels": [
          "game_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check both games display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both games clearly separated",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify different states &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game 1/Game 2 indicators",
        "result": "",
        "data": ""
      },
      {
        "action": "Test switching between games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Independent state tracking &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper time display for each",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:33:57,501 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:32,555 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:33,166 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:34:33,167 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:34:33,167 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Selection via Drawer",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on the team selector dropdown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team drawer opens smoothly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All 30 MLB teams are displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Select a different team from the list &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected team's page loads with correct content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name updates in the header",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:33,177 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:35,985 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 185
2025-08-01 11:34:35,986 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:36,492 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Selection with Special Characters",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Select Arizona Diamondbacks from team selector &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team name displays correctly without cutoff &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Dropdown arrow remains visible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:36,493 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:39,236 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 198
2025-08-01 11:34:39,241 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:39,746 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "MIG Display During Live Game",
        "labels": [
          "requires_live_game",
          "game_state",
          "team_page",
          "live_state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to team with live game",
        "result": "",
        "data": ""
      },
      {
        "action": "Observe MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Live game card displays current score &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game status shows &quot;LIVE&quot;",
        "result": "",
        "data": ""
      },
      {
        "action": "Check game score updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score updates in real-time",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify broadcast information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Broadcast details are visible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:39,747 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:42,158 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 188
2025-08-01 11:34:42,162 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:42,665 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "MIG Calendar Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "date_bar",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "View MIG section",
        "result": "",
        "data": ""
      },
      {
        "action": "Swipe left/right on calendar bar &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Calendar scrolls smoothly",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on different game dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Selected date highlights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game card updates to show selected game",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:42,667 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:45,396 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 11:34:45,403 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:45,906 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Home Run Derby Display",
        "labels": [
          "jewel_event",
          "all_star",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to team page during HRD period",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD displays with &quot;HRD&quot; text and start time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; HRD logo shows when active &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Where to watch details visible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:45,911 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:48,632 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 11:34:48,635 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:49,139 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Article Carousel Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "content_display",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Scroll to Top Stories section",
        "result": "",
        "data": ""
      },
      {
        "action": "Swipe through articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel scrolls smoothly",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on an article &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Article opens correctly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load properly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:49,142 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:51,771 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 11:34:51,783 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:52,292 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Video Content Playback",
        "labels": [
          "team_page",
          "android",
          "content_display",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Scroll to video carousel",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on a video &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Video player opens",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify playback controls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playback starts (if autoplay enabled) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Controls are accessible",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:52,297 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:55,379 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 11:34:55,381 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:55,886 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Editorial Module Display",
        "labels": [
          "team_page",
          "android",
          "content_display",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check Top Stories section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Editorial feed displays (iOS) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Carousel displays (Android) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content is team-specific",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:55,887 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:34:58,604 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 184
2025-08-01 11:34:58,614 - INFO - Operation logged: create_functional_test
2025-08-01 11:34:59,126 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Spanish Language Support",
        "labels": [
          "team_page",
          "android",
          "localization",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All UI text in Spanish",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap on articles &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Articles load in Spanish",
        "result": "",
        "data": ""
      },
      {
        "action": "Check ticketing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links work correctly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:34:59,127 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:02,221 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 184
2025-08-01 11:35:02,224 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:02,729 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Japanese Language Support",
        "labels": [
          "team_page",
          "android",
          "localization",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify MIG displays Japanese &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Content displays in Japanese",
        "result": "",
        "data": ""
      },
      {
        "action": "Check all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper character rendering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct API calls with lang=ja",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:02,730 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:06,108 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 185
2025-08-01 11:35:06,110 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:06,616 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Deep Link Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Close app",
        "result": "",
        "data": ""
      },
      {
        "action": "Open team page deep link &nbsp;&nbsp;&nbsp;&nbsp;&rarr; App opens to correct team",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify correct team loads &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All sections load properly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:06,629 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:09,375 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:35:09,383 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:09,888 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Schedule Navigation",
        "labels": [
          "team_page",
          "android",
          "navigation",
          "critical",
          "ios",
          "functional",
          "high",
          "product_links",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Scroll to Team Info section",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap &quot;2025 Schedule&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Native schedule view opens",
        "result": "",
        "data": ""
      },
      {
        "action": "Tap &quot;2024 Schedule &amp; Results&quot; &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct year displays",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:09,889 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:12,657 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 179
2025-08-01 11:35:12,660 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:13,166 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Page Load Performance",
        "labels": [
          "performance",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "smoke",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Force close app",
        "result": "",
        "data": ""
      },
      {
        "action": "Open app and navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Measure load time &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads within 3 seconds &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No visible lag or stuttering &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Images load progressively",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:13,175 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:16,661 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 181
2025-08-01 11:35:16,662 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:17,167 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Team Switching Performance",
        "labels": [
          "performance",
          "team_page",
          "android",
          "navigation",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Switch between 5 different teams &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Each switch completes &lt; 2 seconds",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor performance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Previous team data clears &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No memory leaks",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:17,168 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:20,035 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 186
2025-08-01 11:35:20,038 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:20,540 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Offline Behavior",
        "labels": [
          "team_page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Enable airplane mode",
        "result": "",
        "data": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate error messages",
        "result": "",
        "data": ""
      },
      {
        "action": "Try various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Cached content displays if available &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No crashes",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:20,542 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:23,754 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 176
2025-08-01 11:35:23,761 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:24,263 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Invalid Team Data",
        "labels": [
          "team_page",
          "android",
          "regression",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Athletics team page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page loads without errors &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All modules display correctly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:24,265 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:26,991 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 177
2025-08-01 11:35:26,994 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:27,496 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Screen Reader Support",
        "labels": [
          "team_page",
          "android",
          "accessibility",
          "critical",
          "ios",
          "functional",
          "talkback",
          "high",
          "voiceover",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Enable screen reader",
        "result": "",
        "data": ""
      },
      {
        "action": "Navigate through Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All elements properly labeled",
        "result": "",
        "data": ""
      },
      {
        "action": "Test all interactive elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation order logical &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Actions announced correctly",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:27,497 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:30,511 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 181
2025-08-01 11:35:30,561 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:31,065 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Dynamic Type Support",
        "labels": [
          "team_page",
          "android",
          "accessibility",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Set device to largest text size",
        "result": "",
        "data": ""
      },
      {
        "action": "Open Team Page &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Text scales appropriately",
        "result": "",
        "data": ""
      },
      {
        "action": "Check all text elements &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No text truncation &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Layout remains functional",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:31,070 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:33,891 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:35:33,896 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:34,401 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Feature Parity Check",
        "labels": [
          "team_page",
          "android",
          "critical",
          "cross_platform",
          "functional",
          "ios",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open same team on both platforms",
        "result": "",
        "data": ""
      },
      {
        "action": "Compare all sections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Same sections present",
        "result": "",
        "data": ""
      },
      {
        "action": "Test same actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Similar visual appearance &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent behavior",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:34,402 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:37,384 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:35:37,385 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:37,891 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "iPad MIG Layout",
        "labels": [
          "ipad",
          "team_page",
          "matchup_display",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Team Page on iPad",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG carousel &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Consistent card heights",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify card heights &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper spacing &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No layout issues",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:37,893 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:40,668 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 175
2025-08-01 11:35:40,670 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:41,174 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Event Tracking",
        "labels": [
          "team_page",
          "analytics",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Open Charles Proxy",
        "result": "",
        "data": ""
      },
      {
        "action": "Perform various actions &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Page view tracked",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify analytics calls &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Interactions logged &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct parameters sent",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:41,176 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:43,863 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 174
2025-08-01 11:35:43,865 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:44,370 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Opening Day Content Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "opening_day",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page on Opening Day",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG section for special branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Opening Day branding displays in MIG",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify content sections for Opening Day content &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special Opening Day content in carousels",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for special badges or indicators &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate badges/styling applied &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to Opening Day promotions work",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:44,371 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:47,117 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 11:35:47,122 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:47,626 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "All-Star Game Team Page Updates",
        "labels": [
          "jewel_event",
          "all_star",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to any team page during All-Star break",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG section &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All-Star Game promotion visible",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify AL/NL All-Star team selections &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Team's All-Star selections highlighted",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for All-Star voting links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Voting links functional (if active) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special All-Star content in carousels",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:47,630 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:50,520 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 191
2025-08-01 11:35:50,522 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:51,024 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postseason Team Page Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "postseason",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to playoff team's page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG for playoff games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff games prominently displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify playoff series information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status clearly shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for elimination/advancement updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Next game information accurate &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Playoff-specific content in carousels",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:51,026 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:53,782 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 188
2025-08-01 11:35:53,783 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:54,288 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "World Series Team Page",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "world_series",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to World Series team page",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify World Series branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; World Series branding prominent",
        "result": "",
        "data": ""
      },
      {
        "action": "Check game information accuracy &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Series status and game info correct",
        "result": "",
        "data": ""
      },
      {
        "action": "Test ticket/viewing links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special World Series content featured &nbsp;&nbsp;&nbsp;&nbsp;&rarr; All links functional",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:54,289 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:56,617 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 11:35:56,621 - INFO - Operation logged: create_functional_test
2025-08-01 11:35:57,126 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Spring Training Team Page",
        "labels": [
          "jewel_event",
          "team_page",
          "spring_training",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page during ST",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG for ST games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; ST badge displays on games",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify split squad handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Split squad games clearly marked",
        "result": "",
        "data": ""
      },
      {
        "action": "Check venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct ST venue information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Roster updates reflected",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:35:57,127 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:35:59,921 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 185
2025-08-01 11:35:59,924 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:00,427 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "International Series Team Display",
        "labels": [
          "jewel_event",
          "international",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to participating team page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG for international games &nbsp;&nbsp;&nbsp;&nbsp;&rarr; International Series branding visible",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify special event branding &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Correct venue (London/Tokyo/etc)",
        "result": "",
        "data": ""
      },
      {
        "action": "Check timezone handling &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Proper timezone conversion &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Special event content featured",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:00,430 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:03,375 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-08-01 11:36:03,378 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:03,879 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Multiple Jewel Events Display",
        "labels": [
          "jewel_event",
          "team_page",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "During All-Star week with HRD",
        "result": "",
        "data": ""
      },
      {
        "action": "Check Team Page MIG &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Both HRD and ASG display correctly",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify both events shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Clear differentiation between events",
        "result": "",
        "data": ""
      },
      {
        "action": "Test navigation between events &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Navigation works properly &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No UI conflicts or overlaps",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:03,881 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:07,052 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 189
2025-08-01 11:36:07,053 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:07,557 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Warmup State Display",
        "labels": [
          "game_state",
          "preview_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page during warmup",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Warmup&quot; status clearly shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify countdown timer &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Countdown to first pitch displays",
        "result": "",
        "data": ""
      },
      {
        "action": "Check product links &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No score shown yet &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Appropriate product links available",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:07,558 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:10,669 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:36:10,671 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:11,174 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Rain Delay Handling",
        "labels": [
          "game_state",
          "delayed_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page during delay",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG status display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Delayed&quot; status prominent",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify delay reason shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Delay reason displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor for updates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Current score preserved &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates when game resumes",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:11,176 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:13,982 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 179
2025-08-01 11:36:14,049 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:14,555 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Suspended Game With Resume Date",
        "labels": [
          "game_state",
          "team_page",
          "suspended_state",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check suspended game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Suspended&quot; status clear",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify resume information &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Resume date/time displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Check both original and resume dates &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Score at suspension shown &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Links to both game dates work",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:14,559 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:17,934 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 191
2025-08-01 11:36:17,937 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:18,442 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Manager Challenge State",
        "labels": [
          "game_state",
          "team_page",
          "live_state",
          "android",
          "medium",
          "ios",
          "functional",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate during manager challenge",
        "result": "",
        "data": ""
      },
      {
        "action": "Check MIG display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Challenge indicator visible",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify challenge indicator &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Game paused status shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor resolution &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Updates after decision &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Seamless return to play",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:18,444 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:21,160 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 11:36:21,162 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:21,668 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Postponed Game Rescheduling",
        "labels": [
          "game_state",
          "final_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check postponed game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Postponed&quot; clearly shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify postponement reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Reason displayed (Rain, etc.)",
        "result": "",
        "data": ""
      },
      {
        "action": "Check for makeup date &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Makeup date if scheduled &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Ticket exchange info if available",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:21,672 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:24,305 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 11:36:24,308 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:24,813 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Forfeit Game Display",
        "labels": [
          "game_state",
          "final_state",
          "team_page",
          "android",
          "ios",
          "functional",
          "low",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "",
        "data": ""
      },
      {
        "action": "Check forfeit game display &nbsp;&nbsp;&nbsp;&nbsp;&rarr; &quot;Forfeit&quot; status displayed",
        "result": "",
        "data": ""
      },
      {
        "action": "Verify official score (9-0) &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Official 9-0 score shown",
        "result": "",
        "data": ""
      },
      {
        "action": "Check forfeit reason &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Forfeit reason provided &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Historical context available",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:24,815 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:36:30,550 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 11:36:30,553 - INFO - Operation logged: create_functional_test
2025-08-01 11:36:31,055 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput], $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, steps: $steps, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Game State Transition Timing",
        "labels": [
          "game_state",
          "team_page",
          "android",
          "critical",
          "ios",
          "functional",
          "high",
          "state_transition",
          "manual"
        ]
      }
    },
    "steps": [
      {
        "action": "Monitor preview game approaching start &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Smooth state transitions",
        "result": "",
        "data": ""
      },
      {
        "action": "Observe transition to warmup &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No stuck states",
        "result": "",
        "data": ""
      },
      {
        "action": "Watch warmup to live transition &nbsp;&nbsp;&nbsp;&nbsp;&rarr; Timely updates (&lt; 30s)",
        "result": "",
        "data": ""
      },
      {
        "action": "Monitor final out to final state &nbsp;&nbsp;&nbsp;&nbsp;&rarr; No data inconsistencies",
        "result": "",
        "data": ""
      }
    ],
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:36:31,056 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:37:03,826 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:37:05,074 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:37:05,074 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:37:05,075 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetRecentTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\", \"labels\", \"created\"])\n                testType {\n                    name\n                }\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED AND created >= '2025-08-01' AND labels = functional ORDER BY created DESC",
    "limit": 50
  }
}
2025-08-01 11:37:05,076 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:37:06,677 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 11:38:05,070 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:06,052 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:38:06,053 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:38:06,054 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetFunctionalTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n                folder {\n                    path\n                }\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED AND created >= '2025-08-01' AND labels = functional",
    "limit": 100
  }
}
2025-08-01 11:38:06,055 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:07,127 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 11:38:07,130 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162689",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:07,131 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:07,710 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:07,711 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:07,711 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:07,712 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162688",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:07,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:09,319 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:09,320 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:09,320 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:09,320 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162687",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:09,322 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:09,839 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:09,841 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:09,841 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:09,842 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162686",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:09,843 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:10,572 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:10,573 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:10,573 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:10,573 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162685",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:10,575 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:11,260 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:11,261 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:11,261 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:11,262 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162684",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:11,264 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:11,912 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:11,913 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:11,913 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:11,913 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162683",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:11,915 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:12,619 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:12,620 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:12,620 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:12,620 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162682",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:12,621 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:13,343 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:13,344 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:13,344 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:13,346 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162681",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:13,347 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:14,047 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:14,048 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:14,048 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:14,048 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162680",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:14,049 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:14,762 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:14,763 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:14,763 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:14,764 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162679",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:14,768 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:15,501 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:15,501 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:15,501 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:15,503 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162678",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:15,505 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:16,146 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:16,147 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:16,147 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:16,157 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162677",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:16,158 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:16,847 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:16,848 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:16,849 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:16,850 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162676",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:16,852 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:17,602 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:17,604 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:17,604 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:17,605 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162675",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:17,607 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:18,345 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:18,345 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:18,346 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:18,347 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162674",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:18,349 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:19,224 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:19,228 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:19,228 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:19,231 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162673",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:19,232 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:20,066 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:20,070 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:20,071 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:20,072 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162671",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:20,074 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:20,815 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:20,815 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:20,815 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:20,817 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162670",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:20,818 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:21,435 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:21,436 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:21,436 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:21,438 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162669",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:21,439 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:22,161 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:22,162 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:22,162 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:22,163 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162666",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:22,165 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:22,843 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:22,844 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:22,844 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:22,845 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162665",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:22,846 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:23,517 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:23,518 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:23,518 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:23,519 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162664",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:23,520 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:24,207 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:24,210 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:24,211 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:24,211 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162663",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:24,213 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:24,975 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:24,976 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:24,976 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:24,977 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162662",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:24,979 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:25,502 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:25,504 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:25,504 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:25,511 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162661",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:25,512 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:26,275 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:26,277 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:26,277 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:26,278 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162660",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:26,279 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:27,083 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:27,084 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:27,084 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:27,086 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162659",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:27,087 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:27,844 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:27,845 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:27,845 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:27,846 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162658",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:27,848 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:28,529 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:28,530 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:28,530 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:28,530 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162657",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:28,533 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:29,229 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:29,230 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:29,230 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:29,230 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162656",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:29,232 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:29,973 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:29,974 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:29,974 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:29,977 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162655",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:29,980 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:30,750 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:30,750 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:30,750 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:30,751 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162654",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:30,752 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:31,415 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:31,416 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:31,417 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:31,419 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162653",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:31,421 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:32,206 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:32,207 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:32,207 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:32,207 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162652",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:32,208 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:32,869 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:32,872 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:32,873 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:32,873 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162651",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:32,874 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:33,513 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:33,514 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:33,514 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:33,515 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162650",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:33,516 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:34,177 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:34,178 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:34,179 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:34,181 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162649",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:34,182 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:34,797 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:34,798 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:34,798 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:34,802 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162648",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:34,803 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:35,546 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:35,547 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:35,548 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:35,548 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162647",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:35,550 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:36,171 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:36,172 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:36,172 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:36,172 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162646",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:36,176 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:36,844 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:36,844 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:36,845 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:36,845 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162645",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:36,847 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:37,778 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:37,779 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:37,779 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:37,780 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162644",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:37,782 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:38,406 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:38,407 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:38,407 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:38,408 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162643",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:38,411 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:39,005 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:39,007 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:39,007 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:39,008 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162642",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:39,009 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:39,722 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:39,723 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:39,723 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:39,723 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162641",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:39,724 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:40,355 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:40,356 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:40,356 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:40,357 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162640",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:40,357 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:41,121 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:41,122 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:41,122 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:41,123 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162639",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:41,130 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:41,838 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:41,844 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:41,845 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:41,845 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162638",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:41,846 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:42,472 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:42,472 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:42,473 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:42,474 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162637",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:42,478 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:43,178 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:43,180 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:43,184 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:43,185 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162636",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:43,187 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:44,203 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:44,204 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:44,204 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:44,204 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162635",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:44,205 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:44,898 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:44,900 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:44,900 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:44,900 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162634",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:44,902 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:45,562 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:45,563 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:45,563 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:45,564 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162633",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:45,566 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:46,076 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:46,077 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:46,077 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:46,077 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162632",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:46,080 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:46,728 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:46,730 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:46,730 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:46,731 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162631",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:46,732 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:47,615 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:47,616 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:47,616 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:47,617 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162630",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:47,618 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:48,312 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:48,313 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:48,313 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:48,314 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162629",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:48,316 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:48,776 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 156
2025-08-01 11:38:48,777 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:48,777 - ERROR - Response body: {"errors":[{"message":"Field \"updateTestFolder\" must not have a selection since type \"String\" has no subfields.","locations":[{"line":3,"column":70}]}]}
2025-08-01 11:38:48,777 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162628",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:48,779 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:49,337 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:49,338 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:49,338 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:49,339 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162627",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:49,341 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:49,766 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:49,767 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:49,767 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:49,767 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162626",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:49,768 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:50,373 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:50,374 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:50,374 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:50,374 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162625",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:50,375 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:50,941 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:50,948 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:50,948 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:50,950 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162624",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:50,952 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:51,564 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:51,567 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:51,567 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:51,568 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162623",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:51,568 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:52,177 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:52,178 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:52,178 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:52,179 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162622",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:52,182 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:52,599 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:52,600 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:52,600 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:52,601 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162621",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:52,602 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:53,236 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:53,237 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:53,237 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:53,237 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162620",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:53,238 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:53,758 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:53,758 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:53,758 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:53,758 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162619",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:53,759 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:54,359 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:54,360 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:54,360 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.135Z"}}
2025-08-01 11:38:54,360 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162618",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:54,362 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:55,061 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:55,062 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:55,062 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:55,063 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162617",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:55,064 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:55,662 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:55,663 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:55,663 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:38:55,664 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath) {\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162616",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:38:55,666 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:38:56,244 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:38:56,245 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:38:56,245 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:39:06.134Z"}}
2025-08-01 11:40:13,400 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:14,095 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:40:14,096 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:40:14,097 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetFunctionalTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n                folder {\n                    path\n                }\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED AND created >= '2025-08-01' AND labels = functional",
    "limit": 100
  }
}
2025-08-01 11:40:14,098 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:15,510 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 11:40:15,514 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162689",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:15,522 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:16,537 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:16,538 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:16,540 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162688",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:16,543 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:17,478 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:17,483 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:17,483 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162687",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:17,486 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:18,599 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:18,600 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:18,604 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162686",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:18,616 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:19,602 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:19,603 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:19,604 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162685",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:19,610 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:20,584 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:20,584 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:20,585 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162684",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:20,587 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:21,530 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:21,531 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:21,531 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162683",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:21,533 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:22,442 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:22,442 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:22,443 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162682",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:22,445 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:23,458 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:23,459 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:23,460 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162681",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:23,468 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:24,515 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:24,517 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:24,519 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162680",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:24,522 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:25,654 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:25,655 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:25,655 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162679",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:25,658 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:26,654 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:26,655 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:26,656 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162678",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:26,656 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:27,587 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:27,588 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:27,588 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162677",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:27,589 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:28,456 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:28,457 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:28,458 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162676",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:28,460 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:29,314 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:29,315 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:29,316 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162675",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:29,319 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:30,015 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:30,016 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:30,016 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162674",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:30,017 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:30,881 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:30,882 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:30,887 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162673",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:30,894 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:31,778 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:31,784 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:31,785 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162671",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:31,787 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:32,674 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:32,674 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:32,675 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162670",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:32,677 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:33,619 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:33,620 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:33,620 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162669",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:33,621 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:34,518 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:34,519 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:34,520 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162666",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:34,523 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:35,319 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:35,320 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:35,321 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162665",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:35,325 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:36,202 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:36,203 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:36,203 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162664",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:36,204 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:36,999 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:36,999 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:36,999 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162663",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:37,000 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:38,178 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:38,182 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:38,190 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162662",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:38,193 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:38,894 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:38,900 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:38,901 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162661",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:38,902 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:39,814 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:39,815 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:39,816 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162660",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:39,817 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:40,569 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:40,571 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:40,572 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162659",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:40,576 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:41,434 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:41,440 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:41,443 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162658",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:41,447 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:42,225 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:42,228 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:42,237 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162657",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:42,239 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:43,374 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:43,375 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:43,377 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162656",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:43,388 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:44,088 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:44,088 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:44,089 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162655",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:44,089 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:45,016 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:45,019 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:45,022 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162654",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:45,029 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:45,935 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:45,935 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:45,937 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162653",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:45,940 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:46,757 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:46,758 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:46,760 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162652",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:46,772 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:47,628 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:47,629 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:47,629 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162651",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:47,630 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:48,318 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:48,319 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:48,320 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162650",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:48,323 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:49,423 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:49,423 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:49,426 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162649",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:49,427 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:50,297 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:50,298 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:50,299 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162648",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:50,300 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:51,194 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:51,196 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:51,201 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162647",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:51,204 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:52,090 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:52,093 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:52,094 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162646",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:52,097 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:53,004 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:53,005 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:53,005 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162645",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:53,006 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:53,915 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:53,919 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:53,921 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162644",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:53,922 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:54,578 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:54,579 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:54,581 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162643",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:54,583 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:55,458 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:55,459 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:55,460 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162642",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:55,461 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:56,335 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:56,336 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:56,339 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162641",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:56,345 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:57,232 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:57,232 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:57,233 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162640",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:57,236 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:58,086 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:58,088 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:58,089 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162639",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:58,093 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:40:59,191 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:40:59,193 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:40:59,194 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162638",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:40:59,200 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:00,144 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:00,152 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:00,155 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162637",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:00,162 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:01,051 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:01,051 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:01,053 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162636",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:01,054 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:01,762 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:01,763 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:01,763 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162635",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:01,766 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:02,808 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:02,809 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:02,809 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162634",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:02,810 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:03,684 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:03,684 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:03,685 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162633",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:03,686 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:04,617 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:04,618 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:04,619 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162632",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:04,621 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:05,336 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:05,337 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:05,337 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162631",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:05,339 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:06,212 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:06,212 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:06,212 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162630",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:06,215 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:06,856 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:06,858 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:06,860 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162629",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:06,861 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:07,646 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:07,646 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:07,647 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162628",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:07,648 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:08,151 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:08,152 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:08,152 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:08,152 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162627",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:08,154 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:08,758 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:08,759 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:08,759 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:08,760 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162626",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:08,762 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:09,187 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:09,187 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:09,187 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:09,188 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162625",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:09,190 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:09,713 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:09,716 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:09,717 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.174Z"}}
2025-08-01 11:41:09,717 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162624",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:09,718 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:10,134 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:10,134 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:10,134 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:10,134 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162623",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:10,135 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:10,702 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:10,703 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:10,703 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:10,704 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162622",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:10,706 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:11,275 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:11,275 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:11,276 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:11,276 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162621",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:11,278 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:11,671 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:11,671 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:11,671 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:11,672 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162620",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:11,673 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:12,293 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:12,294 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:12,294 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:12,295 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162619",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:12,296 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:12,675 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:12,676 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:12,676 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:12,676 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162618",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:12,678 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:13,480 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:13,481 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:13,481 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:13,482 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162617",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:13,483 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:14,021 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 429 108
2025-08-01 11:41:14,022 - ERROR - GraphQL request failed: 429 Client Error: Too Many Requests for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:14,022 - ERROR - Response body: {"error":{"text":"Too many requests in this time frame.","nextValidRequestDate":"2025-08-01T17:41:14.173Z"}}
2025-08-01 11:41:14,024 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTestFolder($issueId: String!, $folderPath: String!) {\n        updateTestFolder(issueId: $issueId, folderPath: $folderPath)\n    }\n    ",
  "variables": {
    "issueId": "1162616",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:41:14,026 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:15,673 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 11:41:15,674 - ERROR - GraphQL errors: [{'message': "Could not find Test Repository folder '/FRAMED'.", 'locations': [{'line': 3, 'column': 9}], 'path': ['updateTestFolder']}]
2025-08-01 11:41:44,232 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:45,120 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:41:45,120 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:41:45,122 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestRepositoryFolders {\n        getTestRepositoryFolders {\n            folders {\n                path\n                name\n                testsCount\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-08-01 11:41:45,126 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:41:45,829 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 129
2025-08-01 11:41:45,830 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:41:45,830 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"getTestRepositoryFolders\" on type \"Query\".","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:42:22,940 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:42:23,415 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:42:23,417 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:42:23,419 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateFolder($projectId: String!, $folderPath: String!) {\n        createTestRepositoryFolder(projectId: $projectId, folderPath: $folderPath) {\n            folder {\n                path\n                name\n            }\n            warning\n        }\n    }\n    ",
  "variables": {
    "projectId": "FRAMED",
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:42:23,421 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:42:23,996 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 276
2025-08-01 11:42:23,997 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:42:23,997 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestRepositoryFolder\" on type \"Mutation\". Did you mean \"addTestsToFolder\", \"removeTestsFromFolder\", \"updateTestFolder\", \"updatePreconditionFolder\", or \"createTestExecution\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 11:42:23,998 - DEBUG - GraphQL request payload: {
  "query": "\n        mutation CreateFolder($folderName: String!, $projectKey: String!) {\n            createTestRepositoryFolder(name: $folderName, projectKey: $projectKey) {\n                path\n                name\n            }\n        }\n        ",
  "variables": {
    "folderName": "FRAMED",
    "projectKey": "FRAMED"
  }
}
2025-08-01 11:42:24,000 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:42:24,719 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 277
2025-08-01 11:42:24,719 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 11:42:24,720 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"createTestRepositoryFolder\" on type \"Mutation\". Did you mean \"addTestsToFolder\", \"removeTestsFromFolder\", \"updateTestFolder\", \"updatePreconditionFolder\", or \"createTestExecution\"?","locations":[{"line":3,"column":13}]}]}
2025-08-01 11:42:55,594 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 11:42:56,199 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 11:42:56,200 - INFO - Successfully obtained Xray authentication token
2025-08-01 11:42:56,203 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $folderPath: String) {\n        createTest(testType: $testType, jira: $jira, folderPath: $folderPath) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n                folder {\n                    path\n                    name\n                }\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Folder Creation Test - DELETE ME",
        "labels": [
          "test_folder_creation",
          "delete_me"
        ]
      }
    },
    "folderPath": "/FRAMED"
  }
}
2025-08-01 11:42:56,205 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:09:53,120 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:09:54,027 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 14:09:54,028 - INFO - Successfully obtained Xray authentication token
2025-08-01 14:09:54,030 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetFunctionalTests($jql: String!, $limit: Int!) {\n        getTests(jql: $jql, limit: $limit) {\n            total\n            results {\n                issueId\n                jira(fields: [\"key\", \"summary\", \"labels\", \"priority\"])\n                testType {\n                    name\n                }\n                steps {\n                    action\n                    result\n                    data\n                }\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED AND labels = functional ORDER BY key ASC",
    "limit": 100
  }
}
2025-08-01 14:09:54,034 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:09:55,176 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:11:36,426 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:11:37,279 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 14:11:37,281 - INFO - Successfully obtained Xray authentication token
2025-08-01 14:11:37,282 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput]) {\n        createTest(testType: $testType, jira: $jira, steps: $steps) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Extra Innings State Display",
        "labels": [
          "game_state",
          "team_page",
          "live_state",
          "android",
          "medium",
          "ios",
          "functional_test",
          "manual"
        ],
        "priority": {
          "name": "Medium"
        }
      }
    },
    "steps": [
      {
        "action": "Navigate to Team Page",
        "result": "Navigation completes successfully",
        "data": ""
      },
      {
        "action": "Check inning display",
        "result": "Extra inning number shown",
        "data": ""
      },
      {
        "action": "Verify free runner indicators",
        "result": "Free runner rule applied",
        "data": ""
      },
      {
        "action": "Monitor score updates",
        "result": "Proper score tracking \u2192 No display issues with 10+ innings",
        "data": ""
      }
    ]
  }
}
2025-08-01 14:11:37,284 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:11:40,185 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 137
2025-08-01 14:11:40,187 - INFO - Operation logged: create_missing_functional_test
2025-08-01 14:11:40,188 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation CreateTest($testType: UpdateTestTypeInput!, $jira: JSON!, $steps: [CreateStepInput]) {\n        createTest(testType: $testType, jira: $jira, steps: $steps) {\n            test {\n                issueId\n                jira(fields: [\"key\", \"summary\"])\n            }\n            warnings\n        }\n    }\n    ",
  "variables": {
    "testType": {
      "name": "Manual"
    },
    "jira": {
      "fields": {
        "project": {
          "key": "FRAMED"
        },
        "summary": "Game State Error Recovery",
        "labels": [
          "game_state",
          "team_page",
          "android",
          "regression",
          "critical",
          "ios",
          "functional_test",
          "high",
          "manual"
        ],
        "priority": {
          "name": "Critical"
        }
      }
    },
    "steps": [
      {
        "action": "Force app to background during live game",
        "result": "Expected behavior occurs",
        "data": ""
      },
      {
        "action": "Wait 5 minutes",
        "result": "System responds within expected time",
        "data": ""
      },
      {
        "action": "Return to Team Page",
        "result": "Current game state loads",
        "data": ""
      },
      {
        "action": "Verify correct state displays",
        "result": "No stuck on old state \u2192 Score updates properly \u2192 Smooth recovery process",
        "data": ""
      }
    ]
  }
}
2025-08-01 14:11:40,188 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:11:43,571 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 135
2025-08-01 14:11:43,577 - INFO - Operation logged: create_missing_functional_test
2025-08-01 14:13:37,848 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:38,613 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 14:13:38,613 - INFO - Successfully obtained Xray authentication token
2025-08-01 14:13:38,614 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1632"
  }
}
2025-08-01 14:13:38,615 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:39,813 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 186
2025-08-01 14:13:39,815 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1633"
  }
}
2025-08-01 14:13:39,816 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:41,031 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 169
2025-08-01 14:13:41,033 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1634"
  }
}
2025-08-01 14:13:41,034 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:42,372 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 212
2025-08-01 14:13:42,373 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1635"
  }
}
2025-08-01 14:13:42,375 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:43,599 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 189
2025-08-01 14:13:43,599 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1636"
  }
}
2025-08-01 14:13:43,600 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:44,887 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 181
2025-08-01 14:13:44,889 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1637"
  }
}
2025-08-01 14:13:44,891 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:45,931 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-08-01 14:13:45,932 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1638"
  }
}
2025-08-01 14:13:45,933 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:47,134 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 14:13:47,134 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1639"
  }
}
2025-08-01 14:13:47,135 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:48,397 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 174
2025-08-01 14:13:48,398 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1640"
  }
}
2025-08-01 14:13:48,399 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:50,049 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 14:13:50,051 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1641"
  }
}
2025-08-01 14:13:50,053 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:51,024 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 171
2025-08-01 14:13:51,026 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1642"
  }
}
2025-08-01 14:13:51,029 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:52,095 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 178
2025-08-01 14:13:52,096 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1643"
  }
}
2025-08-01 14:13:52,098 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:53,537 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:13:53,538 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1644"
  }
}
2025-08-01 14:13:53,540 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:54,655 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 14:13:54,657 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1645"
  }
}
2025-08-01 14:13:54,659 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:55,859 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 14:13:55,862 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1646"
  }
}
2025-08-01 14:13:55,863 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:56,868 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 178
2025-08-01 14:13:56,872 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1647"
  }
}
2025-08-01 14:13:56,875 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:58,187 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 169
2025-08-01 14:13:58,189 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1648"
  }
}
2025-08-01 14:13:58,192 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:13:59,384 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 204
2025-08-01 14:13:59,387 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1649"
  }
}
2025-08-01 14:13:59,388 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:00,530 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 14:14:00,532 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1650"
  }
}
2025-08-01 14:14:00,534 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:01,678 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 14:14:01,680 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1651"
  }
}
2025-08-01 14:14:01,682 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:02,696 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 190
2025-08-01 14:14:02,697 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1652"
  }
}
2025-08-01 14:14:02,699 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:03,934 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 168
2025-08-01 14:14:03,935 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1653"
  }
}
2025-08-01 14:14:03,936 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:05,208 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-08-01 14:14:05,209 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1654"
  }
}
2025-08-01 14:14:05,210 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:06,383 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 190
2025-08-01 14:14:06,384 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1655"
  }
}
2025-08-01 14:14:06,385 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:07,616 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 192
2025-08-01 14:14:07,617 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1656"
  }
}
2025-08-01 14:14:07,618 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:08,813 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:14:08,814 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1657"
  }
}
2025-08-01 14:14:08,816 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:09,909 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 188
2025-08-01 14:14:09,913 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1658"
  }
}
2025-08-01 14:14:09,915 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:10,989 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 186
2025-08-01 14:14:10,991 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1659"
  }
}
2025-08-01 14:14:10,993 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:12,318 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 170
2025-08-01 14:14:12,322 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1660"
  }
}
2025-08-01 14:14:12,324 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:13,697 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:14:13,698 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1661"
  }
}
2025-08-01 14:14:13,699 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:14,748 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:14:14,749 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1662"
  }
}
2025-08-01 14:14:14,750 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:15,992 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-08-01 14:14:15,993 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1663"
  }
}
2025-08-01 14:14:15,996 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:17,170 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 14:14:17,171 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1664"
  }
}
2025-08-01 14:14:17,174 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:18,210 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 192
2025-08-01 14:14:18,213 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1665"
  }
}
2025-08-01 14:14:18,216 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:19,428 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 14:14:19,429 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1666"
  }
}
2025-08-01 14:14:19,430 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:20,521 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 197
2025-08-01 14:14:20,523 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1631"
  }
}
2025-08-01 14:14:20,526 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:21,586 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 178
2025-08-01 14:14:21,588 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1668"
  }
}
2025-08-01 14:14:21,590 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:22,759 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 14:14:22,763 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1669"
  }
}
2025-08-01 14:14:22,765 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:23,848 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-08-01 14:14:23,849 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162652",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "smoke",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:23,850 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:24,548 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:24,548 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:24,549 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:25,054 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162653",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:25,055 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:25,757 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:25,759 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:25,760 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:26,266 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162654",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "live_state",
          "manual",
          "requires_live_game",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:26,268 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:27,920 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:27,921 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:27,921 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:28,428 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162655",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "date_bar",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:28,430 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:28,948 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:28,949 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:28,949 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:29,455 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162656",
    "fields": {
      "fields": {
        "labels": [
          "all_star",
          "android",
          "functional_test",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:29,457 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:30,189 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:30,190 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:30,190 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:30,698 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162657",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "content_display",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:30,701 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:31,358 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:31,358 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:31,358 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:31,863 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162658",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "content_display",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:31,865 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:32,516 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:32,517 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:32,517 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:33,024 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162659",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "content_display",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:33,028 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:33,550 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:33,551 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:33,551 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:34,054 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162660",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "localization",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:34,057 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:35,466 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:35,466 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:35,467 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:35,968 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162661",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "localization",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:35,971 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:36,583 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:36,584 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:36,584 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:37,087 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162662",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:37,090 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:37,777 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:37,778 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:37,778 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:38,282 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162663",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "product_links",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:38,286 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:38,800 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:38,801 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:38,801 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:39,315 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162664",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "performance",
          "smoke",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:39,317 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:39,949 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:39,950 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:39,951 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:40,458 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162665",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "navigation",
          "performance",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:40,459 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:40,934 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:40,934 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:40,934 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:41,438 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162666",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "regression",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:41,441 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:41,975 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:41,976 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:41,976 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:42,482 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162669",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "regression",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:42,484 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:43,153 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:43,154 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:43,154 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:43,660 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162670",
    "fields": {
      "fields": {
        "labels": [
          "accessibility",
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "talkback",
          "team_page",
          "voiceover"
        ]
      }
    }
  }
}
2025-08-01 14:14:43,665 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:44,382 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:44,382 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:44,382 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:44,887 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162671",
    "fields": {
      "fields": {
        "labels": [
          "accessibility",
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:44,891 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:45,634 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:45,635 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:45,636 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:46,143 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162673",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "cross_platform",
          "functional_test",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:46,148 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:46,823 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:46,824 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:46,824 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:47,331 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162674",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "ipad",
          "manual",
          "matchup_display",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:47,333 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:48,031 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:48,036 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:48,039 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:48,545 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162675",
    "fields": {
      "fields": {
        "labels": [
          "analytics",
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:48,549 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:49,243 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:49,243 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:49,244 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:49,745 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162676",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "opening_day",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:49,747 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:50,609 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:50,610 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:50,611 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:51,114 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162677",
    "fields": {
      "fields": {
        "labels": [
          "all_star",
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:51,116 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:51,606 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:51,607 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:51,609 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:52,117 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162678",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "postseason",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:52,121 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:52,672 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:52,674 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:52,674 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:53,181 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162679",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "team_page",
          "world_series"
        ]
      }
    }
  }
}
2025-08-01 14:14:53,185 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:53,869 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:53,870 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:53,870 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:54,376 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162680",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "spring_training",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:54,379 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:55,053 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:55,054 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:55,054 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:55,560 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162681",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "international",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:55,564 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:56,258 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:56,259 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:56,259 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:56,765 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162682",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:56,768 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:57,602 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:57,603 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:57,603 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:58,107 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162683",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "preview_state",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:58,111 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:14:58,882 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:14:58,883 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:14:58,883 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:14:59,386 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162684",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "delayed_state",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:14:59,389 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:00,203 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:15:00,204 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:15:00,204 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:15:00,707 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162685",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "suspended_state",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:15:00,709 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:01,210 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:15:01,211 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:15:01,211 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:15:01,716 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162686",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "game_state",
          "ios",
          "live_state",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:15:01,719 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:02,620 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:15:02,621 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:15:02,621 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:15:03,126 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162687",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "final_state",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:15:03,128 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:03,726 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:15:03,731 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:15:03,732 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:15:04,239 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162688",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "final_state",
          "functional_test",
          "game_state",
          "ios",
          "low",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:15:04,242 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:04,918 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:15:04,919 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:15:04,919 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:15:05,425 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162689",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "state_transition",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:15:05,429 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:06,126 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:15:06,127 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:15:06,127 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:15:06,634 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162651",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:15:06,636 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:07,136 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:15:07,136 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:15:07,137 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:15:15,473 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:16,011 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 14:15:16,013 - INFO - Successfully obtained Xray authentication token
2025-08-01 14:15:16,017 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1632"
  }
}
2025-08-01 14:15:16,020 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:17,400 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 186
2025-08-01 14:15:17,401 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1633"
  }
}
2025-08-01 14:15:17,402 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:18,599 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 169
2025-08-01 14:15:18,601 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1634"
  }
}
2025-08-01 14:15:18,604 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:19,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 212
2025-08-01 14:15:19,879 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1635"
  }
}
2025-08-01 14:15:19,884 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:21,041 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 189
2025-08-01 14:15:21,043 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1636"
  }
}
2025-08-01 14:15:21,046 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:22,446 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 181
2025-08-01 14:15:22,449 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1637"
  }
}
2025-08-01 14:15:22,453 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:23,791 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-08-01 14:15:23,793 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1638"
  }
}
2025-08-01 14:15:23,795 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:25,036 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 14:15:25,038 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1639"
  }
}
2025-08-01 14:15:25,040 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:26,307 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 174
2025-08-01 14:15:26,309 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1640"
  }
}
2025-08-01 14:15:26,312 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:27,552 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 14:15:27,554 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1641"
  }
}
2025-08-01 14:15:27,557 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:28,595 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 171
2025-08-01 14:15:28,596 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1642"
  }
}
2025-08-01 14:15:28,599 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:29,868 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 178
2025-08-01 14:15:29,870 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1643"
  }
}
2025-08-01 14:15:29,874 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:31,079 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:15:31,088 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1644"
  }
}
2025-08-01 14:15:31,090 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:32,189 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 14:15:32,191 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1645"
  }
}
2025-08-01 14:15:32,194 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:33,289 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 183
2025-08-01 14:15:33,291 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1646"
  }
}
2025-08-01 14:15:33,294 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:34,408 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 178
2025-08-01 14:15:34,412 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1647"
  }
}
2025-08-01 14:15:34,419 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:35,628 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 169
2025-08-01 14:15:35,629 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1648"
  }
}
2025-08-01 14:15:35,639 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:36,980 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 204
2025-08-01 14:15:36,987 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1649"
  }
}
2025-08-01 14:15:36,989 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:38,327 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 172
2025-08-01 14:15:38,327 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1650"
  }
}
2025-08-01 14:15:38,328 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:39,644 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 14:15:39,646 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1651"
  }
}
2025-08-01 14:15:39,651 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:40,940 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 190
2025-08-01 14:15:40,942 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1652"
  }
}
2025-08-01 14:15:40,945 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:42,271 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 168
2025-08-01 14:15:42,275 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1653"
  }
}
2025-08-01 14:15:42,278 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:43,539 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 193
2025-08-01 14:15:43,540 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1654"
  }
}
2025-08-01 14:15:43,542 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:44,926 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 190
2025-08-01 14:15:44,927 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1655"
  }
}
2025-08-01 14:15:44,935 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:46,248 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 192
2025-08-01 14:15:46,250 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1656"
  }
}
2025-08-01 14:15:46,252 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:47,436 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:15:47,438 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1657"
  }
}
2025-08-01 14:15:47,440 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:48,744 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 188
2025-08-01 14:15:48,746 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1658"
  }
}
2025-08-01 14:15:48,749 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:49,943 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 186
2025-08-01 14:15:49,945 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1659"
  }
}
2025-08-01 14:15:49,948 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:52,008 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 170
2025-08-01 14:15:52,011 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1660"
  }
}
2025-08-01 14:15:52,015 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:53,111 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:15:53,114 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1661"
  }
}
2025-08-01 14:15:53,116 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:54,505 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 194
2025-08-01 14:15:54,507 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1662"
  }
}
2025-08-01 14:15:54,509 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:55,706 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-08-01 14:15:55,710 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1663"
  }
}
2025-08-01 14:15:55,713 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:57,027 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 182
2025-08-01 14:15:57,030 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1664"
  }
}
2025-08-01 14:15:57,033 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:58,188 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 192
2025-08-01 14:15:58,191 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1665"
  }
}
2025-08-01 14:15:58,192 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:15:59,370 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 180
2025-08-01 14:15:59,372 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1666"
  }
}
2025-08-01 14:15:59,374 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:00,438 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 197
2025-08-01 14:16:00,444 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1631"
  }
}
2025-08-01 14:16:00,446 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:01,632 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 178
2025-08-01 14:16:01,636 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1668"
  }
}
2025-08-01 14:16:01,640 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:02,933 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 187
2025-08-01 14:16:02,935 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetTestByKey($jql: String!) {\n        getTests(jql: $jql, limit: 1) {\n            results {\n                issueId\n                jira(fields: [\"key\", \"labels\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "key = FRAMED-1669"
  }
}
2025-08-01 14:16:02,937 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:04,132 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 196
2025-08-01 14:16:04,137 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162652",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "smoke",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:04,138 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:04,858 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:04,859 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:04,859 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:05,366 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162653",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:05,367 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:06,200 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:06,201 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:06,201 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:06,706 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162654",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "live_state",
          "manual",
          "requires_live_game",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:06,709 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:07,430 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:07,430 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:07,430 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:07,936 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162655",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "date_bar",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:07,939 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:08,467 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:08,468 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:08,469 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:08,975 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162656",
    "fields": {
      "fields": {
        "labels": [
          "all_star",
          "android",
          "functional_test",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:08,977 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:09,507 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:09,507 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:09,507 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:10,012 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162657",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "content_display",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:10,015 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:10,506 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:10,508 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:10,508 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:11,012 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162658",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "content_display",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:11,017 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:11,509 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:11,509 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:11,509 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:12,014 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162659",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "content_display",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:12,017 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:12,788 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:12,788 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:12,789 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:13,297 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162660",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "localization",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:13,299 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:13,858 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:13,860 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:13,860 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:14,362 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162661",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "localization",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:14,381 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:15,021 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:15,021 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:15,021 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:15,526 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162662",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:15,527 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:16,036 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:16,036 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:16,036 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:16,541 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162663",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "navigation",
          "product_links",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:16,542 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:17,211 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:17,212 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:17,212 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:17,715 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162664",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "performance",
          "smoke",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:17,716 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:18,342 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:18,343 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:18,343 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:18,847 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162665",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "navigation",
          "performance",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:18,850 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:19,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:19,636 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:19,636 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:20,137 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162666",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "regression",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:20,139 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:20,826 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:20,827 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:20,827 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:21,330 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162669",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "regression",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:21,332 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:22,011 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:22,012 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:22,012 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:22,518 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162670",
    "fields": {
      "fields": {
        "labels": [
          "accessibility",
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "manual",
          "talkback",
          "team_page",
          "voiceover"
        ]
      }
    }
  }
}
2025-08-01 14:16:22,519 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:23,058 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:23,059 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:23,059 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:23,562 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162671",
    "fields": {
      "fields": {
        "labels": [
          "accessibility",
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:23,562 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:24,262 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:24,262 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:24,263 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:24,768 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162673",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "cross_platform",
          "functional_test",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:24,771 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:25,479 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:25,481 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:25,481 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:25,987 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162674",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "ipad",
          "manual",
          "matchup_display",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:25,990 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:26,756 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:26,756 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:26,756 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:27,261 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162675",
    "fields": {
      "fields": {
        "labels": [
          "analytics",
          "android",
          "functional_test",
          "ios",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:27,264 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:27,851 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:27,851 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:27,851 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:28,354 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162676",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "opening_day",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:28,355 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:29,031 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:29,032 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:29,032 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:29,539 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162677",
    "fields": {
      "fields": {
        "labels": [
          "all_star",
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:29,541 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:30,535 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:30,537 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:30,537 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:31,043 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162678",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "postseason",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:31,045 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:31,808 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:31,809 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:31,809 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:32,310 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162679",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "high",
          "ios",
          "jewel_event",
          "manual",
          "team_page",
          "world_series"
        ]
      }
    }
  }
}
2025-08-01 14:16:32,314 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:33,043 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:33,044 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:33,044 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:33,550 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162680",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "spring_training",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:33,556 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:34,060 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:34,060 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:34,060 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:34,566 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162681",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "international",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:34,568 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:35,231 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:35,232 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:35,232 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:35,737 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162682",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "ios",
          "jewel_event",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:35,738 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:36,357 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:36,357 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:36,357 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:36,858 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162683",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "preview_state",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:36,860 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:37,477 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:37,478 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:37,478 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:37,994 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162684",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "delayed_state",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:37,995 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:38,731 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:38,733 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:38,733 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:39,238 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162685",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "suspended_state",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:39,239 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:40,000 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:40,004 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:40,004 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:40,509 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162686",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "functional_test",
          "game_state",
          "ios",
          "live_state",
          "manual",
          "medium",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:40,511 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:41,268 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:41,269 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:41,269 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:41,776 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162687",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "final_state",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:41,778 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:42,557 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:42,557 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:42,557 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:43,063 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162688",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "final_state",
          "functional_test",
          "game_state",
          "ios",
          "low",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:43,067 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:43,732 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:43,733 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:43,733 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:44,236 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162689",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "state_transition",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:44,242 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:44,900 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:44,900 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:44,900 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:16:45,404 - DEBUG - GraphQL request payload: {
  "query": "\n    mutation UpdateTest($issueId: String!, $fields: JSON!) {\n        updateTest(issueId: $issueId, test: $fields) {\n            issueId\n            jira(fields: [\"key\", \"labels\"])\n            warnings\n        }\n    }\n    ",
  "variables": {
    "issueId": "1162651",
    "fields": {
      "fields": {
        "labels": [
          "android",
          "critical",
          "functional_test",
          "game_state",
          "high",
          "ios",
          "manual",
          "team_page"
        ]
      }
    }
  }
}
2025-08-01 14:16:45,410 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:16:45,935 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 400 225
2025-08-01 14:16:45,936 - ERROR - GraphQL request failed: 400 Client Error: Bad Request for url: https://xray.cloud.getxray.app/api/v2/graphql
2025-08-01 14:16:45,936 - ERROR - Response body: {"errors":[{"message":"Cannot query field \"updateTest\" on type \"Mutation\". Did you mean \"createTest\", \"updateTestRun\", \"updateTestType\", \"deleteTest\", or \"updateTestStep\"?","locations":[{"line":3,"column":9}]}]}
2025-08-01 14:20:42,254 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:42,982 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 14:20:42,982 - INFO - Successfully obtained Xray authentication token
2025-08-01 14:20:42,983 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1632"
  }
}
2025-08-01 14:20:42,983 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:44,323 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 992
2025-08-01 14:20:44,630 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1633"
  }
}
2025-08-01 14:20:44,631 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:46,104 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 645
2025-08-01 14:20:46,411 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1634"
  }
}
2025-08-01 14:20:46,412 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:47,619 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:20:47,924 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1635"
  }
}
2025-08-01 14:20:47,926 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:49,070 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 901
2025-08-01 14:20:49,374 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1636"
  }
}
2025-08-01 14:20:49,375 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:50,739 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 815
2025-08-01 14:20:51,042 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1637"
  }
}
2025-08-01 14:20:51,044 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:52,032 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 881
2025-08-01 14:20:52,338 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1638"
  }
}
2025-08-01 14:20:52,341 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:53,444 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 872
2025-08-01 14:20:53,751 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1639"
  }
}
2025-08-01 14:20:53,754 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:55,156 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 769
2025-08-01 14:20:55,464 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1640"
  }
}
2025-08-01 14:20:55,465 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:20:59,454 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 948
2025-08-01 14:20:59,755 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1641"
  }
}
2025-08-01 14:20:59,756 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:01,164 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 864
2025-08-01 14:21:01,471 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1642"
  }
}
2025-08-01 14:21:01,474 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:03,402 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 804
2025-08-01 14:21:03,705 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1643"
  }
}
2025-08-01 14:21:03,707 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:04,797 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 857
2025-08-01 14:21:05,106 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1644"
  }
}
2025-08-01 14:21:05,109 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:06,495 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 882
2025-08-01 14:21:06,803 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1645"
  }
}
2025-08-01 14:21:06,805 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:07,868 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 779
2025-08-01 14:21:08,174 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1646"
  }
}
2025-08-01 14:21:08,176 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:09,456 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 852
2025-08-01 14:21:09,761 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1647"
  }
}
2025-08-01 14:21:09,764 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:10,989 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 611
2025-08-01 14:21:11,294 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1648"
  }
}
2025-08-01 14:21:11,296 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:12,607 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 908
2025-08-01 14:21:12,914 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1649"
  }
}
2025-08-01 14:21:12,915 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:14,151 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 857
2025-08-01 14:21:14,458 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1650"
  }
}
2025-08-01 14:21:14,460 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:15,718 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 865
2025-08-01 14:21:16,025 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1651"
  }
}
2025-08-01 14:21:16,027 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:17,431 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 851
2025-08-01 14:21:17,737 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1652"
  }
}
2025-08-01 14:21:17,739 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:18,975 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 839
2025-08-01 14:21:19,283 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1653"
  }
}
2025-08-01 14:21:19,284 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:20,518 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:20,828 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1654"
  }
}
2025-08-01 14:21:20,831 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:22,083 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:22,388 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1655"
  }
}
2025-08-01 14:21:22,391 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:23,675 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:23,982 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1656"
  }
}
2025-08-01 14:21:23,983 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:25,112 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:25,420 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1657"
  }
}
2025-08-01 14:21:25,421 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:26,633 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:26,939 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1658"
  }
}
2025-08-01 14:21:26,946 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:28,214 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:28,522 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1659"
  }
}
2025-08-01 14:21:28,524 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:29,752 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:30,058 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1660"
  }
}
2025-08-01 14:21:30,061 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:31,298 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:31,606 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1661"
  }
}
2025-08-01 14:21:31,609 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:32,625 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:32,929 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1662"
  }
}
2025-08-01 14:21:32,932 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:34,048 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:34,356 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1663"
  }
}
2025-08-01 14:21:34,359 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:35,587 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:35,891 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1664"
  }
}
2025-08-01 14:21:35,893 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:37,039 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:37,346 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1665"
  }
}
2025-08-01 14:21:37,348 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:38,548 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:38,858 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1666"
  }
}
2025-08-01 14:21:38,860 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:40,198 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:40,505 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1631"
  }
}
2025-08-01 14:21:40,508 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:41,741 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:42,050 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1668"
  }
}
2025-08-01 14:21:42,052 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:43,492 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 962
2025-08-01 14:21:43,796 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1669"
  }
}
2025-08-01 14:21:43,798 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:45,029 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:52,190 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:52,726 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 14:21:52,727 - INFO - Successfully obtained Xray authentication token
2025-08-01 14:21:52,727 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1632"
  }
}
2025-08-01 14:21:52,729 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:53,952 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 992
2025-08-01 14:21:54,260 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1633"
  }
}
2025-08-01 14:21:54,262 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:55,491 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 645
2025-08-01 14:21:55,797 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1634"
  }
}
2025-08-01 14:21:55,799 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:57,018 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:21:57,324 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1635"
  }
}
2025-08-01 14:21:57,327 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:21:58,632 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 901
2025-08-01 14:21:58,940 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1636"
  }
}
2025-08-01 14:21:58,945 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:00,748 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 815
2025-08-01 14:22:01,055 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1637"
  }
}
2025-08-01 14:22:01,059 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:02,491 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 881
2025-08-01 14:22:02,797 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1638"
  }
}
2025-08-01 14:22:02,799 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:03,947 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 872
2025-08-01 14:22:04,254 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1639"
  }
}
2025-08-01 14:22:04,260 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:05,624 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 769
2025-08-01 14:22:05,931 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1640"
  }
}
2025-08-01 14:22:05,935 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:06,992 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 948
2025-08-01 14:22:07,297 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1641"
  }
}
2025-08-01 14:22:07,301 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:08,446 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 864
2025-08-01 14:22:08,767 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1642"
  }
}
2025-08-01 14:22:08,769 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:10,058 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 804
2025-08-01 14:22:10,364 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1643"
  }
}
2025-08-01 14:22:10,366 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:11,456 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 857
2025-08-01 14:22:11,763 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1644"
  }
}
2025-08-01 14:22:11,766 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:12,894 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 882
2025-08-01 14:22:13,201 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1645"
  }
}
2025-08-01 14:22:13,204 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:14,486 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 779
2025-08-01 14:22:14,792 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1646"
  }
}
2025-08-01 14:22:14,794 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:16,028 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 852
2025-08-01 14:22:16,333 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1647"
  }
}
2025-08-01 14:22:16,337 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:17,365 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 611
2025-08-01 14:22:17,672 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1648"
  }
}
2025-08-01 14:22:17,677 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:18,919 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 908
2025-08-01 14:22:19,233 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1649"
  }
}
2025-08-01 14:22:19,236 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:20,530 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 857
2025-08-01 14:22:20,837 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1650"
  }
}
2025-08-01 14:22:20,840 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:22,136 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 865
2025-08-01 14:22:22,443 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1651"
  }
}
2025-08-01 14:22:22,447 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:23,714 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 851
2025-08-01 14:22:24,019 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1652"
  }
}
2025-08-01 14:22:24,020 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:25,376 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 839
2025-08-01 14:22:25,683 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1653"
  }
}
2025-08-01 14:22:25,692 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:26,863 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:27,171 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1654"
  }
}
2025-08-01 14:22:27,173 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:28,363 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:28,671 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1655"
  }
}
2025-08-01 14:22:28,683 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:29,887 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:30,193 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1656"
  }
}
2025-08-01 14:22:30,198 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:31,397 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:31,703 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1657"
  }
}
2025-08-01 14:22:31,706 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:32,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:33,179 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1658"
  }
}
2025-08-01 14:22:33,182 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:34,435 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:34,741 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1659"
  }
}
2025-08-01 14:22:34,745 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:35,988 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:36,293 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1660"
  }
}
2025-08-01 14:22:36,295 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:37,454 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:37,762 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1661"
  }
}
2025-08-01 14:22:37,764 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:40,050 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:40,354 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1662"
  }
}
2025-08-01 14:22:40,355 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:41,624 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:41,928 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1663"
  }
}
2025-08-01 14:22:41,931 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:43,130 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:43,433 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1664"
  }
}
2025-08-01 14:22:43,440 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:44,584 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:44,891 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1665"
  }
}
2025-08-01 14:22:44,895 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:45,981 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:46,288 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1666"
  }
}
2025-08-01 14:22:46,291 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:47,491 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:47,800 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1631"
  }
}
2025-08-01 14:22:47,811 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:48,961 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:22:49,268 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1668"
  }
}
2025-08-01 14:22:49,269 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:50,512 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 962
2025-08-01 14:22:50,817 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetTest($jql: String!) {\n                getTests(jql: $jql, limit: 1) {\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"labels\", \"priority\"])\n                        testType {\n                            name\n                        }\n                        steps {\n                            id\n                            action\n                            result\n                            data\n                        }\n                    }\n                }\n            }\n            ",
  "variables": {
    "jql": "key = FRAMED-1669"
  }
}
2025-08-01 14:22:50,820 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:22:52,016 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 14:59:01,174 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:01,928 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 14:59:01,930 - INFO - Successfully obtained Xray authentication token
2025-08-01 14:59:01,930 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1355"
  }
}
2025-08-01 14:59:01,931 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:02,940 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:02,940 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1575"
  }
}
2025-08-01 14:59:02,942 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:03,743 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:03,744 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1356"
  }
}
2025-08-01 14:59:03,751 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:04,627 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:04,628 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1576"
  }
}
2025-08-01 14:59:04,629 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:05,461 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:05,462 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1357"
  }
}
2025-08-01 14:59:05,462 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:06,286 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:06,288 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1577"
  }
}
2025-08-01 14:59:06,289 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:06,960 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:06,962 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1358"
  }
}
2025-08-01 14:59:06,963 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:07,863 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:07,864 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1578"
  }
}
2025-08-01 14:59:07,866 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:08,500 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:08,506 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1359"
  }
}
2025-08-01 14:59:08,508 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:09,267 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:09,268 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1579"
  }
}
2025-08-01 14:59:09,268 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:10,107 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:10,112 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1360"
  }
}
2025-08-01 14:59:10,113 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:10,928 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:10,930 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1580"
  }
}
2025-08-01 14:59:10,931 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:11,745 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:11,746 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1361"
  }
}
2025-08-01 14:59:11,748 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:12,477 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:12,478 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1581"
  }
}
2025-08-01 14:59:12,480 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:13,119 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:13,120 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1362"
  }
}
2025-08-01 14:59:13,121 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:13,945 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:13,948 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1582"
  }
}
2025-08-01 14:59:13,949 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:14,615 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:14,618 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1363"
  }
}
2025-08-01 14:59:14,625 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:15,350 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:15,351 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1583"
  }
}
2025-08-01 14:59:15,352 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:16,137 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:16,138 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1364"
  }
}
2025-08-01 14:59:16,139 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:16,878 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:16,878 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1584"
  }
}
2025-08-01 14:59:16,879 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:17,513 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:17,514 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1365"
  }
}
2025-08-01 14:59:17,515 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:18,594 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:18,595 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1585"
  }
}
2025-08-01 14:59:18,596 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:19,278 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:19,280 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1366"
  }
}
2025-08-01 14:59:19,281 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:19,892 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:19,892 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1586"
  }
}
2025-08-01 14:59:19,893 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:20,723 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:20,724 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1367"
  }
}
2025-08-01 14:59:20,725 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:21,506 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:21,506 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1587"
  }
}
2025-08-01 14:59:21,507 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:22,111 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:22,116 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1368"
  }
}
2025-08-01 14:59:22,118 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:22,777 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:22,777 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1588"
  }
}
2025-08-01 14:59:22,778 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:23,375 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:23,375 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1369"
  }
}
2025-08-01 14:59:23,376 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:24,168 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:24,169 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1589"
  }
}
2025-08-01 14:59:24,169 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:24,936 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:24,936 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1370"
  }
}
2025-08-01 14:59:24,937 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:25,587 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:25,588 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1590"
  }
}
2025-08-01 14:59:25,589 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:26,425 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:26,427 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1371"
  }
}
2025-08-01 14:59:26,430 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:27,220 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:27,222 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1591"
  }
}
2025-08-01 14:59:27,226 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:28,059 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:28,061 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1372"
  }
}
2025-08-01 14:59:28,063 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:28,705 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:28,707 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1592"
  }
}
2025-08-01 14:59:28,708 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:29,504 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:29,506 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1373"
  }
}
2025-08-01 14:59:29,509 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:30,309 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:30,311 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1593"
  }
}
2025-08-01 14:59:30,313 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:31,477 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:31,479 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1374"
  }
}
2025-08-01 14:59:31,480 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:32,082 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:32,082 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1594"
  }
}
2025-08-01 14:59:32,084 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:32,883 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:32,883 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1375"
  }
}
2025-08-01 14:59:32,885 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:33,773 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 14:59:33,774 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "FRAMED-1595"
  }
}
2025-08-01 14:59:33,774 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 14:59:34,624 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:01:10,059 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:10,758 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:01:10,759 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:01:10,760 - DEBUG - GraphQL request payload: {
  "query": "\n        query TestConnection {\n            getTests(limit: 1, start: 0) {\n                total\n            }\n        }\n        ",
  "variables": {}
}
2025-08-01 15:01:10,761 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:12,493 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 37
2025-08-01 15:01:12,495 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:13,219 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:01:13,220 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:01:13,220 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetPrecondition($issueId: String!) {\n        getPrecondition(issueId: $issueId) {\n            issueId\n            definition\n        }\n    }\n    ",
  "variables": {
    "issueId": "FRAMED-1595"
  }
}
2025-08-01 15:01:13,222 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:14,025 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:01:14,027 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:14,624 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:01:14,625 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:01:14,626 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetPreconditions {\n        getPreconditions(limit: 5, start: 0) {\n            total\n            results {\n                issueId\n                definition\n                jira(fields: [\"key\", \"summary\"])\n            }\n        }\n    }\n    ",
  "variables": {}
}
2025-08-01 15:01:14,628 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:15,819 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 585
2025-08-01 15:01:54,411 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:55,007 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:01:55,008 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:01:55,009 - DEBUG - GraphQL request payload: {
  "query": "\n    query GetFramedPreconditions($jql: String!, $limit: Int!, $start: Int) {\n        getPreconditions(jql: $jql, limit: $limit, start: $start) {\n            total\n            results {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 10, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\", \"status\"])\n            }\n        }\n    }\n    ",
  "variables": {
    "jql": "project = FRAMED AND issuetype = Precondition ORDER BY key ASC",
    "limit": 50,
    "start": 0
  }
}
2025-08-01 15:01:55,012 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:01:56,337 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 None
2025-08-01 15:04:30,656 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:31,186 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:04:31,188 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:04:31,189 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158139"
  }
}
2025-08-01 15:04:31,191 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:32,264 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 274
2025-08-01 15:04:32,266 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162594"
  }
}
2025-08-01 15:04:32,268 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:33,363 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 315
2025-08-01 15:04:33,364 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158140"
  }
}
2025-08-01 15:04:33,366 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:34,527 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:04:34,532 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162595"
  }
}
2025-08-01 15:04:34,533 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:35,558 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-08-01 15:04:35,558 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158142"
  }
}
2025-08-01 15:04:35,559 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:36,796 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 376
2025-08-01 15:04:36,799 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162596"
  }
}
2025-08-01 15:04:36,802 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:37,914 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:04:37,915 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158144"
  }
}
2025-08-01 15:04:37,917 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:39,600 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 361
2025-08-01 15:04:39,605 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162597"
  }
}
2025-08-01 15:04:39,609 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:40,614 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 273
2025-08-01 15:04:40,616 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158146"
  }
}
2025-08-01 15:04:40,619 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:41,899 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 368
2025-08-01 15:04:41,905 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162598"
  }
}
2025-08-01 15:04:41,906 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:43,026 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 301
2025-08-01 15:04:43,027 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158147"
  }
}
2025-08-01 15:04:43,034 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:44,280 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 371
2025-08-01 15:04:44,281 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162599"
  }
}
2025-08-01 15:04:44,284 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:45,562 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 303
2025-08-01 15:04:45,564 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158149"
  }
}
2025-08-01 15:04:45,568 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:46,849 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 387
2025-08-01 15:04:46,852 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162600"
  }
}
2025-08-01 15:04:46,855 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:48,403 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 307
2025-08-01 15:04:48,406 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158151"
  }
}
2025-08-01 15:04:48,410 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:49,698 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 381
2025-08-01 15:04:49,699 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162601"
  }
}
2025-08-01 15:04:49,702 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:50,739 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 301
2025-08-01 15:04:50,742 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158153"
  }
}
2025-08-01 15:04:50,743 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:51,904 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 379
2025-08-01 15:04:51,908 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162602"
  }
}
2025-08-01 15:04:51,914 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:52,796 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:04:52,798 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158154"
  }
}
2025-08-01 15:04:52,800 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:54,438 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 357
2025-08-01 15:04:54,440 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:04:54,442 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:55,530 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 281
2025-08-01 15:04:55,531 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158156"
  }
}
2025-08-01 15:04:55,534 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:56,803 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:04:56,805 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162604"
  }
}
2025-08-01 15:04:56,806 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:57,820 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:04:57,822 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158158"
  }
}
2025-08-01 15:04:57,824 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:04:59,099 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 390
2025-08-01 15:04:59,102 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162605"
  }
}
2025-08-01 15:04:59,106 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:00,340 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 313
2025-08-01 15:05:00,341 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158160"
  }
}
2025-08-01 15:05:00,342 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:01,465 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 377
2025-08-01 15:05:01,466 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162606"
  }
}
2025-08-01 15:05:01,470 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:02,654 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 297
2025-08-01 15:05:02,661 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158162"
  }
}
2025-08-01 15:05:02,665 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:04,093 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 378
2025-08-01 15:05:04,096 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162607"
  }
}
2025-08-01 15:05:04,108 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:05,318 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:05:05,319 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158163"
  }
}
2025-08-01 15:05:05,321 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:06,377 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 356
2025-08-01 15:05:06,380 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162608"
  }
}
2025-08-01 15:05:06,383 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:07,302 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 277
2025-08-01 15:05:07,307 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158165"
  }
}
2025-08-01 15:05:07,310 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:08,481 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 392
2025-08-01 15:05:08,482 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162609"
  }
}
2025-08-01 15:05:08,483 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:09,527 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 313
2025-08-01 15:05:09,529 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158167"
  }
}
2025-08-01 15:05:09,533 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:10,728 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 382
2025-08-01 15:05:10,730 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162610"
  }
}
2025-08-01 15:05:10,735 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:11,826 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 303
2025-08-01 15:05:11,831 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158169"
  }
}
2025-08-01 15:05:11,832 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:13,067 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 366
2025-08-01 15:05:13,069 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162611"
  }
}
2025-08-01 15:05:13,071 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:14,246 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 287
2025-08-01 15:05:14,247 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158170"
  }
}
2025-08-01 15:05:14,248 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:15,315 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 358
2025-08-01 15:05:15,316 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162612"
  }
}
2025-08-01 15:05:15,316 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:16,383 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-08-01 15:05:16,384 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158172"
  }
}
2025-08-01 15:05:16,384 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:17,565 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:05:17,569 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162613"
  }
}
2025-08-01 15:05:17,580 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:18,580 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 291
2025-08-01 15:05:18,581 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158174"
  }
}
2025-08-01 15:05:18,581 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:19,795 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 362
2025-08-01 15:05:19,796 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162614"
  }
}
2025-08-01 15:05:19,797 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:05:20,906 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 283
2025-08-01 15:07:14,729 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:15,552 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:07:15,555 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:07:15,556 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158139"
  }
}
2025-08-01 15:07:15,560 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:16,558 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 274
2025-08-01 15:07:16,560 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162594"
  }
}
2025-08-01 15:07:16,561 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:17,577 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 315
2025-08-01 15:07:17,578 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158140"
  }
}
2025-08-01 15:07:17,580 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:18,626 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:07:18,627 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162595"
  }
}
2025-08-01 15:07:18,629 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:19,638 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-08-01 15:07:19,641 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158142"
  }
}
2025-08-01 15:07:19,643 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:20,986 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 376
2025-08-01 15:07:20,992 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162596"
  }
}
2025-08-01 15:07:20,995 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:22,027 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:07:22,031 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158144"
  }
}
2025-08-01 15:07:22,037 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:23,273 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 361
2025-08-01 15:07:23,276 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162597"
  }
}
2025-08-01 15:07:23,280 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:24,447 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 273
2025-08-01 15:07:24,447 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158146"
  }
}
2025-08-01 15:07:24,448 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:25,668 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 368
2025-08-01 15:07:25,670 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162598"
  }
}
2025-08-01 15:07:25,672 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:26,757 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 301
2025-08-01 15:07:26,759 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158147"
  }
}
2025-08-01 15:07:26,760 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:27,855 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 371
2025-08-01 15:07:27,856 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162599"
  }
}
2025-08-01 15:07:27,858 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:28,923 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 303
2025-08-01 15:07:28,924 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158149"
  }
}
2025-08-01 15:07:28,926 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:30,146 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 387
2025-08-01 15:07:30,148 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162600"
  }
}
2025-08-01 15:07:30,152 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:31,259 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 307
2025-08-01 15:07:31,260 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158151"
  }
}
2025-08-01 15:07:31,263 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:32,575 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 381
2025-08-01 15:07:32,576 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162601"
  }
}
2025-08-01 15:07:32,578 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:33,601 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 301
2025-08-01 15:07:33,604 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158153"
  }
}
2025-08-01 15:07:33,605 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:34,927 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 379
2025-08-01 15:07:34,928 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162602"
  }
}
2025-08-01 15:07:34,930 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:35,927 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:07:35,929 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158154"
  }
}
2025-08-01 15:07:35,931 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:37,098 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 357
2025-08-01 15:07:37,098 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:07:37,099 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:38,202 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 281
2025-08-01 15:07:38,203 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158156"
  }
}
2025-08-01 15:07:38,205 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:39,450 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:07:39,451 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162604"
  }
}
2025-08-01 15:07:39,453 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:40,464 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:07:40,465 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158158"
  }
}
2025-08-01 15:07:40,466 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:41,563 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 390
2025-08-01 15:07:41,564 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162605"
  }
}
2025-08-01 15:07:41,570 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:43,016 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 313
2025-08-01 15:07:43,017 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158160"
  }
}
2025-08-01 15:07:43,019 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:44,451 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 377
2025-08-01 15:07:44,453 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162606"
  }
}
2025-08-01 15:07:44,454 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:45,534 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 297
2025-08-01 15:07:45,535 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158162"
  }
}
2025-08-01 15:07:45,537 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:46,763 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 378
2025-08-01 15:07:46,764 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162607"
  }
}
2025-08-01 15:07:46,765 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:47,819 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 299
2025-08-01 15:07:47,821 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158163"
  }
}
2025-08-01 15:07:47,823 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:48,876 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 356
2025-08-01 15:07:48,878 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162608"
  }
}
2025-08-01 15:07:48,879 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:49,912 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 277
2025-08-01 15:07:49,914 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158165"
  }
}
2025-08-01 15:07:49,916 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:51,115 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 392
2025-08-01 15:07:51,128 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162609"
  }
}
2025-08-01 15:07:51,130 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:52,141 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 313
2025-08-01 15:07:52,141 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158167"
  }
}
2025-08-01 15:07:52,142 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:53,617 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 382
2025-08-01 15:07:53,618 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162610"
  }
}
2025-08-01 15:07:53,619 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:54,560 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 303
2025-08-01 15:07:54,561 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158169"
  }
}
2025-08-01 15:07:54,563 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:55,963 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 366
2025-08-01 15:07:55,965 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162611"
  }
}
2025-08-01 15:07:55,966 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:56,846 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 287
2025-08-01 15:07:56,849 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158170"
  }
}
2025-08-01 15:07:56,851 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:57,834 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 358
2025-08-01 15:07:57,837 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162612"
  }
}
2025-08-01 15:07:57,838 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:07:58,688 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 279
2025-08-01 15:07:58,690 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158172"
  }
}
2025-08-01 15:07:58,692 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:00,059 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:08:00,060 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162613"
  }
}
2025-08-01 15:08:00,060 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:01,003 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 291
2025-08-01 15:08:01,004 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158174"
  }
}
2025-08-01 15:08:01,005 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:02,290 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 362
2025-08-01 15:08:02,290 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162614"
  }
}
2025-08-01 15:08:02,291 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:03,373 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 283
2025-08-01 15:08:03,375 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162594"
  }
}
2025-08-01 15:08:03,376 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:05,467 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:05,469 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162595"
  }
}
2025-08-01 15:08:05,470 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:07,237 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:07,237 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162596"
  }
}
2025-08-01 15:08:07,238 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:09,315 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:09,316 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162597"
  }
}
2025-08-01 15:08:09,318 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:11,388 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:11,389 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162598"
  }
}
2025-08-01 15:08:11,392 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:13,349 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:13,351 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162599"
  }
}
2025-08-01 15:08:13,353 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:15,204 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:15,205 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162600"
  }
}
2025-08-01 15:08:15,207 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:17,242 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:17,243 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162601"
  }
}
2025-08-01 15:08:17,245 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:18,935 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:18,936 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162602"
  }
}
2025-08-01 15:08:18,937 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:20,941 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:20,942 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:08:20,944 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:22,888 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:22,889 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162604"
  }
}
2025-08-01 15:08:22,890 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:25,077 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:25,078 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162605"
  }
}
2025-08-01 15:08:25,080 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:26,994 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:26,995 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162606"
  }
}
2025-08-01 15:08:26,996 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:29,097 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:29,098 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162607"
  }
}
2025-08-01 15:08:29,099 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:31,106 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:31,108 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162608"
  }
}
2025-08-01 15:08:31,109 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:32,956 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:32,959 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162609"
  }
}
2025-08-01 15:08:32,961 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:35,233 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:35,234 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162610"
  }
}
2025-08-01 15:08:35,235 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:37,073 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:37,074 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162611"
  }
}
2025-08-01 15:08:37,077 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:39,337 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:39,338 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162612"
  }
}
2025-08-01 15:08:39,340 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:41,601 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:41,604 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162613"
  }
}
2025-08-01 15:08:41,606 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:43,505 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:43,508 - DEBUG - GraphQL request payload: {
  "query": "\n                mutation DeletePrecondition($issueId: String!) {\n                    deletePrecondition(issueId: $issueId)\n                }\n                ",
  "variables": {
    "issueId": "1162614"
  }
}
2025-08-01 15:08:43,512 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:08:45,485 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 68
2025-08-01 15:08:59,751 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:00,798 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:09:00,799 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:09:00,800 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158139"
  }
}
2025-08-01 15:09:00,808 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:01,993 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 274
2025-08-01 15:09:02,001 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162594"
  }
}
2025-08-01 15:09:02,003 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:02,803 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:02,805 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158140"
  }
}
2025-08-01 15:09:02,816 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:04,130 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:09:04,132 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162595"
  }
}
2025-08-01 15:09:04,134 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:04,917 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:04,918 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158142"
  }
}
2025-08-01 15:09:04,919 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:06,147 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 376
2025-08-01 15:09:06,148 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162596"
  }
}
2025-08-01 15:09:06,149 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:07,021 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:07,023 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158144"
  }
}
2025-08-01 15:09:07,024 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:08,308 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 361
2025-08-01 15:09:08,309 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162597"
  }
}
2025-08-01 15:09:08,310 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:09,222 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:09,222 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158146"
  }
}
2025-08-01 15:09:09,223 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:10,495 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 368
2025-08-01 15:09:10,495 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162598"
  }
}
2025-08-01 15:09:10,496 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:11,352 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:11,353 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158147"
  }
}
2025-08-01 15:09:11,354 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:12,652 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 371
2025-08-01 15:09:12,653 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162599"
  }
}
2025-08-01 15:09:12,654 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:13,325 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:13,329 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158149"
  }
}
2025-08-01 15:09:13,333 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:14,754 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 387
2025-08-01 15:09:14,770 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162600"
  }
}
2025-08-01 15:09:14,774 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:15,585 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:15,589 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158151"
  }
}
2025-08-01 15:09:15,591 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:16,758 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 381
2025-08-01 15:09:16,758 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162601"
  }
}
2025-08-01 15:09:16,759 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:17,584 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:17,585 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158153"
  }
}
2025-08-01 15:09:17,587 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:18,880 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 379
2025-08-01 15:09:18,882 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162602"
  }
}
2025-08-01 15:09:18,884 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:19,909 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:19,912 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158154"
  }
}
2025-08-01 15:09:19,921 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:21,252 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 357
2025-08-01 15:09:21,254 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:09:21,257 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:22,006 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:22,008 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158156"
  }
}
2025-08-01 15:09:22,013 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:23,257 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:09:23,264 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162604"
  }
}
2025-08-01 15:09:23,265 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:24,107 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:24,109 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158158"
  }
}
2025-08-01 15:09:24,112 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:25,166 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 390
2025-08-01 15:09:25,167 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162605"
  }
}
2025-08-01 15:09:25,168 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:25,969 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:25,970 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158160"
  }
}
2025-08-01 15:09:25,974 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:27,184 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 377
2025-08-01 15:09:27,187 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162606"
  }
}
2025-08-01 15:09:27,190 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:28,096 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:28,096 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158162"
  }
}
2025-08-01 15:09:28,097 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:29,238 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 378
2025-08-01 15:09:29,239 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162607"
  }
}
2025-08-01 15:09:29,241 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:30,018 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:30,018 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158163"
  }
}
2025-08-01 15:09:30,019 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:31,074 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 356
2025-08-01 15:09:31,075 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162608"
  }
}
2025-08-01 15:09:31,077 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:31,714 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:31,715 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158165"
  }
}
2025-08-01 15:09:31,717 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:32,909 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 392
2025-08-01 15:09:32,909 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162609"
  }
}
2025-08-01 15:09:32,910 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:33,516 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:33,516 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158167"
  }
}
2025-08-01 15:09:33,517 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:34,709 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 382
2025-08-01 15:09:34,712 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162610"
  }
}
2025-08-01 15:09:34,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:35,533 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:35,534 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158169"
  }
}
2025-08-01 15:09:35,535 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:36,675 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 366
2025-08-01 15:09:36,676 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162611"
  }
}
2025-08-01 15:09:36,677 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:37,526 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:37,527 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158170"
  }
}
2025-08-01 15:09:37,527 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:39,029 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 358
2025-08-01 15:09:39,030 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162612"
  }
}
2025-08-01 15:09:39,032 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:39,867 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:39,869 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158172"
  }
}
2025-08-01 15:09:39,878 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:40,919 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:09:40,920 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162613"
  }
}
2025-08-01 15:09:40,922 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:41,991 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:41,991 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158174"
  }
}
2025-08-01 15:09:41,993 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:43,015 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 362
2025-08-01 15:09:43,016 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162614"
  }
}
2025-08-01 15:09:43,017 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:43,809 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:54,591 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:55,121 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:09:55,122 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:09:55,123 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158139"
  }
}
2025-08-01 15:09:55,125 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:56,232 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 274
2025-08-01 15:09:56,233 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162594"
  }
}
2025-08-01 15:09:56,235 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:57,047 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:57,048 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158140"
  }
}
2025-08-01 15:09:57,049 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:58,325 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:09:58,327 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162595"
  }
}
2025-08-01 15:09:58,329 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:09:59,299 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:09:59,300 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158142"
  }
}
2025-08-01 15:09:59,301 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:01,168 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 376
2025-08-01 15:10:01,171 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162596"
  }
}
2025-08-01 15:10:01,172 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:02,052 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:02,052 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158144"
  }
}
2025-08-01 15:10:02,053 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:03,345 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 361
2025-08-01 15:10:03,347 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162597"
  }
}
2025-08-01 15:10:03,349 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:04,272 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:04,273 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158146"
  }
}
2025-08-01 15:10:04,276 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:05,733 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 368
2025-08-01 15:10:05,734 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162598"
  }
}
2025-08-01 15:10:05,735 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:06,577 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:06,578 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158147"
  }
}
2025-08-01 15:10:06,580 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:07,687 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 371
2025-08-01 15:10:07,689 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162599"
  }
}
2025-08-01 15:10:07,691 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:08,434 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:08,436 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158149"
  }
}
2025-08-01 15:10:08,438 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:09,700 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 387
2025-08-01 15:10:09,701 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162600"
  }
}
2025-08-01 15:10:09,703 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:10,609 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:10,610 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158151"
  }
}
2025-08-01 15:10:10,612 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:11,927 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 381
2025-08-01 15:10:11,927 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162601"
  }
}
2025-08-01 15:10:11,928 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:12,710 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:12,712 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158153"
  }
}
2025-08-01 15:10:12,714 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:13,996 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 379
2025-08-01 15:10:13,998 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162602"
  }
}
2025-08-01 15:10:14,000 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:15,126 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:15,127 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158154"
  }
}
2025-08-01 15:10:15,129 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:16,434 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 357
2025-08-01 15:10:16,435 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:10:16,437 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:17,270 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:17,271 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158156"
  }
}
2025-08-01 15:10:17,274 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:18,452 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:10:18,453 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162604"
  }
}
2025-08-01 15:10:18,454 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:19,383 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:19,385 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158158"
  }
}
2025-08-01 15:10:19,387 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:20,720 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 390
2025-08-01 15:10:20,721 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162605"
  }
}
2025-08-01 15:10:20,723 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:21,433 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:21,436 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158160"
  }
}
2025-08-01 15:10:21,437 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:22,747 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 377
2025-08-01 15:10:22,748 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162606"
  }
}
2025-08-01 15:10:22,749 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:23,543 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:23,544 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158162"
  }
}
2025-08-01 15:10:23,546 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:24,635 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 378
2025-08-01 15:10:24,636 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162607"
  }
}
2025-08-01 15:10:24,638 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:27,150 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:27,153 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158163"
  }
}
2025-08-01 15:10:27,161 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:28,433 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 356
2025-08-01 15:10:28,434 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162608"
  }
}
2025-08-01 15:10:28,436 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:29,217 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:29,218 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158165"
  }
}
2025-08-01 15:10:29,219 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:30,607 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 392
2025-08-01 15:10:30,610 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162609"
  }
}
2025-08-01 15:10:30,611 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:31,251 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:31,252 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158167"
  }
}
2025-08-01 15:10:31,253 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:32,826 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 382
2025-08-01 15:10:32,827 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162610"
  }
}
2025-08-01 15:10:32,828 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:33,908 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:33,910 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158169"
  }
}
2025-08-01 15:10:33,911 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:35,312 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 366
2025-08-01 15:10:35,314 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162611"
  }
}
2025-08-01 15:10:35,317 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:36,202 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:36,203 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158170"
  }
}
2025-08-01 15:10:36,204 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:37,461 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 358
2025-08-01 15:10:37,463 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162612"
  }
}
2025-08-01 15:10:37,465 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:38,176 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:38,177 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158172"
  }
}
2025-08-01 15:10:38,179 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:39,680 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:10:39,683 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162613"
  }
}
2025-08-01 15:10:39,685 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:40,565 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:10:40,567 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158174"
  }
}
2025-08-01 15:10:40,569 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:41,860 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 362
2025-08-01 15:10:41,861 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162614"
  }
}
2025-08-01 15:10:41,862 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:10:42,775 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:11:16,947 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:11:17,555 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:11:17,556 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:11:17,557 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158154"
  }
}
2025-08-01 15:11:17,560 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:11:18,941 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 357
2025-08-01 15:11:18,942 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:11:18,944 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:11:19,742 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:11:59,864 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:00,516 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:12:00,517 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:12:00,518 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158139"
  }
}
2025-08-01 15:12:00,520 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:01,607 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 274
2025-08-01 15:12:01,608 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162594"
  }
}
2025-08-01 15:12:01,609 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:02,477 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:02,479 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158140"
  }
}
2025-08-01 15:12:02,480 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:03,661 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:12:03,663 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162595"
  }
}
2025-08-01 15:12:03,666 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:04,462 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:04,464 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158142"
  }
}
2025-08-01 15:12:04,465 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:05,818 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 376
2025-08-01 15:12:05,822 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162596"
  }
}
2025-08-01 15:12:05,825 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:06,757 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:06,759 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158144"
  }
}
2025-08-01 15:12:06,776 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:08,144 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 361
2025-08-01 15:12:08,146 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162597"
  }
}
2025-08-01 15:12:08,149 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:08,807 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:08,808 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158146"
  }
}
2025-08-01 15:12:08,810 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:10,050 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 368
2025-08-01 15:12:10,051 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162598"
  }
}
2025-08-01 15:12:10,058 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:10,921 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:10,922 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158147"
  }
}
2025-08-01 15:12:10,924 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:12,202 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 371
2025-08-01 15:12:12,204 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162599"
  }
}
2025-08-01 15:12:12,206 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:13,024 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:13,025 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158149"
  }
}
2025-08-01 15:12:13,027 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:14,299 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 387
2025-08-01 15:12:14,301 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162600"
  }
}
2025-08-01 15:12:14,303 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:15,188 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:15,189 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158151"
  }
}
2025-08-01 15:12:15,191 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:16,440 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 381
2025-08-01 15:12:16,441 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162601"
  }
}
2025-08-01 15:12:16,442 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:17,271 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:17,273 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158153"
  }
}
2025-08-01 15:12:17,276 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:18,666 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 379
2025-08-01 15:12:18,668 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162602"
  }
}
2025-08-01 15:12:18,670 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:19,452 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:19,452 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158154"
  }
}
2025-08-01 15:12:19,453 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:20,569 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 357
2025-08-01 15:12:20,572 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:12:20,574 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:21,412 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:21,415 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158156"
  }
}
2025-08-01 15:12:21,417 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:22,456 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:12:22,457 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162604"
  }
}
2025-08-01 15:12:22,459 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:23,505 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:23,506 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158158"
  }
}
2025-08-01 15:12:23,508 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:24,775 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 390
2025-08-01 15:12:24,776 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162605"
  }
}
2025-08-01 15:12:24,778 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:25,581 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:25,582 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158160"
  }
}
2025-08-01 15:12:25,582 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:26,984 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 377
2025-08-01 15:12:26,988 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162606"
  }
}
2025-08-01 15:12:26,991 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:27,802 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:27,804 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158162"
  }
}
2025-08-01 15:12:27,806 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:28,917 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 378
2025-08-01 15:12:28,918 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162607"
  }
}
2025-08-01 15:12:28,920 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:29,694 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:29,695 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158163"
  }
}
2025-08-01 15:12:29,697 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:30,751 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 356
2025-08-01 15:12:30,753 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162608"
  }
}
2025-08-01 15:12:30,754 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:31,488 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:31,496 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158165"
  }
}
2025-08-01 15:12:31,497 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:32,809 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 392
2025-08-01 15:12:32,810 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162609"
  }
}
2025-08-01 15:12:32,817 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:33,663 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:33,664 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158167"
  }
}
2025-08-01 15:12:33,665 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:34,871 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 382
2025-08-01 15:12:34,872 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162610"
  }
}
2025-08-01 15:12:34,874 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:35,658 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:35,660 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158169"
  }
}
2025-08-01 15:12:35,661 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:36,856 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 366
2025-08-01 15:12:36,858 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162611"
  }
}
2025-08-01 15:12:36,868 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:37,747 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:37,749 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158170"
  }
}
2025-08-01 15:12:37,752 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:38,901 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 358
2025-08-01 15:12:38,903 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162612"
  }
}
2025-08-01 15:12:38,906 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:39,648 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:39,649 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158172"
  }
}
2025-08-01 15:12:39,652 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:41,035 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 370
2025-08-01 15:12:41,041 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162613"
  }
}
2025-08-01 15:12:41,043 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:41,703 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:12:41,706 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1158174"
  }
}
2025-08-01 15:12:41,717 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:42,836 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 362
2025-08-01 15:12:42,838 - DEBUG - GraphQL request payload: {
  "query": "\n        query GetPreconditionWithTests($issueId: String!) {\n            getPrecondition(issueId: $issueId) {\n                issueId\n                definition\n                preconditionType {\n                    name\n                    kind\n                }\n                tests(limit: 100, start: 0) {\n                    total\n                    results {\n                        issueId\n                        jira(fields: [\"key\", \"summary\"])\n                    }\n                }\n                jira(fields: [\"key\", \"summary\", \"labels\"])\n            }\n        }\n        ",
  "variables": {
    "issueId": "1162614"
  }
}
2025-08-01 15:12:42,840 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:12:43,677 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:13:09,509 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:09,974 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v1/authenticate HTTP/1.1" 200 418
2025-08-01 15:13:09,974 - INFO - Successfully obtained Xray authentication token
2025-08-01 15:13:09,978 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1158139"
  }
}
2025-08-01 15:13:09,981 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:11,050 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 128
2025-08-01 15:13:11,052 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1158154"
  }
}
2025-08-01 15:13:11,053 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:12,187 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 124
2025-08-01 15:13:12,189 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1158163"
  }
}
2025-08-01 15:13:12,192 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:13,387 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 122
2025-08-01 15:13:13,391 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1158169"
  }
}
2025-08-01 15:13:13,393 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:14,433 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 127
2025-08-01 15:13:14,436 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1158174"
  }
}
2025-08-01 15:13:14,439 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:15,526 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 125
2025-08-01 15:13:15,528 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1162594"
  }
}
2025-08-01 15:13:15,532 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:16,412 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:13:16,414 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1162603"
  }
}
2025-08-01 15:13:16,418 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:17,301 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:13:17,302 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1162608"
  }
}
2025-08-01 15:13:17,303 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:18,107 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:13:18,108 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1162611"
  }
}
2025-08-01 15:13:18,109 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:18,785 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
2025-08-01 15:13:18,787 - DEBUG - GraphQL request payload: {
  "query": "\n            query GetPrecondition($issueId: String!) {\n                getPrecondition(issueId: $issueId) {\n                    issueId\n                    jira(fields: [\"key\", \"summary\", \"labels\"])\n                }\n            }\n            ",
  "variables": {
    "issueId": "1162614"
  }
}
2025-08-01 15:13:18,788 - DEBUG - Starting new HTTPS connection (1): xray.cloud.getxray.app:443
2025-08-01 15:13:19,639 - DEBUG - https://xray.cloud.getxray.app:443 "POST /api/v2/graphql HTTP/1.1" 200 33
