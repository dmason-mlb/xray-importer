{
  "info": {
    "name": "XRAY GraphQL API - Test Creation & Organization",
    "description": "Complete collection for creating and organizing tests in XRAY using GraphQL API. This collection includes authentication, folder management, test creation, and test set operations.\n\n## Prerequisites\n\n1. **XRAY API Key**: Create an API Key in XRAY Global Settings\n2. **Environment Setup**: \n   - Select the **Xray** environment in Postman\n   - The following variables are configured as **secrets** (hidden values that won't be exported or shared):\n     - `xray_client_id`: Your XRAY Client ID\n     - `xray_client_secret`: Your XRAY Client Secret\n   - `xray_token`: Will be automatically set after authentication\n\n## Important: Environment Variables\n\n**Secret Variables**: Variables marked as 'secret' in Postman environments have their values hidden when:\n- Exporting the environment\n- Sharing collections\n- Viewing in team workspaces (for non-owners)\n- Syncing to version control\n\nThis ensures sensitive credentials remain secure.\n\n## Usage\n\n1. Select the **Xray** environment from the environment dropdown\n2. Run the **Authenticate** request first\n3. The token will be automatically saved to environment\n4. All subsequent requests will use this token\n5. Token expires after ~24 hours\n\n## Note on Project Variables\n\nThe `jira_project_key` and `jira_project_id` are defined directly in each query's variables section. Update these values in the query variables to match your project:\n- `jira_project_key`: Your project key (e.g., \"MLB\")\n- `jira_project_id`: Your project ID (e.g., \"10000\")\n\n## Documentation\n\nFor detailed documentation, see the included requests and their descriptions.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{xray_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check if token exists",
          "if (!pm.environment.get('xray_token')) {",
          "    console.log('No token found. Please run the Authenticate request first.');",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Authenticate",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Parse response and save token",
                  "const token = pm.response.text().replace(/\"/g, '');",
                  "",
                  "if (token) {",
                  "    pm.environment.set('xray_token', token);",
                  "    console.log('Token saved to environment');",
                  "    ",
                  "    // Set token expiry (23 hours from now)",
                  "    const expiry = new Date();",
                  "    expiry.setHours(expiry.getHours() + 23);",
                  "    pm.environment.set('xray_token_expiry', expiry.toISOString());",
                  "}",
                  "",
                  "pm.test('Authentication successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.length).to.be.above(100);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"client_id\": \"{{xray_client_id}}\",\n  \"client_secret\": \"{{xray_client_secret}}\"\n}"
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/authenticate",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "authenticate"
              ]
            },
            "description": "Authenticates with XRAY API and returns a JWT token.\n\n**Required Environment Variables:**\n- `xray_client_id`: Your XRAY Client ID (configured as secret)\n- `xray_client_secret`: Your XRAY Client Secret (configured as secret)\n\n**Response:**\n- 200 OK: Returns JWT token (automatically saved to environment)\n- 400 Bad Request: Invalid credentials format\n- 401 Unauthorized: Invalid credentials or expired license\n\n**Token Expiry:** ~24 hours"
          }
        }
      ]
    },
    {
      "name": "Data Exploration",
      "item": [
        {
          "name": "Get All Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Tests retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.getTests).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.getTests) {",
                  "    const tests = jsonData.data.getTests;",
                  "    console.log(`Total tests found: ${tests.total}`);",
                  "    console.log(`Tests in this page: ${tests.results.length}`);",
                  "    ",
                  "    // Display first few tests",
                  "    tests.results.slice(0, 5).forEach(test => {",
                  "        console.log(`- ${test.jira.key}: ${test.jira.summary}`);",
                  "        if (test.jira.labels && test.jira.labels.length > 0) {",
                  "            console.log(`  Labels: ${test.jira.labels.join(', ')}`);",
                  "        }",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetAllTests(\n  $jql: String,\n  $limit: Int,\n  $start: Int\n) {\n  getTests(\n    jql: $jql,\n    limit: $limit,\n    start: $start\n  ) {\n    total\n    start\n    limit\n    results {\n      issueId\n      testType {\n        name\n        kind\n      }\n      folder {\n        path\n      }\n      jira(fields: [\"key\", \"summary\", \"labels\", \"status\", \"priority\", \"components\", \"assignee\"])\n    }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLB AND issuetype = Test ORDER BY created DESC\",\n  \"limit\": 50,\n  \"start\": 0,\n  \"jira_project_key\": \"MLB\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Retrieves all tests in the project with pagination.\n\n**Variables:**\n- `jql`: JQL query to filter tests (update project key here)\n- `limit`: Number of results per page (max 100)\n- `start`: Starting index for pagination\n- `jira_project_key`: Your project key\n- `jira_project_id`: Your project ID\n\n**Use Cases:**\n- Audit existing tests\n- Find tests without labels\n- Export test inventory\n- Check test distribution"
          }
        },
        {
          "name": "Get Tests by Label",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Tests with label retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.getTests) {",
                  "    const tests = jsonData.data.getTests;",
                  "    console.log(`Tests with @smoke label: ${tests.total}`);",
                  "    ",
                  "    tests.results.forEach(test => {",
                  "        console.log(`${test.jira.key}: ${test.jira.summary}`);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetTestsByLabel(\n  $jql: String!,\n  $limit: Int\n) {\n  getTests(\n    jql: $jql,\n    limit: $limit\n  ) {\n    total\n    results {\n      issueId\n      testType {\n        name\n      }\n      folder {\n        path\n      }\n      jira(fields: [\"key\", \"summary\", \"labels\", \"priority\", \"status\"])\n    }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLB AND issuetype = Test AND labels = '@smoke'\",\n  \"limit\": 100,\n  \"jira_project_key\": \"MLB\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Finds all tests with a specific label.\n\n**Common Label Queries:**\n- `labels = '@smoke'` - Smoke tests\n- `labels = '@regression'` - Regression tests\n- `labels = '@team-page'` - Feature-specific\n- `labels in ('@ios', '@android')` - Platform tests\n- `labels = '@critical' AND labels = '@smoke'` - Multiple labels"
          }
        },
        {
          "name": "Get All Test Sets",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test sets retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.getTestSets).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.getTestSets) {",
                  "    const testSets = jsonData.data.getTestSets;",
                  "    console.log(`Total test sets: ${testSets.total}`);",
                  "    ",
                  "    testSets.results.forEach(set => {",
                  "        console.log(`${set.jira.key}: ${set.jira.summary} (${set.tests.total} tests)`);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetAllTestSets(\n  $jql: String,\n  $limit: Int,\n  $start: Int\n) {\n  getTestSets(\n    jql: $jql,\n    limit: $limit,\n    start: $start\n  ) {\n    total\n    start\n    limit\n    results {\n      issueId\n      tests {\n        total\n      }\n      jira(fields: [\"key\", \"summary\", \"description\", \"status\"])\n    }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLB AND issuetype = 'Test Set' ORDER BY created DESC\",\n  \"limit\": 50,\n  \"start\": 0,\n  \"jira_project_key\": \"MLB\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Retrieves all test sets in the project.\n\n**Variables:**\n- `jql`: JQL query to filter test sets\n- `limit`: Results per page\n- `start`: Pagination offset\n- `jira_project_key`: Your project key\n- `jira_project_id`: Your project ID\n\n**Returns:**\n- Test set metadata\n- Number of tests in each set\n- JIRA fields (status, description)"
          }
        },
        {
          "name": "Get Tests Without Folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Unfiled tests retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.getTests) {",
                  "    const tests = jsonData.data.getTests;",
                  "    const unfiledTests = tests.results.filter(test => !test.folder);",
                  "    ",
                  "    console.log(`Tests without folder: ${unfiledTests.length} of ${tests.results.length}`);",
                  "    ",
                  "    unfiledTests.forEach(test => {",
                  "        console.log(`- ${test.jira.key}: ${test.jira.summary}`);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetUnfiledTests(\n  $jql: String!,\n  $limit: Int\n) {\n  getTests(\n    jql: $jql,\n    limit: $limit\n  ) {\n    total\n    results {\n      issueId\n      folder {\n        path\n      }\n      jira(fields: [\"key\", \"summary\", \"labels\", \"created\"])\n    }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLB AND issuetype = Test\",\n  \"limit\": 100,\n  \"jira_project_key\": \"MLB\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Finds tests that are not organized in any folder.\n\n**Use this to:**\n- Clean up test organization\n- Find newly imported tests\n- Audit test repository structure\n\nNote: The query fetches all tests, then filters client-side for those without folders."
          }
        },
        {
          "name": "Get Folder Structure",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Folder structure retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "function printFolderTree(folder, indent = '') {",
                  "    if (!folder) return;",
                  "    ",
                  "    console.log(`${indent}📁 ${folder.name} (${folder.testsCount} tests)`);",
                  "    ",
                  "    if (folder.folders && folder.folders.length > 0) {",
                  "        folder.folders.forEach(subfolder => {",
                  "            // Would need separate query for each subfolder",
                  "            console.log(`${indent}  └─ ${subfolder}`);",
                  "        });",
                  "    }",
                  "}",
                  "",
                  "if (jsonData.data && jsonData.data.getFolder) {",
                  "    printFolderTree(jsonData.data.getFolder);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetFolderStructure($projectId: String!, $path: String!) {\n  getFolder(projectId: $projectId, path: $path) {\n    name\n    path\n    testsCount\n    preconditionsCount\n    folders\n    tests(limit: 5) {\n      total\n      results {\n        issueId\n        jira(fields: [\"key\", \"summary\"])\n      }\n    }\n  }\n}",
                "variables": "{\n  \"projectId\": \"10000\",\n  \"path\": \"/\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Explores the test repository folder structure.\n\n**Variables:**\n- `projectId`: Your JIRA project ID\n- `path`: Starting path (use \"/\" for root)\n\n**Use to:**\n- Understand test organization\n- Find specific folders\n- Plan reorganization\n- Audit structure"
          }
        }
      ]
    },
    {
      "name": "Test Modification",
      "item": [
        {
          "name": "Update Test Labels",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test labels updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.updateTest).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.updateTest) {",
                  "    const test = jsonData.data.updateTest.test;",
                  "    console.log(`Updated: ${test.jira.key}`);",
                  "    console.log(`New labels: ${test.jira.labels.join(', ')}`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation UpdateTestLabels(\n  $issueId: String!,\n  $labels: [String!]!\n) {\n  updateTest(\n    issueId: $issueId,\n    jira: {\n      update: {\n        labels: [\n          { set: $labels }\n        ]\n      }\n    }\n  ) {\n    test {\n      issueId\n      jira(fields: [\"key\", \"summary\", \"labels\"])\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"labels\": [\n    \"@team-page\",\n    \"@functional\",\n    \"@smoke\",\n    \"@critical\",\n    \"@ios\",\n    \"@android\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Updates labels on an existing test.\n\n**Variables:**\n- `issueId`: Test issue ID\n- `labels`: Array of labels to set (replaces all existing labels)\n\n**Label Operations:**\n- `set`: Replace all labels\n- `add`: Add to existing labels\n- `remove`: Remove specific labels\n\n**Common Labels:**\n- Feature: @team-page, @browse-menu\n- Type: @functional, @api, @e2e\n- Priority: @critical, @high, @medium, @low\n- Platform: @ios, @android, @web\n- Execution: @smoke, @regression, @nightly"
          }
        },
        {
          "name": "Add Labels to Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Labels added to test', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.updateTest) {",
                  "    const test = jsonData.data.updateTest.test;",
                  "    console.log(`Updated: ${test.jira.key}`);",
                  "    console.log(`Current labels: ${test.jira.labels.join(', ')}`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation AddLabelsToTest(\n  $issueId: String!,\n  $labelsToAdd: [String!]!\n) {\n  updateTest(\n    issueId: $issueId,\n    jira: {\n      update: {\n        labels: [\n          { add: $labelsToAdd[0] },\n          { add: $labelsToAdd[1] }\n        ]\n      }\n    }\n  ) {\n    test {\n      issueId\n      jira(fields: [\"key\", \"labels\"])\n    }\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"labelsToAdd\": [\"@regression\", \"@nightly\"]\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Adds new labels to a test without removing existing ones.\n\n**Note:** The update array requires individual operations for each label when using add/remove operations."
          }
        },
        {
          "name": "Update Test Description",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test description updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.updateTest) {",
                  "    console.log('Description updated successfully');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation UpdateTestDescription(\n  $issueId: String!,\n  $summary: String!,\n  $description: String!\n) {\n  updateTest(\n    issueId: $issueId,\n    jira: {\n      fields: {\n        summary: $summary,\n        description: $description\n      }\n    }\n  ) {\n    test {\n      issueId\n      jira(fields: [\"key\", \"summary\", \"description\"])\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"summary\": \"TC-001: Team Selection via Drawer - Updated\",\n  \"description\": \"**Purpose**: Verify that users can successfully select a different team from the team drawer.\\n\\n**Prerequisites**:\\n- User is logged in\\n- App is on latest version\\n- Network connection is stable\\n\\n**Test Data**:\\n- Current team: Yankees\\n- Target team: Red Sox\\n\\n**Expected Behavior**:\\n- Team drawer opens smoothly\\n- All 30 MLB teams are displayed\\n- Team selection updates the entire page\\n- Selected team persists across app restarts\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Updates test summary and description.\n\n**Variables:**\n- `issueId`: Test issue ID\n- `summary`: New test title\n- `description`: New test description (supports markdown)\n\n**Description Best Practices:**\n- Include test purpose\n- List prerequisites\n- Specify test data\n- Document expected behavior\n- Note any special conditions"
          }
        },
        {
          "name": "Update Test Steps",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test step updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.updateTestStep).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.updateTestStep) {",
                  "    const result = jsonData.data.updateTestStep;",
                  "    console.log('Step updated successfully');",
                  "    console.log(`New action: ${result.action}`);",
                  "    console.log(`New result: ${result.result}`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation UpdateTestStep(\n  $issueId: String!,\n  $stepId: String!,\n  $action: String!,\n  $data: String,\n  $result: String!\n) {\n  updateTestStep(\n    issueId: $issueId,\n    stepId: $stepId,\n    action: $action,\n    data: $data,\n    result: $result\n  ) {\n    id\n    action\n    data\n    result\n    warnings\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"stepId\": \"step-id-here\",\n  \"action\": \"Navigate to Team Page and verify initial load\",\n  \"data\": \"Device: iOS/Android\\nUser: Logged in\\nNetwork: WiFi\",\n  \"result\": \"Team Page loads successfully with all sections visible:\\n- Header with team logo\\n- Game/matchup section\\n- News carousel\\n- Roster section\\n- Stats section\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Updates an existing test step.\n\n**Variables:**\n- `issueId`: Test issue ID\n- `stepId`: Step ID to update (get from test details)\n- `action`: Step action description\n- `data`: Test data/preconditions\n- `result`: Expected result\n\n**Note:** You must first retrieve the test to get step IDs."
          }
        },
        {
          "name": "Add Test Step",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test step added', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.addTestStep).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.addTestStep) {",
                  "    console.log('Step added successfully');",
                  "    console.log(`Step ID: ${jsonData.data.addTestStep.id}`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation AddTestStep(\n  $issueId: String!,\n  $action: String!,\n  $data: String,\n  $result: String!\n) {\n  addTestStep(\n    issueId: $issueId,\n    action: $action,\n    data: $data,\n    result: $result\n  ) {\n    id\n    action\n    data\n    result\n    warnings\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"action\": \"Verify error handling for network failure\",\n  \"data\": \"Disable network connection\",\n  \"result\": \"Appropriate error message is displayed with retry option\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Adds a new step to an existing manual test.\n\n**Variables:**\n- `issueId`: Test issue ID\n- `action`: Step action\n- `data`: Test data (optional)\n- `result`: Expected result\n\n**Notes:**\n- Steps are added at the end\n- Cannot reorder via API\n- Maximum recommended: 20 steps"
          }
        },
        {
          "name": "Remove Test Step",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test step removed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.removeTestStep) {",
                  "    console.log(`Step removed: ${jsonData.data.removeTestStep.message}`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation RemoveTestStep(\n  $issueId: String!,\n  $stepId: String!\n) {\n  removeTestStep(\n    issueId: $issueId,\n    stepId: $stepId\n  ) {\n    message\n    warnings\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"stepId\": \"step-id-to-remove\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Removes a step from a manual test.\n\n**Variables:**\n- `issueId`: Test issue ID\n- `stepId`: Step ID to remove\n\n**Warning:** This action cannot be undone."
          }
        },
        {
          "name": "Add Precondition to Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Precondition added', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.addPreconditionsToTest) {",
                  "    const result = jsonData.data.addPreconditionsToTest;",
                  "    console.log(`Added ${result.addedPreconditions} preconditions`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation AddPreconditionsToTest(\n  $issueId: String!,\n  $preconditionIds: [String!]!\n) {\n  addPreconditionsToTest(\n    issueId: $issueId,\n    preconditionIds: $preconditionIds\n  ) {\n    addedPreconditions\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"preconditionIds\": [\"54321\"]\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Links existing preconditions to a test.\n\n**Variables:**\n- `issueId`: Test issue ID\n- `preconditionIds`: Array of precondition IDs\n\n**Common Preconditions:**\n- User logged in\n- Test data prepared\n- Specific app state\n- Network conditions"
          }
        },
        {
          "name": "Update Test Priority",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Priority updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.updateTest) {",
                  "    const test = jsonData.data.updateTest.test;",
                  "    console.log(`Priority updated to: ${test.jira.priority.name}`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation UpdateTestPriority(\n  $issueId: String!,\n  $priority: String!\n) {\n  updateTest(\n    issueId: $issueId,\n    jira: {\n      fields: {\n        priority: { name: $priority }\n      }\n    }\n  ) {\n    test {\n      issueId\n      jira(fields: [\"key\", \"summary\", \"priority\"])\n    }\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"priority\": \"Critical\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Updates test priority.\n\n**Priority Levels:**\n- Critical\n- High  \n- Medium\n- Low\n- Trivial\n\n**Note:** Priority names must match exactly as configured in JIRA."
          }
        },
        {
          "name": "Move Test to Folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test moved to folder', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.updateTestFolder) {",
                  "    const result = jsonData.data.updateTestFolder;",
                  "    console.log(`Test moved to: ${result.folder.path}`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation MoveTestToFolder(\n  $issueId: String!,\n  $projectId: String!,\n  $folderPath: String!\n) {\n  updateTestFolder(\n    issueId: $issueId,\n    projectId: $projectId,\n    folderPath: $folderPath\n  ) {\n    folder {\n      name\n      path\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"projectId\": \"10000\",\n  \"folderPath\": \"/Team Page/Core Navigation\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Moves a test to a different folder in the test repository.\n\n**Variables:**\n- `issueId`: Test issue ID\n- `projectId`: JIRA project ID\n- `folderPath`: Target folder path\n\n**Notes:**\n- Creates folder if it doesn't exist\n- Test can only be in one folder\n- Use \"/\" to remove from all folders"
          }
        }
      ]
    },
    {
      "name": "Folder Management",
      "item": [
        {
          "name": "Create Folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Folder created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.createFolder).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.createFolder) {",
                  "    const folder = jsonData.data.createFolder.folder;",
                  "    console.log('Folder created:', folder.path);",
                  "    ",
                  "    if (jsonData.data.createFolder.warnings) {",
                  "        console.warn('Warnings:', jsonData.data.createFolder.warnings);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation CreateFolder($projectId: String!, $path: String!, $testIssueIds: [String]) {\n  createFolder(projectId: $projectId, path: $path, testIssueIds: $testIssueIds) {\n    folder {\n      name\n      path\n      testsCount\n      preconditionsCount\n      issuesCount\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"projectId\": \"10000\",\n  \"path\": \"/Team Page/Core Navigation\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Creates a folder in the test repository.\n\n**Variables:**\n- `projectId`: JIRA project ID (update this value)\n- `path`: Folder path (e.g., \"/Feature/Component\")\n- `testIssueIds`: Optional array of test IDs to add\n\n**Notes:**\n- Folders are created hierarchically\n- Parent folders are created automatically\n- Use forward slashes for path separation"
          }
        },
        {
          "name": "Create Folder Structure (Batch)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('All folders created', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "// Count successful folders",
                  "let successCount = 0;",
                  "let errorCount = 0;",
                  "",
                  "Object.keys(jsonData.data).forEach(key => {",
                  "    if (jsonData.data[key] && jsonData.data[key].folder) {",
                  "        successCount++;",
                  "    } else {",
                  "        errorCount++;",
                  "    }",
                  "});",
                  "",
                  "console.log(`Created ${successCount} folders successfully`);",
                  "if (errorCount > 0) {",
                  "    console.warn(`Failed to create ${errorCount} folders`);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation CreateFolderStructure($projectId: String!) {\n  # Browse Menu folders\n  browseMenu: createFolder(projectId: $projectId, path: \"/Browse Menu\") {\n    folder { path }\n  }\n  browseMenuNav: createFolder(projectId: $projectId, path: \"/Browse Menu/Core Navigation\") {\n    folder { path }\n  }\n  browseMenuContent: createFolder(projectId: $projectId, path: \"/Browse Menu/Content Display\") {\n    folder { path }\n  }\n  browseMenuJewel: createFolder(projectId: $projectId, path: \"/Browse Menu/Jewel Events\") {\n    folder { path }\n  }\n  browseMenuGameStates: createFolder(projectId: $projectId, path: \"/Browse Menu/Game States\") {\n    folder { path }\n  }\n  \n  # Team Page folders\n  teamPage: createFolder(projectId: $projectId, path: \"/Team Page\") {\n    folder { path }\n  }\n  teamPageDate: createFolder(projectId: $projectId, path: \"/Team Page/Date Bar\") {\n    folder { path }\n  }\n  teamPageMatchup: createFolder(projectId: $projectId, path: \"/Team Page/Matchup Display\") {\n    folder { path }\n  }\n  teamPageJewel: createFolder(projectId: $projectId, path: \"/Team Page/Jewel Events\") {\n    folder { path }\n  }\n  \n  # Jewel Event subfolders\n  openingDay: createFolder(projectId: $projectId, path: \"/Team Page/Jewel Events/Opening Day\") {\n    folder { path }\n  }\n  allStar: createFolder(projectId: $projectId, path: \"/Team Page/Jewel Events/All-Star Week\") {\n    folder { path }\n  }\n  postseason: createFolder(projectId: $projectId, path: \"/Team Page/Jewel Events/Postseason\") {\n    folder { path }\n  }\n}",
                "variables": "{\n  \"projectId\": \"10000\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Creates multiple folders in a single request using GraphQL aliases.\n\n**Benefits:**\n- Single API call for multiple operations\n- Atomic operation (all succeed or fail together)\n- Better performance than individual calls\n\n**Note:** Modify the query to include your specific folder structure."
          }
        },
        {
          "name": "Get Folder Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Folder retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.getFolder).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.getFolder) {",
                  "    const folder = jsonData.data.getFolder;",
                  "    console.log('Folder:', folder.path);",
                  "    console.log('Tests count:', folder.testsCount);",
                  "    console.log('Sub-folders:', folder.folders);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetFolder($projectId: String!, $path: String!) {\n  getFolder(projectId: $projectId, path: $path) {\n    name\n    path\n    testsCount\n    folders\n    tests {\n      total\n      results {\n        issueId\n        jira(fields: [\"key\", \"summary\", \"labels\"])\n      }\n    }\n  }\n}",
                "variables": "{\n  \"projectId\": \"10000\",\n  \"path\": \"/Team Page\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Retrieves folder information including sub-folders and tests.\n\n**Variables:**\n- `projectId`: JIRA project ID\n- `path`: Folder path to query\n\n**Returns:**\n- Folder metadata\n- Sub-folder list\n- Tests contained in folder"
          }
        },
        {
          "name": "Add Tests to Folder",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Tests added to folder', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.addTestsToFolder).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.addTestsToFolder) {",
                  "    const folder = jsonData.data.addTestsToFolder.folder;",
                  "    console.log('Updated folder:', folder.path);",
                  "    console.log('Total tests:', folder.testsCount);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation AddTestsToFolder($projectId: String!, $path: String!, $testIssueIds: [String!]!) {\n  addTestsToFolder(projectId: $projectId, path: $path, testIssueIds: $testIssueIds) {\n    folder {\n      name\n      path\n      testsCount\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"projectId\": \"10000\",\n  \"path\": \"/Team Page/Core Navigation\",\n  \"testIssueIds\": [\"MLB-1001\", \"MLB-1002\", \"MLB-1003\"],\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Adds existing tests to a folder.\n\n**Variables:**\n- `projectId`: JIRA project ID\n- `path`: Target folder path\n- `testIssueIds`: Array of test issue IDs\n\n**Notes:**\n- Tests must exist before adding to folder\n- Tests can be in multiple folders"
          }
        }
      ]
    },
    {
      "name": "Test Creation",
      "item": [
        {
          "name": "Create Manual Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.createTest).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.createTest) {",
                  "    const test = jsonData.data.createTest.test;",
                  "    console.log('Test created:', test.jira.key);",
                  "    console.log('Test ID:', test.issueId);",
                  "    console.log('Labels:', test.jira.labels);",
                  "    ",
                  "    // Save test ID for later use",
                  "    pm.environment.set('last_test_id', test.issueId);",
                  "    pm.environment.set('last_test_key', test.jira.key);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation CreateManualTest(\n  $jira: JSON!,\n  $testType: UpdateTestTypeInput,\n  $steps: [CreateStepInput!],\n  $folderPath: String\n) {\n  createTest(\n    jira: $jira,\n    testType: $testType,\n    steps: $steps,\n    folderPath: $folderPath\n  ) {\n    test {\n      issueId\n      testType { name }\n      steps {\n        id\n        action\n        data\n        result\n      }\n      folder { path }\n      jira(fields: [\"key\", \"labels\", \"priority\", \"summary\"])\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"jira\": {\n    \"fields\": {\n      \"project\": { \"key\": \"MLB\" },\n      \"summary\": \"TC-001: Team Selection via Drawer\",\n      \"description\": \"Verify that users can successfully select a different team from the team drawer.\",\n      \"issuetype\": { \"name\": \"Test\" },\n      \"labels\": [\n        \"@team-page\",\n        \"@functional\",\n        \"@critical\",\n        \"@smoke\",\n        \"@navigation\",\n        \"@ios\",\n        \"@android\"\n      ],\n      \"priority\": { \"name\": \"High\" },\n      \"components\": [{ \"name\": \"Team Page\" }]\n    }\n  },\n  \"testType\": { \"name\": \"Manual\" },\n  \"steps\": [\n    {\n      \"action\": \"Navigate to Team Page\",\n      \"data\": \"App is open and user is logged in\",\n      \"result\": \"Team Page is displayed with current team information\"\n    },\n    {\n      \"action\": \"Tap on the team selector dropdown\",\n      \"data\": \"Current team: Yankees\",\n      \"result\": \"Team drawer opens smoothly with all 30 MLB teams displayed\"\n    },\n    {\n      \"action\": \"Select a different team from the list\",\n      \"data\": \"Select: Red Sox\",\n      \"result\": \"Team page updates with Red Sox content and header shows new team\"\n    }\n  ],\n  \"folderPath\": \"/Team Page/Core Navigation\",\n  \"jira_project_key\": \"MLB\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Creates a manual test with steps.\n\n**JIRA Fields:**\n- `project.key`: Your project key (update this)\n- `summary`: Test title (max 255 chars)\n- `description`: Detailed description\n- `issuetype`: Must be \"Test\"\n- `labels`: Array of tags\n- `priority`: High/Medium/Low/Critical\n- `components`: Must exist in project\n\n**Test Fields:**\n- `testType`: \"Manual\" for step-based tests\n- `steps`: Array of test steps\n- `folderPath`: Repository location\n\n**Label Convention:**\n- Feature: @team-page, @browse-menu, etc.\n- Type: @functional, @api, @e2e\n- Platform: @ios, @android, @ipad\n- Priority: @critical, @high, @medium, @low\n- Execution: @smoke, @regression, @nightly"
          }
        },
        {
          "name": "Create Generic Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Generic test created', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.createTest).to.exist;",
                  "    pm.expect(jsonData.data.createTest.test.testType.name).to.equal('Generic');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation CreateGenericTest(\n  $jira: JSON!,\n  $testType: UpdateTestTypeInput,\n  $unstructured: String,\n  $folderPath: String\n) {\n  createTest(\n    jira: $jira,\n    testType: $testType,\n    unstructured: $unstructured,\n    folderPath: $folderPath\n  ) {\n    test {\n      issueId\n      testType { name }\n      unstructured\n      folder { path }\n      jira(fields: [\"key\", \"labels\"])\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"jira\": {\n    \"fields\": {\n      \"project\": { \"key\": \"MLB\" },\n      \"summary\": \"API-001: Verify team roster endpoint\",\n      \"description\": \"Test the /api/v1/teams/{teamId}/roster endpoint\",\n      \"issuetype\": { \"name\": \"Test\" },\n      \"labels\": [\n        \"@team-page\",\n        \"@api\",\n        \"@smoke\"\n      ],\n      \"priority\": { \"name\": \"High\" }\n    }\n  },\n  \"testType\": { \"name\": \"Generic\" },\n  \"unstructured\": \"1. Send GET request to /api/v1/teams/NYY/roster\\n2. Verify response status is 200\\n3. Validate response schema\\n4. Check that all required fields are present\\n5. Verify player count matches expected roster size\",\n  \"folderPath\": \"/Team Page/API Tests\",\n  \"jira_project_key\": \"MLB\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Creates a generic/exploratory test without structured steps.\n\n**Use Cases:**\n- API tests\n- Exploratory tests\n- Performance tests\n- Tests that don't fit step format\n\n**Fields:**\n- `unstructured`: Free-form test content\n- Other fields same as manual test"
          }
        },
        {
          "name": "Get Test Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.getTest).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.getTest) {",
                  "    const test = jsonData.data.getTest;",
                  "    console.log('Test Key:', test.jira.key);",
                  "    console.log('Test Type:', test.testType.name);",
                  "    console.log('Folder:', test.folder ? test.folder.path : 'Not in folder');",
                  "    console.log('Test Sets:', test.testSets.total);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetTestDetails($issueId: String!) {\n  getTest(issueId: $issueId) {\n    issueId\n    testType {\n      name\n      kind\n    }\n    steps {\n      id\n      action\n      data\n      result\n    }\n    folder {\n      name\n      path\n    }\n    testSets {\n      total\n      results {\n        issueId\n        jira(fields: [\"key\", \"summary\"])\n      }\n    }\n    preconditions {\n      total\n      results {\n        issueId\n        jira(fields: [\"key\", \"summary\"])\n      }\n    }\n    jira(fields: [\"key\", \"summary\", \"labels\", \"priority\", \"status\", \"assignee\", \"components\"])\n  }\n}",
                "variables": "{\n  \"issueId\": \"{{last_test_id}}\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Retrieves complete test information.\n\n**Variables:**\n- `issueId`: Test issue ID (e.g., \"12345\")\n\n**Returns:**\n- Test type and steps\n- Folder location\n- Associated test sets\n- Preconditions\n- All JIRA fields"
          }
        }
      ]
    },
    {
      "name": "Test Set Management",
      "item": [
        {
          "name": "Create Test Set",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test set created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.createTestSet).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.createTestSet) {",
                  "    const testSet = jsonData.data.createTestSet.testSet;",
                  "    console.log('Test Set created:', testSet.jira.key);",
                  "    ",
                  "    // Save for later use",
                  "    pm.environment.set('last_test_set_id', testSet.issueId);",
                  "    pm.environment.set('last_test_set_key', testSet.jira.key);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation CreateTestSet($jira: JSON!, $testIssueIds: [String]) {\n  createTestSet(jira: $jira, testIssueIds: $testIssueIds) {\n    testSet {\n      issueId\n      jira(fields: [\"key\", \"summary\"])\n    }\n    warnings\n  }\n}",
                "variables": "{\n  \"jira\": {\n    \"fields\": {\n      \"project\": { \"key\": \"MLB\" },\n      \"summary\": \"SDUI-Smoke-Tests/Team-Page-Smoke\",\n      \"description\": \"Smoke test suite for Team Page functionality. Contains 12 critical tests that must pass before any release.\",\n      \"issuetype\": { \"name\": \"Test Set\" }\n    }\n  },\n  \"testIssueIds\": [],\n  \"jira_project_key\": \"MLB\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Creates a test set for organizing tests.\n\n**Variables:**\n- `jira.fields.project.key`: Your project key\n\n**Test Set Types:**\n1. **Smoke Tests**: Critical path validation\n2. **Regression**: Full feature coverage\n3. **Platform**: iOS/Android specific\n4. **Jewel Events**: Event-specific tests\n5. **Game States**: State-based testing\n\n**Naming Convention:**\n`<Category>/<Feature>-<Type>`\n\nExamples:\n- SDUI-Smoke-Tests/Team-Page-Smoke\n- Platform-Sets/iOS-Only-Tests\n- Jewel-Event-Sets/Opening-Day-Suite"
          }
        },
        {
          "name": "Add Tests to Test Set",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Tests added to test set', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.addTestsToTestSet).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.addTestsToTestSet) {",
                  "    const result = jsonData.data.addTestsToTestSet;",
                  "    console.log('Tests added:', result.addedTests);",
                  "    ",
                  "    if (result.warning) {",
                  "        console.warn('Warning:', result.warning);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation AddTestsToTestSet($issueId: String!, $testIssueIds: [String!]!) {\n  addTestsToTestSet(issueId: $issueId, testIssueIds: $testIssueIds) {\n    addedTests\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"{{last_test_set_id}}\",\n  \"testIssueIds\": [\n    \"{{last_test_id}}\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Adds tests to an existing test set.\n\n**Variables:**\n- `issueId`: Test Set issue ID\n- `testIssueIds`: Array of test IDs to add\n\n**Notes:**\n- Tests can belong to multiple sets\n- Use for cross-cutting organization\n- Maximum ~500 tests per set recommended"
          }
        },
        {
          "name": "Get Test Set Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Test set retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "    pm.expect(jsonData.data.getTestSet).to.exist;",
                  "});",
                  "",
                  "if (jsonData.data && jsonData.data.getTestSet) {",
                  "    const testSet = jsonData.data.getTestSet;",
                  "    console.log('Test Set:', testSet.jira.key);",
                  "    console.log('Total tests:', testSet.tests.total);",
                  "    ",
                  "    if (testSet.tests.results) {",
                  "        testSet.tests.results.forEach(test => {",
                  "            console.log(`- ${test.jira.key}: ${test.jira.summary}`);",
                  "        });",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query GetTestSetDetails($issueId: String!) {\n  getTestSet(issueId: $issueId) {\n    issueId\n    tests(limit: 100) {\n      total\n      results {\n        issueId\n        jira(fields: [\"key\", \"summary\", \"labels\", \"priority\"])\n      }\n    }\n    jira(fields: [\"key\", \"summary\", \"description\", \"status\"])\n  }\n}",
                "variables": "{\n  \"issueId\": \"{{last_test_set_id}}\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Retrieves test set information including all tests.\n\n**Returns:**\n- Test set metadata\n- List of all tests in set\n- Test details (key, summary, labels)\n- Total test count"
          }
        }
      ]
    },
    {
      "name": "Batch Operations",
      "item": [
        {
          "name": "Import Multiple Tests",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "",
                  "pm.test('Multiple tests created', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.expect(jsonData.data).to.exist;",
                  "});",
                  "",
                  "// Collect created test IDs",
                  "const testIds = [];",
                  "const testKeys = [];",
                  "",
                  "Object.keys(jsonData.data).forEach(key => {",
                  "    if (jsonData.data[key] && jsonData.data[key].test) {",
                  "        const test = jsonData.data[key].test;",
                  "        testIds.push(test.issueId);",
                  "        testKeys.push(test.jira.key);",
                  "        console.log(`Created: ${test.jira.key} - ${test.jira.summary}`);",
                  "    }",
                  "});",
                  "",
                  "// Save for test set creation",
                  "pm.environment.set('batch_test_ids', JSON.stringify(testIds));",
                  "pm.environment.set('batch_test_keys', JSON.stringify(testKeys));",
                  "",
                  "console.log(`Total tests created: ${testIds.length}`);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation ImportMultipleTests($projectKey: String!) {\n  test1: createTest(\n    jira: {\n      fields: {\n        project: { key: $projectKey },\n        summary: \"TC-010: Verify team roster display\",\n        issuetype: { name: \"Test\" },\n        labels: [\"@team-page\", \"@functional\", \"@smoke\", \"@ios\", \"@android\"],\n        priority: { name: \"High\" }\n      }\n    },\n    testType: { name: \"Manual\" },\n    steps: [\n      {\n        action: \"Navigate to Team Page\",\n        result: \"Team page loads\"\n      },\n      {\n        action: \"Scroll to roster section\",\n        result: \"Full roster is displayed with player images\"\n      }\n    ],\n    folderPath: \"/Team Page/Content Display\"\n  ) {\n    test {\n      issueId\n      jira(fields: [\"key\", \"summary\"])\n    }\n  }\n  \n  test2: createTest(\n    jira: {\n      fields: {\n        project: { key: $projectKey },\n        summary: \"TC-011: Verify game state transitions\",\n        issuetype: { name: \"Test\" },\n        labels: [\"@team-page\", \"@functional\", \"@game-state\", \"@state-transition\"],\n        priority: { name: \"Critical\" }\n      }\n    },\n    testType: { name: \"Manual\" },\n    steps: [\n      {\n        action: \"Monitor game in preview state\",\n        result: \"Preview state displays correctly\"\n      },\n      {\n        action: \"Wait for game to start\",\n        result: \"Transitions to live state smoothly\"\n      }\n    ],\n    folderPath: \"/Team Page/Game States\"\n  ) {\n    test {\n      issueId\n      jira(fields: [\"key\", \"summary\"])\n    }\n  }\n  \n  test3: createTest(\n    jira: {\n      fields: {\n        project: { key: $projectKey },\n        summary: \"TC-012: Verify All-Star voting integration\",\n        issuetype: { name: \"Test\" },\n        labels: [\"@team-page\", \"@functional\", \"@jewel-event\", \"@all-star\"],\n        priority: { name: \"High\" }\n      }\n    },\n    testType: { name: \"Manual\" },\n    steps: [\n      {\n        action: \"Navigate to Team Page during All-Star voting\",\n        result: \"Voting links are visible\"\n      },\n      {\n        action: \"Click on voting link\",\n        result: \"Navigates to All-Star voting page\"\n      }\n    ],\n    folderPath: \"/Team Page/Jewel Events/All-Star Week\"\n  ) {\n    test {\n      issueId\n      jira(fields: [\"key\", \"summary\"])\n    }\n  }\n}",
                "variables": "{\n  \"projectKey\": \"MLB\",\n  \"jira_project_key\": \"MLB\",\n  \"jira_project_id\": \"10000\"\n}"
              }
            },
            "url": {
              "raw": "https://xray.cloud.getxray.app/api/v2/graphql",
              "protocol": "https",
              "host": [
                "xray",
                "cloud",
                "getxray",
                "app"
              ],
              "path": [
                "api",
                "v2",
                "graphql"
              ]
            },
            "description": "Creates multiple tests in a single request using aliases.\n\n**Variables:**\n- `projectKey`: Your JIRA project key\n\n**Benefits:**\n- Reduced API calls\n- Better performance\n- Atomic operations\n\n**Best Practices:**\n- Batch 5-10 tests per request\n- Use meaningful aliases\n- Save IDs for subsequent operations"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://xray.cloud.getxray.app/api/v2",
      "type": "string"
    }
  ]
}