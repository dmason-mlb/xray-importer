{
  "info": {
    "_postman_id": "xray-graphql-collection",
    "name": "Xray GraphQL API",
    "description": "# Xray GraphQL API Collection (Vault-Secured)\n\nThis collection uses Postman Vault for secure storage of credentials and tokens.\n\n## Setup Instructions\n\n1. **Enable Vault Script Access**\n   - Click the \ud83d\udd12 Vault icon in Postman's bottom bar\n   - Click \u2699\ufe0f Settings\n   - Toggle ON \"Enable support in scripts\"\n\n2. **Add Credentials to Vault**\n   - In Vault, add these secrets:\n     - `Xray_Client_Id` - Your Xray API client ID\n     - `Xray_Client_Secret` - Your Xray API client secret\n   - Get these from Xray Global Settings \u2192 API Keys\n\n3. **Authenticate**\n   - Run \"0. Authentication\" \u2192 \"Get JWT Token\"\n   - The token will be saved to vault as `Xray_Token`\n   - Tokens expire after 24 hours\n\n## Security Features\n\n- Credentials stored in encrypted Vault\n- Tokens never exposed in collection variables\n- Vault contents never exported\n- Automatic token injection for requests\n- Clear error messages with setup instructions\n\n## Troubleshooting\n\nIf you see popups about vault access or authentication:\n- Follow the instructions in the popup\n- Ensure vault script access is enabled\n- Check your credentials are correct\n- Re-authenticate if token expired",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "0. Authentication",
      "item": [
        {
          "name": "Get JWT Token",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"client_id\": \"{{vault:Xray_Client_Id}}\",\n  \"client_secret\": \"{{vault:Xray_Client_Secret}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/authenticate",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "authenticate"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Check if we can access vault for credentials",
                  "Promise.all([",
                  "    pm.vault.get('Xray_Client_Id'),",
                  "    pm.vault.get('Xray_Client_Secret')",
                  "]).then(([clientId, clientSecret]) => {",
                  "    if (!clientId || !clientSecret) {",
                  "        console.error('\u274c Missing credentials in vault');",
                  "        pm.execution.setNextRequest(null);",
                  "        ",
                  "        pm.visualizer.set(`",
                  "            <div style='font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;'>",
                  "                <h2 style='color: #d73502;'>\ud83d\udd11 Missing Credentials</h2>",
                  "                <p>Please add your Xray API credentials to Postman Vault:</p>",
                  "                <ol>",
                  "                    <li>Click the \ud83d\udd12 Vault icon in the bottom bar</li>",
                  "                    <li>Add these two secrets:",
                  "                        <ul>",
                  "                            <li><code>Xray_Client_Id</code> - Your API client ID</li>",
                  "                            <li><code>Xray_Client_Secret</code> - Your API client secret</li>",
                  "                        </ul>",
                  "                    </li>",
                  "                    <li>Save and close the vault</li>",
                  "                    <li>Retry this request</li>",
                  "                </ol>",
                  "                <p style='background: #e8f4f8; padding: 10px; border-radius: 5px;'>",
                  "                    You can get these credentials from your Xray Global Settings \u2192 API Keys",
                  "                </p>",
                  "            </div>",
                  "        `);",
                  "    } else {",
                  "        console.log('\u2705 Credentials found in vault');",
                  "    }",
                  "}).catch((error) => {",
                  "    console.error('\u274c Cannot access vault:', error);",
                  "    pm.execution.setNextRequest(null);",
                  "    ",
                  "    pm.visualizer.set(`",
                  "        <div style='font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;'>",
                  "            <h2 style='color: #d73502;'>\ud83d\udd12 Enable Vault Access</h2>",
                  "            <p>Scripts need permission to access Postman Vault:</p>",
                  "            <ol>",
                  "                <li>Click the \ud83d\udd12 Vault icon in the bottom bar</li>",
                  "                <li>Click the \u2699\ufe0f Settings icon</li>",
                  "                <li>Toggle ON <strong>'Enable support in scripts'</strong></li>",
                  "                <li>Close settings and retry this request</li>",
                  "            </ol>",
                  "        </div>",
                  "    `);",
                  "});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Save token to vault from authentication response",
                  "if (pm.response.code === 200) {",
                  "    try {",
                  "        // Get the response text (JWT token is returned as a quoted string)",
                  "        let responseText = pm.response.text();",
                  "        ",
                  "        // Remove quotes from the token if present",
                  "        let token = responseText.replace(/^\"|\"$/g, '');",
                  "        ",
                  "        // Validate that we have a token",
                  "        if (token && token.length > 0) {",
                  "            // Store the token in vault",
                  "            pm.vault.set('Xray_Token', token)",
                  "                .then(() => {",
                  "                    console.log('\u2705 Xray token successfully stored in vault');",
                  "                    ",
                  "                    // Calculate expiration time",
                  "                    const expirationTime = new Date();",
                  "                    expirationTime.setHours(expirationTime.getHours() + 24);",
                  "                    ",
                  "                    // Store expiration in collection variable (non-sensitive)",
                  "                    pm.collectionVariables.set('xray_token_expires', expirationTime.toISOString());",
                  "                    ",
                  "                    console.log('Token expires at:', expirationTime.toISOString());",
                  "                    ",
                  "                    pm.test('Authentication successful', function () {",
                  "                        pm.response.to.have.status(200);",
                  "                    });",
                  "                    ",
                  "                    // Show success message",
                  "                    pm.visualizer.set(`",
                  "                        <div style='font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;'>",
                  "                            <h2 style='color: #28a745;'>\u2705 Authentication Successful</h2>",
                  "                            <p>Your token has been securely stored in Postman Vault.</p>",
                  "                            <p><strong>Token expires:</strong> ${expirationTime.toLocaleString()}</p>",
                  "                            <p style='background: #e8f8e8; padding: 10px; border-radius: 5px;'>",
                  "                                You can now run any GraphQL query or mutation!",
                  "                            </p>",
                  "                        </div>",
                  "                    `);",
                  "                })",
                  "                .catch((error) => {",
                  "                    console.error('\u274c Failed to save token to vault:', error);",
                  "                    pm.test('Failed to save token to vault', function () {",
                  "                        pm.expect(error).to.be.null;",
                  "                    });",
                  "                });",
                  "        } else {",
                  "            console.error('\u274c No token found in response');",
                  "            pm.test('Token extraction failed', function () {",
                  "                pm.expect(token).to.not.be.undefined;",
                  "            });",
                  "        }",
                  "    } catch (error) {",
                  "        console.error('\u274c Error processing authentication response:', error);",
                  "    }",
                  "} else {",
                  "    // Authentication failed",
                  "    pm.test('Authentication failed', function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    // Show error details",
                  "    let errorMessage = pm.response.text();",
                  "    pm.visualizer.set(`",
                  "        <div style='font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;'>",
                  "            <h2 style='color: #d73502;'>\u274c Authentication Failed</h2>",
                  "            <p><strong>Status:</strong> ${pm.response.code} ${pm.response.status}</p>",
                  "            <p><strong>Response:</strong></p>",
                  "            <pre style='background: #f5f5f5; padding: 10px; overflow: auto;'>${errorMessage}</pre>",
                  "            <h3>Common causes:</h3>",
                  "            <ul>",
                  "                <li>Invalid client ID or secret</li>",
                  "                <li>Expired API credentials</li>",
                  "                <li>API key not enabled in Xray</li>",
                  "            </ul>",
                  "        </div>",
                  "    `);",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "1. Queries - Folders",
      "item": [
        {
          "name": "getFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getfolder($projectId: String, $testPlanId: String, $path: String!) {\n  getFolder(projectId: $projectId, testPlanId: $testPlanId, path: $path) {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"testPlanId\": \"string\",\n  \"path\": \"/\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns the folder for the given projectId with the specified Path along with its child folders.\n===\nThe query below returns the root folder and all its child folders.\n<pre>\n{\n    <b>getFolder</b>(projectId: \"10000\", path: \"/\") {\n        name\n        path\n        testsCount\n        folders\n    }\n}\n</pre>\n===\n===\nThe query below returns the folder with path \"/generic\" and all its child folders.\n<pre>\n{\n    <b>getFolder</b>(projectId: \"10000\", path: \"/generic\") {\n        name\n        path\n        testsCount\n        folders\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Other",
      "item": [
        {
          "name": "getCoverableIssue",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getcoverableissue($issueId: String!) {\n  getCoverableIssue(issueId: $issueId) {\n    issueId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    jira\n    status {\n    name\n    description\n    color\n  }\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Coverable Issue by issueId.\n===\nThe query below returns a Coverable Issue.\n<pre>\n{\n    <b>getCoverableIssue</b> {\n        issueId\n        jira(fields: [\"assignee\", \"reporter\"])\n        status {\n            name\n            description\n            color\n        }\n    }\n}\n</pre>\n===\n===\nThe query below returns the Coverable Issue with issue id **12345**.\n<pre>\n{\n    <b>getCoverableIssue</b>(issueId: \"12345\") {\n        issueId\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getCoverableIssues",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getcoverableissues($jql: String, $issueIds: [String], $limit: Int!, $start: Int) {\n  getCoverableIssues(jql: $jql, issueIds: $issueIds, limit: $limit, start: $start) {\n    total\n    start\n    limit\n    results {\n    issueId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    jira\n    status {\n    name\n    description\n    color\n  }\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLBMOB AND issuetype = Test\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"limit\": 100,\n  \"start\": 100\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple coverable issues by jql or issue ids.\n===\nThe query below returns 10 coverable issues that match the provided jql.\n<pre>\n{\n    <b>getCoverableIssues</b>(limit: 10) {\n        total\n        start\n        limit\n        results {\n            issueId\n            jira(fields: [\"assignee\", \"reporter\"])\n            status {\n                name\n                description\n                color\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getIssueLinkTypes",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getissuelinktypes {\n  getIssueLinkTypes {\n    name\n    id\n  }\n}",
                "variables": "{}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns the Issue Link Types\n===\nThe Query below returns all Issue Link Types\n<pre>\n{\n    <b>getIssueLinkTypes</b> {\n        issueLinks {\n            id\n            name\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Preconditions",
      "item": [
        {
          "name": "getPrecondition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getprecondition($issueId: String) {\n  getPrecondition(issueId: $issueId) {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Precondition by issue id.\n===\nThe Query below returns a Precondition.\n<pre>\n{\n    <b>getPrecondition</b> {\n        issueId\n        preconditionType {\n            kind\n            name\n        }\n    }\n}\n</pre>\n===\n===\nThe Query below returns the Precondition with issue id **12345**\n<pre>\n{\n    <b>getPrecondition</b>(issueId: \"12345\") {\n        issueId\n        definition\n        jira(fields: [\"assignee\", \"reporter\"])\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getPreconditions",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getpreconditions($jql: String, $issueIds: [String], $projectId: String, $preconditionType: TestTypeInput, $limit: Int!, $start: Int, $modifiedSince: String, $folder: PreconditionFolderSearchInput) {\n  getPreconditions(jql: $jql, issueIds: $issueIds, projectId: $projectId, preconditionType: $preconditionType, limit: $limit, start: $start, modifiedSince: $modifiedSince, folder: $folder) {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    unstructured\n    gherkin\n    scenarioType\n    lastModified\n  }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLBMOB AND issuetype = Test\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"projectId\": \"26420\",\n  \"preconditionType\": {},\n  \"limit\": 100,\n  \"start\": 100,\n  \"modifiedSince\": \"string\",\n  \"folder\": {}\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple Preconditions by jql, issueIds, projectId or Precondition Type.\n===\nThe Query below returns the first 100 Preconditions.\n<pre>\n{\n    <b>getPreconditions</b>(limit: 100) {\n        total\n        start\n        limit\n        results {\n            issueId\n            preconditionType {\n                name\n                kind\n            }\n            definition\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n===\n===\nThe Query below returns 10 Preconditions that match the provided jql\n<pre>\n{\n    <b>getPreconditions</b>(jql: \"project = 'PC'\", limit: 10) {\n        results {\n            issueId\n            preconditionType {\n                name\n                kind\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n<b>Note</b>: If the jql returns more than 100 issues an error will be returned asking the user to refine the jql search.\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Statuses",
      "item": [
        {
          "name": "getStepStatus",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getstepstatus($name: String) {\n  getStepStatus(name: $name) {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n}",
                "variables": "{\n  \"name\": \"Test Name\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Status by Test Run Step Status name.\n===\nThe Query below returns a Status\n<pre>\n{\n    <b>getStepStatus</b>( name: \"PASSED\") {\n        name\n        description\n        color\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getStatus",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getstatus($name: String) {\n  getStatus(name: $name) {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n}",
                "variables": "{\n  \"name\": \"Test Name\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Status by Test Run Status name.\n===\nThe Query below returns a Status\n<pre>\n{\n    <b>getStatus</b>( name: \"PASSED\") {\n        name\n        description\n        final\n        color\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getStatuses",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getstatuses($projectId: String) {\n  getStatuses(projectId: $projectId) {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns all Test Run Status.\n===\nThe Query below returns multiple Status\n<pre>\n{\n    <b>getStatuses</b> {\n        name\n        description\n        final\n        color\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getStepStatuses",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getstepstatuses($projectId: String) {\n  getStepStatuses(projectId: $projectId) {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns all Test Run Step Status.\n===\nThe Query below returns multiple Status\n<pre>\n{\n    <b>getStepStatuses</b> {\n        name\n        description\n        color\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Test Executions",
      "item": [
        {
          "name": "getTestExecution",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestexecution($issueId: String) {\n  getTestExecution(issueId: $issueId) {\n    issueId\n    projectId\n    testEnvironments\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    jira\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Test Execution by issue id.\n===\nThe Query below returns a Test Execution.\n<pre>\n{\n    <b>getTestExecution</b> {\n        issueId\n        projectId\n        jira(fields: [\"assignee\", \"reporter\"])\n    }\n}\n</pre>\n===\n===\nThe Query below returns the Test Execution with issue id **12345**.\n<pre>\n{\n    <b>getTestExecution</b>(issueId: \"12345\") {\n        issueId\n        tests(limit: 100) {\n            total\n            start\n            limit\n            results {\n                issueId\n                testType {\n                    name\n                }\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTestExecutions",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestexecutions($jql: String, $issueIds: [String], $projectId: String, $limit: Int!, $start: Int, $modifiedSince: String) {\n  getTestExecutions(jql: $jql, issueIds: $issueIds, projectId: $projectId, limit: $limit, start: $start, modifiedSince: $modifiedSince) {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    testEnvironments\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n  }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLBMOB AND issuetype = Test\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"projectId\": \"26420\",\n  \"limit\": 100,\n  \"start\": 100,\n  \"modifiedSince\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple Test Executions by jql, issue ids or project id.\n===\nThe Query below returns the first 100 Test Executions\n<pre>\n{\n    <b>getTestExecutions</b>(limit: 100) {\n        total\n        start\n        limit\n        results {\n            issueId\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n===\n===\nThe Query below returns 10 Test Executions that match the provided jql.\n<pre>\n{\n    <b>getTestExecutions</b>(jql: \"project = 'PC'\", limit: 10) {\n        total\n        start\n        limit\n        results {\n            issueId\n            tests(limit: 10) {\n                total\n                start\n                limit\n                results {\n                    issueId\n                    testType {\n                        name\n                    }\n                }\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n<b>Note</b>: If the jql returns more than 100 issues an error will be returned asking the user to refine the jql search.\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Test Plans",
      "item": [
        {
          "name": "getTestPlan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestplan($issueId: String) {\n  getTestPlan(issueId: $issueId) {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Test Plan by issue id.\n===\nThe Query below returns a Test Plan.\n<pre>\n{\n    <b>getTestPlan</b> {\n        issueId\n        projectId\n        jira(fields: [\"assignee\", \"reporter\"])\n    }\n}\n</pre>\n===\n===\nThe Query below returns the Test Plan with issue id **12345**\n<pre>\n{\n    <b>getTestPlan</b>(issueId: \"12345\") {\n        issueId\n        tests(limit: 100) {\n            results {\n                issueId\n                testType {\n                    name\n                }\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTestPlans",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestplans($jql: String, $issueIds: [String], $projectId: String, $limit: Int!, $start: Int, $modifiedSince: String) {\n  getTestPlans(jql: $jql, issueIds: $issueIds, projectId: $projectId, limit: $limit, start: $start, modifiedSince: $modifiedSince) {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLBMOB AND issuetype = Test\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"projectId\": \"26420\",\n  \"limit\": 100,\n  \"start\": 100,\n  \"modifiedSince\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple Test Plans by jql, issue ids or project id.\n===\nThe Query below returns the first 100 Test Plans\n<pre>\n{\n    <b>getTestPlans</b>(limit: 100) {\n        total\n        start\n        limit\n        results {\n            issueId\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n===\n===\nThe Query below returns 10 Test Plans that match the provided jql.\n<pre>\n{\n    <b>getTestPlans</b>(jql: \"project = 'PC'\", limit: 10) {\n        total\n        start\n        limit\n        results {\n            issueId\n            tests(limit: 10) {\n                total\n                start\n                limit\n                results {\n                    issueId\n                    testType {\n                        name\n                    }\n                }\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n<b>Note</b>: If the jql returns more than 100 issues an error will be returned asking the user to refine the jql search.\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Test Runs",
      "item": [
        {
          "name": "getTestRun",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestrun($testIssueId: String, $testExecIssueId: String) {\n  getTestRun(testIssueId: $testIssueId, testExecIssueId: $testExecIssueId) {\n    id\n    status {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n    unstructured\n    gherkin\n    scenarioType\n    comment\n    startedOn\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    defects\n    steps {\n    id\n    status {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n    action\n    data\n    result\n    customFields {\n    id\n    name\n    value\n  }\n    comment\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    defects\n    actualResult\n  }\n    examples {\n    id\n    status {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n    duration\n  }\n    results {\n    log\n    examples {\n    wasImported\n    duration\n    status {\n    name\n    description\n    color\n  }\n    hooks {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    backgrounds {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    steps {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n  }\n    wasImported\n    duration\n    status {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n    name\n    hooks {\n    keyword\n    name\n    embeddings {\n    filename\n    mimeType\n    data\n    downloadLink\n  }\n    duration\n    error\n    status {\n    name\n    description\n    color\n  }\n    log\n  }\n    backgrounds {\n    keyword\n    name\n    embeddings {\n    filename\n    mimeType\n    data\n    downloadLink\n  }\n    duration\n    error\n    status {\n    name\n    description\n    color\n  }\n    log\n  }\n    steps {\n    keyword\n    name\n    embeddings {\n    filename\n    mimeType\n    data\n    downloadLink\n  }\n    duration\n    error\n    status {\n    name\n    description\n    color\n  }\n    log\n  }\n  }\n    testType {\n    id\n    name\n    kind\n  }\n    executedById\n    assigneeId\n    finishedOn\n    preconditions {\n    total\n    start\n    limit\n    results {\n    preconditionRef {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n    definition\n  }\n  }\n    test {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    unstructured\n    gherkin\n    scenarioType\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    jira\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    testVersion {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n  }\n    testSets {\n    total\n    start\n    limit\n  }\n    testPlans {\n    total\n    start\n    limit\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n    testExecution {\n    issueId\n    projectId\n    testEnvironments\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n  }\n  }\n}",
                "variables": "{\n  \"testIssueId\": \"string\",\n  \"testExecIssueId\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Test Run by Test issue id and Test Execution issue id.\n===\nThe Query below returns a Test Run\n<pre>\n{\n    <b>getTestRun</b>( testIssueId: \"11165\", testExecIssueId: \"11164\") {\n        id\n        status {\n            name\n            color\n            description\n        }\n        gherkin\n        examples {\n            id\n            status {\n                name\n                color\n                description\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTestRunById",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestrunbyid($id: String) {\n  getTestRunById(id: $id) {\n    id\n    status {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n    unstructured\n    gherkin\n    scenarioType\n    comment\n    startedOn\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    defects\n    steps {\n    id\n    status {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n    action\n    data\n    result\n    customFields {\n    id\n    name\n    value\n  }\n    comment\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    defects\n    actualResult\n  }\n    examples {\n    id\n    status {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n    duration\n  }\n    results {\n    log\n    examples {\n    wasImported\n    duration\n    status {\n    name\n    description\n    color\n  }\n    hooks {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    backgrounds {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    steps {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n  }\n    wasImported\n    duration\n    status {\n    name\n    description\n    color\n    testStatus {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n  }\n    name\n    hooks {\n    keyword\n    name\n    embeddings {\n    filename\n    mimeType\n    data\n    downloadLink\n  }\n    duration\n    error\n    status {\n    name\n    description\n    color\n  }\n    log\n  }\n    backgrounds {\n    keyword\n    name\n    embeddings {\n    filename\n    mimeType\n    data\n    downloadLink\n  }\n    duration\n    error\n    status {\n    name\n    description\n    color\n  }\n    log\n  }\n    steps {\n    keyword\n    name\n    embeddings {\n    filename\n    mimeType\n    data\n    downloadLink\n  }\n    duration\n    error\n    status {\n    name\n    description\n    color\n  }\n    log\n  }\n  }\n    testType {\n    id\n    name\n    kind\n  }\n    executedById\n    assigneeId\n    finishedOn\n    preconditions {\n    total\n    start\n    limit\n    results {\n    preconditionRef {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n    definition\n  }\n  }\n    test {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    unstructured\n    gherkin\n    scenarioType\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    jira\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    testVersion {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n  }\n    testSets {\n    total\n    start\n    limit\n  }\n    testPlans {\n    total\n    start\n    limit\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n    testExecution {\n    issueId\n    projectId\n    testEnvironments\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n  }\n  }\n}",
                "variables": "{\n  \"id\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Test Run by id.\n===\nThe Query below returns a Test Run.\n<pre>\n{\n    <b>getTestRunById</b>( id: \"5acc7ab0a3fe1b6fcdc3c737\") {\n        id\n        status {\n            name\n            color\n            description\n        }\n        steps {\n            action\n            data\n            result\n            attachments {\n                id\n                filename\n            }\n            status {\n                name\n                color\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTestRuns",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestruns($testIssueIds: [String], $testExecIssueIds: [String], $testRunAssignees: [String], $limit: Int!, $start: Int, $modifiedSince: String) {\n  getTestRuns(testIssueIds: $testIssueIds, testExecIssueIds: $testExecIssueIds, testRunAssignees: $testRunAssignees, limit: $limit, start: $start, modifiedSince: $modifiedSince) {\n    total\n    start\n    limit\n    results {\n    id\n    status {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n    unstructured\n    gherkin\n    scenarioType\n    comment\n    startedOn\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    defects\n    steps {\n    id\n    status {\n    name\n    description\n    color\n  }\n    action\n    data\n    result\n    customFields {\n    id\n    name\n    value\n  }\n    comment\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    defects\n    actualResult\n  }\n    examples {\n    id\n    status {\n    name\n    description\n    color\n  }\n    duration\n  }\n    results {\n    log\n    examples {\n    wasImported\n    duration\n  }\n    wasImported\n    duration\n    status {\n    name\n    description\n    color\n  }\n    name\n    hooks {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    backgrounds {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    steps {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n  }\n    testType {\n    id\n    name\n    kind\n  }\n    executedById\n    assigneeId\n    finishedOn\n    preconditions {\n    total\n    start\n    limit\n    results {\n    definition\n  }\n  }\n    test {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n  }\n    testSets {\n    total\n    start\n    limit\n  }\n    testPlans {\n    total\n    start\n    limit\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    testVersion {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n    testExecution {\n    issueId\n    projectId\n    testEnvironments\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testPlans {\n    total\n    start\n    limit\n    warnings\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n  }\n  }\n  }\n}",
                "variables": "{\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"testExecIssueIds\": [\n    \"string\"\n  ],\n  \"testRunAssignees\": [\n    \"string\"\n  ],\n  \"limit\": 100,\n  \"start\": 100,\n  \"modifiedSince\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple Test Runs testIssueIds and/or testExecIssueIds.\n===\nThe query below returns the first 100 Test Runs that match the given testIssueIds and testExecIssueIds.\n<pre>\n{\n    <b>getTestRuns</b>( testIssueIds: [\"10001\", \"10002\"], testExecIssueIds: [\"10001\", \"10002\"], limit: 100 ) {\n        total\n        limit\n        start\n        results {\n            id\n            status {\n                name\n                color\n                description\n            }\n            gherkin\n            examples {\n                id\n                status {\n                name\n                color\n                description\n                }\n            }\n            test {\n                issueId\n            }\n            testExecution {\n                issueId\n            }\n        }\n    }\n}\n</pre>\n=== ===\nThe query below returns the first 100 Test Runs that match the given ids.\n<pre>\n{\n    <b>getTestRuns</b>( testIssueIds: [\"12345\"], limit: 100 ) {\n        total\n        limit\n        start\n        results {\n            id\n            status {\n                name\n                color\n                description\n            }\n            steps {\n                action\n                data\n                result\n                attachments {\n                    id\n                    filename\n                }\n                status {\n                    name\n                    color\n                }\n            }\n            test {\n                issueId\n            }\n            testExecution {\n                issueId\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTestRunsById",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestrunsbyid($ids: [String], $limit: Int!, $start: Int) {\n  getTestRunsById(ids: $ids, limit: $limit, start: $start) {\n    total\n    start\n    limit\n    results {\n    id\n    status {\n    name\n    description\n    final\n    color\n    coverageStatus\n  }\n    unstructured\n    gherkin\n    scenarioType\n    comment\n    startedOn\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    defects\n    steps {\n    id\n    status {\n    name\n    description\n    color\n  }\n    action\n    data\n    result\n    customFields {\n    id\n    name\n    value\n  }\n    comment\n    evidence {\n    id\n    filename\n    storedInJira\n    downloadLink\n    size\n    createdOn\n  }\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    defects\n    actualResult\n  }\n    examples {\n    id\n    status {\n    name\n    description\n    color\n  }\n    duration\n  }\n    results {\n    log\n    examples {\n    wasImported\n    duration\n  }\n    wasImported\n    duration\n    status {\n    name\n    description\n    color\n  }\n    name\n    hooks {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    backgrounds {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n    steps {\n    keyword\n    name\n    duration\n    error\n    log\n  }\n  }\n    testType {\n    id\n    name\n    kind\n  }\n    executedById\n    assigneeId\n    finishedOn\n    preconditions {\n    total\n    start\n    limit\n    results {\n    definition\n  }\n  }\n    test {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n  }\n    testSets {\n    total\n    start\n    limit\n  }\n    testPlans {\n    total\n    start\n    limit\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    testVersion {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n    testExecution {\n    issueId\n    projectId\n    testEnvironments\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testPlans {\n    total\n    start\n    limit\n    warnings\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n  }\n  }\n  }\n}",
                "variables": "{\n  \"ids\": [\n    \"string\"\n  ],\n  \"limit\": 100,\n  \"start\": 100\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple Test Runs by id.\n===\nThe query below returns the first 100 Test Runs that match the given ids.\n<pre>\n{\n    <b>getTestRunsById</b>( ids: [\"5acc7ab0a3fe1b6fcdc3c737\"], limit: 10 ) {\n        total\n        limit\n        start\n        results {\n            id\n            status {\n                name\n                color\n                description\n            }\n            gherkin\n            examples {\n                id\n                status {\n                    name\n                    color\n                    description\n                }\n            }\n            test {\n                issueId\n            }\n            testExecution {\n                issueId\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Test Sets",
      "item": [
        {
          "name": "getDataset",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getdataset($testIssueId: String!, $testExecIssueId: String, $testPlanIssueId: String, $callTestIssueId: String) {\n  getDataset(testIssueId: $testIssueId, testExecIssueId: $testExecIssueId, testPlanIssueId: $testPlanIssueId, callTestIssueId: $callTestIssueId) {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n}",
                "variables": "{\n  \"testIssueId\": \"string\",\n  \"testExecIssueId\": \"string\",\n  \"testPlanIssueId\": \"string\",\n  \"callTestIssueId\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Dataset by its testIssueId.\n===\nThe Query below returns a Dataset.\n<pre>\n{\n    <b>getDataset</b>(testIssueId: \"12345\") {\n        id\n        parameters {\n            name\n            type\n            listValues\n        }\n        rows { \n          order \n          Values\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getDatasets",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getdatasets($testIssueIds: [String], $testExecIssueIds: [String], $testPlanIssueIds: [String]) {\n  getDatasets(testIssueIds: $testIssueIds, testExecIssueIds: $testExecIssueIds, testPlanIssueIds: $testPlanIssueIds) {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n}",
                "variables": "{\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"testExecIssueIds\": [\n    \"string\"\n  ],\n  \"testPlanIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple Datasets based on optional filters.\n===\nThe Query below demonstrates how to retrieve multiple Datasets, including their metadata, parameters\n<pre>\n{\n    <b>getDatasets</b>(\n        testIssueIds: [\"30000\", \"40000\"],\n    ) \n      {\n        id\n        testIssueId  \n        testExecIssueId\n        testPlanIssueId\n        parameters {\n            name\n            type\n            listValues\n        }\n        rows {\n          order\n          Values\n        }\n      }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTestSet",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestset($issueId: String) {\n  getTestSet(issueId: $issueId) {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    jira\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Test Set by issueId\n===\nThe query below returns a test set\n<pre>\n{\n    <b>getTestSet</b> {\n        issueId\n        projectId\n        jira(fields: [\"assignee\", \"reporter\"])\n    }\n}\n</pre>\n===\n===\nThe query below returns the test set with issue id **12345**\n<pre>\n{\n    <b>getTestSet</b>(issueId: \"12345\") {\n        issueId\n        tests(limit: 100) {\n            results {\n                issueId\n                testType {\n                    name\n                }\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTestSets",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettestsets($jql: String, $issueIds: [String], $projectId: String, $limit: Int!, $start: Int, $modifiedSince: String) {\n  getTestSets(jql: $jql, issueIds: $issueIds, projectId: $projectId, limit: $limit, start: $start, modifiedSince: $modifiedSince) {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n  }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLBMOB AND issuetype = Test\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"projectId\": \"26420\",\n  \"limit\": 100,\n  \"start\": 100,\n  \"modifiedSince\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple Test Sets by jql, issueIds or projectId.\n===\nThe query below returns the first 100 Test Sets.\n<pre>\n{\n    <b>getTestSets</b>(limit: 100) {\n        total\n        start\n        limit\n        results {\n            issueId\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n===\n===\nThe query below returns 10 Test Sets that match the provided jql.\n<pre>\n{\n    <b>getTestSets</b>(jql: \"project = 'PC'\", limit: 10) {\n        total\n        start\n        limit\n        results {\n            issueId\n            tests(limit: 10) {\n                results {\n                    issueId\n                    testType {\n                        name\n                    }\n                }\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n<b>Note</b>: If the jql returns more than 100 issues an error will be returned asking the user to refine the jql search.\n==="
          },
          "response": []
        },
        {
          "name": "getProjectSettings",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getprojectsettings($projectIdOrKey: String) {\n  getProjectSettings(projectIdOrKey: $projectIdOrKey) {\n    projectId\n    testEnvironments\n    testCoverageSettings {\n    coverableIssueTypeIds\n    epicIssuesRelation\n    issueSubTasksRelation\n    issueLinkTypeId\n    issueLinkTypeDirection\n  }\n    defectIssueTypes\n    testTypeSettings {\n    testTypes {\n    id\n    name\n    kind\n  }\n    defaultTestTypeId\n  }\n    testStepSettings {\n    fields {\n    id\n    name\n    type\n    required\n    disabled\n    values\n  }\n  }\n    testRunCustomFieldSettings {\n    fields {\n    id\n    name\n    type\n    required\n    values\n  }\n  }\n  }\n}",
                "variables": "{\n  \"projectIdOrKey\": \"26420\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns the Project Settings of a Project.\n===\nThe Query below returns multiple Status\n<pre>\n{\n    <b>getProjectSettings</b> ( projectIdOrKey: \"10000\" ) {\n        projectId,\n        testEnvironments,\n        testCoverageSettings {\n            coverableIssueTypeIds\n            epicIssuesRelation\n            issueSubTasksRelation\n            issueLinkTypeId\n            issueLinkTypeDirection\n        }\n        defectIssueTypes\n        testTypeSettings {\n            testTypes {\n                id\n                name\n                kind\n            }\n            defaultTestTypeId\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "1. Queries - Tests",
      "item": [
        {
          "name": "getTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettest($issueId: String) {\n  getTest(issueId: $issueId) {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    jira\n    status {\n    name\n    description\n    color\n  }\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a Test by issueId.\n===\nThe query below returns a Test.\n<pre>\n{\n    <b>getTest</b> {\n        issueId\n        gherkin\n        jira(fields: [\"assignee\", \"reporter\"])\n    }\n}\n</pre>\n===\n===\nThe query below returns the Test with issue id **12345**.\n<pre>\n{\n    <b>getTest</b>(issueId: \"12345\") {\n        issueId\n        testType {\n            name\n            kind\n        }\n        steps {\n            id\n            data\n            action\n            result\n            attachments {\n                id\n                filename\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getTests",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Gettests($jql: String, $issueIds: [String], $projectId: String, $testType: TestTypeInput, $modifiedSince: String, $limit: Int!, $start: Int, $folder: FolderSearchInput) {\n  getTests(jql: $jql, issueIds: $issueIds, projectId: $projectId, testType: $testType, modifiedSince: $modifiedSince, limit: $limit, start: $start, folder: $folder) {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    unstructured\n    gherkin\n    scenarioType\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    jira\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLBMOB AND issuetype = Test\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"projectId\": \"26420\",\n  \"testType\": {},\n  \"modifiedSince\": \"string\",\n  \"limit\": 100,\n  \"start\": 100,\n  \"folder\": {}\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple tests by jql, issue ids, project id or test type.\n===\nThe query below returns the first 100 tests.\n<pre>\n{\n    <b>getTests</b>(limit: 100) {\n        total\n        start\n        limit\n        results {\n            issueId\n            testType {\n                name\n                kind\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n===\n===\nThe query below returns 10 tests that match the provided jql.\n<pre>\n{\n    <b>getTests</b>(jql: \"project = 'PC'\", limit: 10) {\n        total\n        start\n        limit\n        results {\n            issueId\n            testType {\n                name\n                kind\n            }\n            steps {\n                id\n                data\n                action\n                result\n                attachments {\n                    id\n                    filename\n                }\n                customfields {\n                    id\n                    value\n                }\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n        }\n    }\n}\n</pre>\n<b>Note</b>: If the jql returns more than 100 issues an error will be returned asking the user to refine the jql search.\n==="
          },
          "response": []
        },
        {
          "name": "getExpandedTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getexpandedtest($issueId: String!, $versionId: Int) {\n  getExpandedTest(issueId: $issueId, versionId: $versionId) {\n    issueId\n    versionId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    jira\n    status {\n    name\n    description\n    color\n  }\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns a test (with the call test steps expanded) by issue id and version id.\n===\nThe query below returns the test version 2 of the test with the id \"12345\".\n<pre>\n{\n    <b>getExpandedTest</b>(issueId: \"12345\", testVersionId: \"2\") {\n        issueId\n        testType {\n            name\n            kind\n        }\n        steps {\n            parentTestIssueId\n            calledTestIssueId\n            id\n            data\n            action\n            result\n            attachments {\n                id\n                filename\n            }\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "getExpandedTests",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "query Getexpandedtests($jql: String, $issueIds: [String], $tests: [TestWithVersionInput], $projectId: String, $testType: TestTypeInput, $modifiedSince: String, $limit: Int!, $start: Int, $folder: FolderSearchInput) {\n  getExpandedTests(jql: $jql, issueIds: $issueIds, tests: $tests, projectId: $projectId, testType: $testType, modifiedSince: $modifiedSince, limit: $limit, start: $start, folder: $folder) {\n    total\n    start\n    limit\n    results {\n    issueId\n    versionId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    unstructured\n    gherkin\n    scenarioType\n    lastModified\n  }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    jira\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n  }\n}",
                "variables": "{\n  \"jql\": \"project = MLBMOB AND issuetype = Test\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"tests\": [\n    {}\n  ],\n  \"projectId\": \"26420\",\n  \"testType\": {},\n  \"modifiedSince\": \"string\",\n  \"limit\": 100,\n  \"start\": 100,\n  \"folder\": {}\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Returns multiple tests (with the call test steps expanded) by jql, issue ids, project id or test type.\n===\nThe query below returns the first 100 tests.\n<pre>\n{\n    <b>getExpandedTests</b>(limit: 100) {\n        total\n        start\n        limit\n        results {\n            issueId\n            testType {\n                name\n                kind\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n            warnings\n        }\n    }\n}\n</pre>\n===\n===\nThe query below returns 10 tests that match the provided jql.\n<pre>\n{\n    <b>getExpandedTests</b>(jql: \"project = 'PC'\", limit: 10) {\n        total\n        start\n        limit\n        results {\n            issueId\n            testType {\n                name\n                kind\n            }\n            steps {\n                parentTestIssueId\n                calledTestIssueId\n                id\n                data\n                action\n                result\n                attachments {\n                    id\n                    filename\n                }\n                customfields {\n                    id\n                    value\n                }\n            }\n            jira(fields: [\"assignee\", \"reporter\"])\n            warnings\n        }\n    }\n}\n</pre>\n<b>Note</b>: If the jql returns more than 100 issues an error will be returned asking the user to refine the jql search.\n===\n===\nThe query below returns the tests of each test version.\n<pre>\n{\n    <b>getExpandedTests</b>(tests:[{ issueId:\"12345\", testVersionId: \"1\" }, { issueId:\"54321\", testVersionId: \"2\" }]) {\n        total\n        start\n        limit\n        results {\n            issueId\n            testType {\n                name\n                kind\n            }\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Folders",
      "item": [
        {
          "name": "createFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Createfolder($projectId: String, $testPlanId: String, $path: String!, $testIssueIds: [String], $issueIds: [String]) {\n  createFolder(projectId: $projectId, testPlanId: $testPlanId, path: $path, testIssueIds: $testIssueIds, issueIds: $issueIds) {\n    folder {\n    name\n    path\n    testsCount\n    preconditionsCount\n    issuesCount\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"testPlanId\": \"string\",\n  \"path\": \"/\",\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"issueIds\": [\n    \"12345\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to create a new Folder.\n===\nThe mutation below will create a new Folder.\n<pre>\nmutation {\n    <b>createFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}\n</pre>\n===\n===\nThe mutation below will create a new Folder and add tests to it.\n<pre>\nmutation {\n    <b>createFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\",\n        testIssueIds: [\"10002\",\"12324\",\"12345\"]\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}\n</pre>\n===\n===\nThe mutation below will create a new Folder and add tests and/or preconditions to it.\n<pre>\nmutation {\n    <b>createFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\",\n        issueIds: [\"10002\",\"12324\",\"12345\"]\n    ) {\n        folder {\n            name\n            path\n            testsCount\n            issuesCount\n            preconditionsCount\n        }\n        warnings\n    }\n}\n</pre>\n<b>Note</b>: Use createFolder with <b>testIssueIds</b> (in which all ids must be from Tests)\nOR with <b>issueIds</b> (which can be eiter Test ids and/or Precondition ids), but not with both.\n==="
          },
          "response": []
        },
        {
          "name": "deleteFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Deletefolder($projectId: String, $testPlanId: String, $path: String!) {\n  deleteFolder(projectId: $projectId, testPlanId: $testPlanId, path: $path) \n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"testPlanId\": \"string\",\n  \"path\": \"/\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to delete a Folder.\n===\nThe mutation below will delete a Folder.\n<pre>\nmutation {\n    <b>deleteFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\"\n    )\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "renameFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Renamefolder($projectId: String, $testPlanId: String, $path: String!, $newName: String!) {\n  renameFolder(projectId: $projectId, testPlanId: $testPlanId, path: $path, newName: $newName) {\n    folder {\n    name\n    path\n    testsCount\n    preconditionsCount\n    issuesCount\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"testPlanId\": \"string\",\n  \"path\": \"/\",\n  \"newName\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to rename a Folder.\n===\nThe mutation below will rename a Folder.\n<pre>\nmutation {\n    <b>renameFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\",\n        newName: \"Junit\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "moveFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Movefolder($projectId: String, $testPlanId: String, $path: String!, $destinationPath: String!, $index: Int) {\n  moveFolder(projectId: $projectId, testPlanId: $testPlanId, path: $path, destinationPath: $destinationPath, index: $index) {\n    folder {\n    name\n    path\n    testsCount\n    preconditionsCount\n    issuesCount\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"testPlanId\": \"string\",\n  \"path\": \"/\",\n  \"destinationPath\": \"string\",\n  \"index\": 100\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to move a Folder.\n===\nThe mutation below will move a Folder.\n<pre>\nmutation {\n    <b>moveFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\",\n        destinationPath: \"/testType\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestsToFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addteststofolder($projectId: String, $testPlanId: String, $path: String!, $testIssueIds: [String]!, $index: Int) {\n  addTestsToFolder(projectId: $projectId, testPlanId: $testPlanId, path: $path, testIssueIds: $testIssueIds, index: $index) {\n    folder {\n    name\n    path\n    testsCount\n    preconditionsCount\n    issuesCount\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"testPlanId\": \"string\",\n  \"path\": \"/\",\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"index\": 100\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add tests to a Folder.\n===\nThe mutation below will add tests to a Folder.\n<pre>\nmutation {\n    <b>addTestsToFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\",\n        testIssueIds: [\"10002\",\"12324\",\"12345\"]\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addIssuesToFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addissuestofolder($projectId: String!, $path: String!, $issueIds: [String]!, $index: Int) {\n  addIssuesToFolder(projectId: $projectId, path: $path, issueIds: $issueIds, index: $index) {\n    folder {\n    name\n    path\n    testsCount\n    preconditionsCount\n    issuesCount\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"path\": \"/\",\n  \"issueIds\": [\n    \"12345\"\n  ],\n  \"index\": 100\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add issues to a Folder.\n===\nThe mutation below will add issues to a Folder.\n<pre>\nmutation {\n    <b>addIssuesToFolder</b>(\n        projectId: \"10000\",\n        path: \"/generic\",\n        issueIds: [\"10002\",\"12324\",\"12345\"]\n    ) {\n        folder {\n            name\n            path\n            issuesCount\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestsFromFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestsfromfolder($projectId: String, $testPlanId: String, $testIssueIds: [String]!) {\n  removeTestsFromFolder(projectId: $projectId, testPlanId: $testPlanId, testIssueIds: $testIssueIds) \n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"testPlanId\": \"string\",\n  \"testIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove tests from Folder.\n===\nThe mutation below will remove tests from a Folder.\n<pre>\nmutation {\n    <b>removeTestsFromFolder</b>(\n        projectId: \"10000\",\n        testIssueIds: [\"10002\",\"12324\",\"12345\"]\n    )\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeIssuesFromFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removeissuesfromfolder($projectId: String!, $issueIds: [String]!) {\n  removeIssuesFromFolder(projectId: $projectId, issueIds: $issueIds) \n}",
                "variables": "{\n  \"projectId\": \"26420\",\n  \"issueIds\": [\n    \"12345\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove issues from Folder.\n===\nThe mutation below will remove issues from a Folder.\n<pre>\nmutation {\n    <b>removeIssuesFromFolder</b>(\n        projectId: \"10000\",\n        issueIds: [\"10002\",\"12324\",\"12345\"]\n    )\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestfolder($issueId: String!, $folderPath: String!) {\n  updateTestFolder(issueId: $issueId, folderPath: $folderPath) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"folderPath\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used update the Test folder on the Test Repository.\n===\nThe mutation below will add the test to \"Component/UI\" folder.\n<pre>\nmutation {\n    <b>updateTestFolder</b>(\n        issueId: \"12345\",\n        folderPath: \"/Component/UI\"\n    )\n}\n</pre>\nThe mutation below will move the Test to the root.\n<pre>\nmutation {\n    <b>updateTestFolder</b>(\n        issueId: \"12345\",\n        folderPath: \"/\"\n    )\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updatePreconditionFolder",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatepreconditionfolder($issueId: String!, $folderPath: String!) {\n  updatePreconditionFolder(issueId: $issueId, folderPath: $folderPath) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"folderPath\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used update the precondition folder on the Test Repository.\n===\nThe mutation below will add the precondition to \"Component/UI\" folder.\n<pre>\nmutation {\n    <b>updatePreconditionFolder</b>(\n        issueId: \"12345\",\n        folderPath: \"/Component/UI\"\n    )\n}\n</pre>\nThe mutation below will move the Precondition to the root.\n<pre>\nmutation {\n    <b>updatePreconditionFolder</b>(\n        issueId: \"12345\",\n        folderPath: \"/\"\n    )\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Other",
      "item": [
        {
          "name": "updateIterationStatus",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updateiterationstatus($testRunId: String!, $iterationRank: String!, $status: String!) {\n  updateIterationStatus(testRunId: $testRunId, iterationRank: $iterationRank, status: $status) {\n    warnings\n  }\n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"iterationRank\": \"string\",\n  \"status\": \"PASS\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the status of a Test Run iteration.\n===\nThe mutation below updates the status of a Test Run iteration.\n<pre>\nmutation {\n    <b>updateIterationStatus</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        iterationRank: \"0\",\n        status: \"PASSED\"\n    ) {\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Preconditions",
      "item": [
        {
          "name": "createPrecondition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Createprecondition($preconditionType: UpdatePreconditionTypeInput, $definition: String, $testIssueIds: [String], $tests: [TestWithVersionInput], $folderPath: String, $jira: JSON!) {\n  createPrecondition(preconditionType: $preconditionType, definition: $definition, testIssueIds: $testIssueIds, tests: $tests, folderPath: $folderPath, jira: $jira) {\n    precondition {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    unstructured\n    gherkin\n    scenarioType\n    lastModified\n  }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"preconditionType\": {\n    \"id\": \"string\",\n    \"name\": \"Test Name\"\n  },\n  \"definition\": \"string\",\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"tests\": [\n    {\n      \"issueId\": \"12345\",\n      \"versionId\": 100\n    }\n  ],\n  \"folderPath\": \"string\",\n  \"jira\": {\n    \"key\": \"value\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to create a new Precondition.\n===\nThe mutation below will create a new Precondition.\n<pre>\nmutation {\n    <b>createPrecondition</b>(\n        preconditionType: { name: \"Generic\" }\n        definition: \"Turn on calculator.\"\n        jira: {\n            fields: { summary:\"Turn on calculator\", project: {key: \"CALC\"} }\n        }\n    ) {\n        precondition {\n            issueId\n            preconditionType {\n                name\n            }\n            definition\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updatePrecondition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updateprecondition($issueId: String!, $data: UpdatePreconditionInput) {\n  updatePrecondition(issueId: $issueId, data: $data) {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"data\": {\n    \"preconditionType\": {\n      \"id\": \"string\",\n      \"name\": \"Test Name\"\n    },\n    \"definition\": \"string\",\n    \"folderPath\": \"string\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update a Precondition\n===\nThe mutation below will update the Precondition with id \"49137\"\n<pre>\nmutation {\n    <b>updatePrecondition</b>(\n        issueId: \"49137\",\n        data: { preconditionType: {name: \"Manual\" }, definition: \"Turn on calculator\" }\n    ) {\n        issueId\n        preconditionType {\n            kind\n            name\n        }\n        definition\n    }\n}\n</pre>\n===\n===\nThe mutation below will update the Precondition with id \"12345\" and move it to the specified folder\n<pre>\nmutation {\n    <b>updatePrecondition</b>(\n        issueId: \"12345\",\n        data: { folderPath: \"/generic\" }\n    ) {\n        issueId\n        preconditionType {\n            kind\n            name\n        }\n        definition\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "deletePrecondition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Deleteprecondition($issueId: String!) {\n  deletePrecondition(issueId: $issueId) \n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to delete a Precondition\n===\nThe mutation below will delete the Precondition with issue id \"12345\"\n<pre>\nmutation {\n    <b>deletePrecondition</b>(issueId: \"12345\")\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Test Executions",
      "item": [
        {
          "name": "addTestExecutionsToTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addtestexecutionstotest($issueId: String!, $versionId: Int, $testExecIssueIds: [String]!) {\n  addTestExecutionsToTest(issueId: $issueId, versionId: $versionId, testExecIssueIds: $testExecIssueIds) {\n    addedTestExecutions\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100,\n  \"testExecIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Test Executions to the Test.\n===\nThe mutation below will associate the Test Execution with issue id \"54321\" to the Test \"12345\".\n<pre>\nmutation {\n    <b>addTestExecutionsToTest</b>(\n        issueId: \"12345\",\n        testExecIssueIds: [\"54321\"]\n    ) {\n        addedTestExecutions\n        warning\n    }\n}\n</pre>\n===\n===\nThe mutation below will associate the Test Execution with issue id \"54321\" to version 3 of the Test \"12345\".\n<pre>\nmutation {\n    <b>addTestExecutionsToTest</b>(\n        issueId: \"12345\",\n        versionId: 3,\n        testExecIssueIds: [\"54321\"]\n    ) {\n        addedTestExecutions\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestExecutionsFromTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestexecutionsfromtest($issueId: String!, $testExecIssueIds: [String]!) {\n  removeTestExecutionsFromTest(issueId: $issueId, testExecIssueIds: $testExecIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testExecIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Test Executions from the Test.\n===\nThe mutation below will remove the Test Executions with issue id \"54321\" and \"67890\" from the Test \"12345\".\n<pre>\nmutation {\n    <b>removeTestExecutionsFromTest</b>(issueId: \"12345\", testExecIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestExecutionsToTestPlan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addtestexecutionstotestplan($issueId: String!, $testExecIssueIds: [String]!) {\n  addTestExecutionsToTestPlan(issueId: $issueId, testExecIssueIds: $testExecIssueIds) {\n    addedTestExecutions\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testExecIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Test Executions to the Test Plan.\n===\nThe mutation below will associate the Test Execution with issue id \"54321\" to the test Plan \"12345\".\n<pre>\nmutation {\n    <b>addTestExecutionsToTestPlan</b>(\n        issueId: \"12345\",\n        testExecIssueIds: [\"54321\"]\n    ) {\n        addedTestExecutions\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestExecutionsFromTestPlan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestexecutionsfromtestplan($issueId: String!, $testExecIssueIds: [String]!) {\n  removeTestExecutionsFromTestPlan(issueId: $issueId, testExecIssueIds: $testExecIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testExecIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Test Executions from the Test Plan.\n===\nThe mutation below will remove the Test executions with issue id \"54321\" and \"67890\" from the Test Plan \"12345\".\n<pre>\nmutation {\n    <b>removeTestExecutionsFromTestPlan</b>(issueId: \"12345\", testExecIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "createTestExecution",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Createtestexecution($testIssueIds: [String], $tests: [TestWithVersionInput], $testEnvironments: [String], $jira: JSON!) {\n  createTestExecution(testIssueIds: $testIssueIds, tests: $tests, testEnvironments: $testEnvironments, jira: $jira) {\n    testExecution {\n    issueId\n    projectId\n    testEnvironments\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n  }\n    createdTestEnvironments\n    warnings\n  }\n}",
                "variables": "{\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"tests\": [\n    {\n      \"issueId\": \"12345\",\n      \"versionId\": 100\n    }\n  ],\n  \"testEnvironments\": [\n    \"string\"\n  ],\n  \"jira\": {\n    \"key\": \"value\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to create a new Test Execution.\n===\nThe mutation below will create a new Test Execution.\n<pre>\nmutation {\n    <b>createTestExecution</b>(\n        testIssueIds: [\"54321\"]\n        testEnvironments: [\"android\"]\n        jira: {\n            fields: { summary: \"Test Execution for CALC-123\", project: {key: \"CALC\"} }\n        }\n    ) {\n        testExecution {\n            issueId\n            jira(fields: [\"key\"])\n        }\n        warnings\n        createdTestEnvironments\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "deleteTestExecution",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Deletetestexecution($issueId: String!) {\n  deleteTestExecution(issueId: $issueId) \n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to delete a Test Execution.\n===\nThe mutation below will delete the Test Execution with id \"12345\".\n<pre>\nmutation {\n    <b>deleteTestExecution</b>(issueId: \"12345\")\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestsToTestExecution",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addteststotestexecution($issueId: String!, $testIssueIds: [String], $tests: [TestWithVersionInput]) {\n  addTestsToTestExecution(issueId: $issueId, testIssueIds: $testIssueIds, tests: $tests) {\n    addedTests\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"tests\": [\n    {\n      \"issueId\": \"12345\",\n      \"versionId\": 100\n    }\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Tests to the Test Execution. One of <b>testIssueIds</b> or <b>tests</b> is required.\n===\nThe mutation below will associate the test with issue id \"54321\" to the Test execution \"12345\".\n<pre>\nmutation {\n    <b>addTestsToTestExecution</b>(\n        issueId: \"12345\",\n        testIssueIds: [\"54321\"]\n    ) {\n        addedTests\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestsFromTestExecution",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestsfromtestexecution($issueId: String!, $testIssueIds: [String]!) {\n  removeTestsFromTestExecution(issueId: $issueId, testIssueIds: $testIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Tests from the Test Execution.\n===\nThe mutation below will remove the Tests with issue id \"54321\" and \"67890\" from the Test Execution \"12345\".\n<pre>\nmutation {\n    <b>removeTestsFromTestExecution</b>(issueId: \"12345\", testIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestEnvironmentsToTestExecution",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addtestenvironmentstotestexecution($issueId: String!, $testEnvironments: [String]!) {\n  addTestEnvironmentsToTestExecution(issueId: $issueId, testEnvironments: $testEnvironments) {\n    associatedTestEnvironments\n    createdTestEnvironments\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testEnvironments\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add Test Environments to the Test Execution.\n===\nThe mutation below will add the test Environments \"android\" and \"ios\" to the Test execution \"12345\".\n<pre>\nmutation {\n    <b>addTestEnvironmentsToTestExecution</b>(\n        issueId: \"12345\",\n        testEnvironments: [\"android\", \"ios\"]\n    ) {\n        associatedTestEnvironments\n        createdTestEnvironments\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestEnvironmentsFromTestExecution",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestenvironmentsfromtestexecution($issueId: String!, $testEnvironments: [String]!) {\n  removeTestEnvironmentsFromTestExecution(issueId: $issueId, testEnvironments: $testEnvironments) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testEnvironments\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Test Environments from the Test Execution.\n===\nThe mutation below will remoive the Test Environments \"android\" and \"ios\" from the Test execution \"12345\".\n<pre>\nmutation {\n    <b>removeTestEnvironmentsFromTestExecution</b>(\n        issueId: \"12345\",\n        testEnvironments: [\"android\", \"ios\"]\n    )\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Test Plans",
      "item": [
        {
          "name": "addTestPlansToTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addtestplanstotest($issueId: String!, $testPlanIssueIds: [String]!) {\n  addTestPlansToTest(issueId: $issueId, testPlanIssueIds: $testPlanIssueIds) {\n    addedTestPlans\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testPlanIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Test Plans to the Test.\n===\nThe mutation below will associate the Test Plan with issue id \"54321\" to the test \"12345\".\n<pre>\nmutation {\n    <b>addTestPlansToTest</b>(\n        issueId: \"12345\",\n        testPlanIssueIds: [\"54321\"]\n    ) {\n        addedTestPlans\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestPlansFromTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestplansfromtest($issueId: String!, $testPlanIssueIds: [String]!) {\n  removeTestPlansFromTest(issueId: $issueId, testPlanIssueIds: $testPlanIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testPlanIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Test Plans from the Test.\n===\nThe mutation below will remove the Test Plans with issue id \"54321\" and \"67890\" from the Test \"12345\".\n<pre>\nmutation {\n    <b>removeTestPlansFromTest</b>(issueId: \"12345\", testPlanIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "createTestPlan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Createtestplan($savedFilter: String, $testIssueIds: [String], $jira: JSON!) {\n  createTestPlan(savedFilter: $savedFilter, testIssueIds: $testIssueIds, jira: $jira) {\n    testPlan {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"savedFilter\": \"string\",\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"jira\": {\n    \"key\": \"value\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to create a new Test Plan.\n===\nThe mutation below will create a new Test Plan.\n<pre>\nmutation {\n    <b>createTestPlan</b>(\n        testIssueIds: [\"54321\"]\n        jira: {\n            fields: { summary: \"Test Plan for v1.0\", project: {key: \"CALC\"} }\n        }\n    ) {\n        testPlan {\n            issueId\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "deleteTestPlan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Deletetestplan($issueId: String!) {\n  deleteTestPlan(issueId: $issueId) \n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to delete a Test Plan.\n===\nThe mutation below will delete the Test Plan with id \"12345\".\n<pre>\nmutation {\n    <b>deleteTestPlan</b>(issueId: \"12345\")\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestsToTestPlan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addteststotestplan($issueId: String!, $testIssueIds: [String]!) {\n  addTestsToTestPlan(issueId: $issueId, testIssueIds: $testIssueIds) {\n    addedTests\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Tests to the Test Plan.\n===\nThe mutation below will associate the test with issue id \"54321\" to the Test Plan \"12345\".\n<pre>\nmutation {\n    <b>addTestsToTestPlan</b>(\n        issueId: \"12345\",\n        testIssueIds: [\"54321\"]\n    ) {\n        addedTests\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestsFromTestPlan",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestsfromtestplan($issueId: String!, $testIssueIds: [String]!) {\n  removeTestsFromTestPlan(issueId: $issueId, testIssueIds: $testIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Tests from the Test Plan.\n===\nThe mutation below will remove the Tests with id \"54321\" and \"67890\" from the Test Plan \"12345\".\n<pre>\nmutation {\n    <b>removeTestsFromTestPlan</b>(issueId: \"12345\", testIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Test Runs",
      "item": [
        {
          "name": "updateTestRunStatus",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestrunstatus($id: String!, $status: String!) {\n  updateTestRunStatus(id: $id, status: $status) \n}",
                "variables": "{\n  \"id\": \"string\",\n  \"status\": \"PASS\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the status of a Test Run.\n===\nThe mutation below updates the status of a Test Run.\n<pre>\nmutation {\n    <b>updateTestRunStatus</b>( id: \"5acc7ab0a3fe1b6fcdc3c737\", status: \"PASSED\")\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestRunComment",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestruncomment($id: String!, $comment: String!) {\n  updateTestRunComment(id: $id, comment: $comment) \n}",
                "variables": "{\n  \"id\": \"string\",\n  \"comment\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the comment of a Test Run.\n===\nThe mutation below updates the comment of a Test Run.\n<pre>\nmutation {\n    <b>updateTestRunComment</b>( id: \"5acc7ab0a3fe1b6fcdc3c737\", comment: \"Everything is OK.\")\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestRun",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestrun($id: String!, $comment: String, $startedOn: String, $finishedOn: String, $assigneeId: String, $executedById: String, $customFields: [CustomFieldInput]) {\n  updateTestRun(id: $id, comment: $comment, startedOn: $startedOn, finishedOn: $finishedOn, assigneeId: $assigneeId, executedById: $executedById, customFields: $customFields) {\n    warnings\n  }\n}",
                "variables": "{\n  \"id\": \"string\",\n  \"comment\": \"string\",\n  \"startedOn\": \"string\",\n  \"finishedOn\": \"string\",\n  \"assigneeId\": \"string\",\n  \"executedById\": \"string\",\n  \"customFields\": [\n    {\n      \"id\": \"string\",\n      \"value\": {\n        \"key\": \"value\"\n      }\n    }\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update a Test Run.\n===\nThe mutation below updates a Test Run.\n<pre>\nmutation {\n    <b>updateTestRun</b>( id: \"5acc7ab0a3fe1b6fcdc3c737\", comment: \"Everything is OK.\", startedOn: \"2020-03-09T10:35:09Z\", finishedOn: \"2020-04-09T10:35:09Z\", assigneeId: \"e5983db2-90f7-4135-a96f-46907e72290e\", executedById: \"e5983db2-90f7-4135-a96f-46907e72290e\") {\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addDefectsToTestRun",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Adddefectstotestrun($id: String!, $issues: [String]!) {\n  addDefectsToTestRun(id: $id, issues: $issues) {\n    addedDefects\n    warnings\n  }\n}",
                "variables": "{\n  \"id\": \"string\",\n  \"issues\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add defects to a Test Run.\n===\nThe mutation below adds 2 defects to the Test Run.\n<pre>\nmutation {\n    <b>addDefectsToTestRun</b>( id: \"5acc7ab0a3fe1b6fcdc3c737\", issues: [\"XRAY-1234\", \"12345\"]) {\n        addedDefects\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeDefectsFromTestRun",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removedefectsfromtestrun($id: String!, $issues: [String]!) {\n  removeDefectsFromTestRun(id: $id, issues: $issues) \n}",
                "variables": "{\n  \"id\": \"string\",\n  \"issues\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove defects from a Test Run.\n===\nThe mutation below removes 2 defects from the Test Run.\n<pre>\nmutation {\n    <b>removeDefectsFromTestRun</b>( id: \"5acc7ab0a3fe1b6fcdc3c737\", issues: [\"XRAY-1234\", \"12345\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addEvidenceToTestRun",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addevidencetotestrun($id: String!, $evidence: [AttachmentDataInput]!) {\n  addEvidenceToTestRun(id: $id, evidence: $evidence) {\n    addedEvidence\n    warnings\n  }\n}",
                "variables": "{\n  \"id\": \"string\",\n  \"evidence\": [\n    {\n      \"filename\": \"Test Name\",\n      \"mimeType\": \"string\",\n      \"data\": \"string\",\n      \"attachmentId\": \"string\"\n    }\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add evidence to a Test Run.\n===\nThe mutation below adds an evidence to the Test Run.\n<pre>\nmutation {\n    <b>addEvidenceToTestRun</b>(\n        id: \"5acc7ab0a3fe1b6fcdc3c737\",\n        evidence: [\n            {\n                filename: \"evidence.txt\"\n                mimeType: \"text/plain\"\n                data: \"SGVsbG8gV29ybGQ=\"\n            }\n        ]\n    ) {\n        addedEvidence\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeEvidenceFromTestRun",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removeevidencefromtestrun($id: String!, $evidenceIds: [String], $evidenceFilenames: [String]) {\n  removeEvidenceFromTestRun(id: $id, evidenceIds: $evidenceIds, evidenceFilenames: $evidenceFilenames) {\n    removedEvidence\n    warnings\n  }\n}",
                "variables": "{\n  \"id\": \"string\",\n  \"evidenceIds\": [\n    \"string\"\n  ],\n  \"evidenceFilenames\": [\n    \"Test Name\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove evidence from a Test Run.\n===\nThe mutation below removes an evidence from the Test Run.\n<pre>\nmutation {\n    <b>removeEvidenceFromTestRun</b>(\n        id: \"5acc7ab0a3fe1b6fcdc3c737\",\n        evidenceFilenames: [\"evidence.txt\"]\n    ) {\n        removedEvidence\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestRunStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestrunstep($testRunId: String!, $stepId: String!, $updateData: UpdateTestRunStepInput!, $iterationRank: String) {\n  updateTestRunStep(testRunId: $testRunId, stepId: $stepId, updateData: $updateData, iterationRank: $iterationRank) {\n    addedDefects\n    removedDefects\n    addedEvidence\n    removedEvidence\n    warnings\n  }\n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"stepId\": \"string\",\n  \"updateData\": {\n    \"comment\": \"string\",\n    \"status\": \"PASS\",\n    \"evidence\": {\n      \"add\": [\n        {\n          \"filename\": \"Test Name\",\n          \"mimeType\": \"string\",\n          \"data\": \"string\",\n          \"attachmentId\": \"string\"\n        }\n      ],\n      \"removeIds\": [\n        \"string\"\n      ],\n      \"removeFilenames\": [\n        \"Test Name\"\n      ]\n    },\n    \"defects\": {\n      \"add\": [\n        \"string\"\n      ],\n      \"remove\": [\n        \"string\"\n      ]\n    },\n    \"actualResult\": \"string\"\n  },\n  \"iterationRank\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the Test Run Step.\n===\nThe mutation below will change the status, update the comment and add a defect to the Test Run Step.\n<pre>\nmutation {\n    <b>updateTestRunStep</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        stepId: \"316eb258-10bb-40c0-ae40-ab76004cc505\",\n        updateData: {\n            comment: \"Step failed\"\n            status: \"FAILED\"\n            defects: {\n                add: [\"12345\"]\n            }\n        }\n    ) {\n        addedDefects\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addEvidenceToTestRunStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addevidencetotestrunstep($testRunId: String!, $stepId: String!, $evidence: [AttachmentDataInput], $iterationRank: String) {\n  addEvidenceToTestRunStep(testRunId: $testRunId, stepId: $stepId, evidence: $evidence, iterationRank: $iterationRank) {\n    addedEvidence\n    warnings\n  }\n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"stepId\": \"string\",\n  \"evidence\": [\n    {\n      \"filename\": \"Test Name\",\n      \"mimeType\": \"string\",\n      \"data\": \"string\",\n      \"attachmentId\": \"string\"\n    }\n  ],\n  \"iterationRank\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add evidence to a Test Run Step.\n===\nThe mutation below adds an evidence to the Test Run Step.\n<pre>\nmutation {\n    <b>addEvidenceToTestRunStep</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        stepId: \"316eb258-10bb-40c0-ae40-ab76004cc505\",\n        evidence: [\n            {\n                filename: \"evidence.txt\"\n                mimeType: \"text/plain\"\n                data: \"SGVsbG8gV29ybGQ=\"\n            }\n        ]\n    ) {\n        addedEvidence\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeEvidenceFromTestRunStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removeevidencefromtestrunstep($testRunId: String!, $stepId: String!, $iterationRank: String, $evidenceIds: [String], $evidenceFilenames: [String]) {\n  removeEvidenceFromTestRunStep(testRunId: $testRunId, stepId: $stepId, iterationRank: $iterationRank, evidenceIds: $evidenceIds, evidenceFilenames: $evidenceFilenames) {\n    removedEvidence\n    warnings\n  }\n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"stepId\": \"string\",\n  \"iterationRank\": \"string\",\n  \"evidenceIds\": [\n    \"string\"\n  ],\n  \"evidenceFilenames\": [\n    \"Test Name\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove evidence from a Test Run Step.\n===\nThe mutation below removes an evidence from the Test Run Step.\n<pre>\nmutation {\n    <b>removeEvidenceFromTestRunStep</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        stepId: \"316eb258-10bb-40c0-ae40-ab76004cc505\",\n        evidenceFilenames: [\"evidence.txt\"]\n    ) {\n        removedEvidence\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addDefectsToTestRunStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Adddefectstotestrunstep($testRunId: String!, $stepId: String!, $issues: [String], $iterationRank: String) {\n  addDefectsToTestRunStep(testRunId: $testRunId, stepId: $stepId, issues: $issues, iterationRank: $iterationRank) {\n    addedDefects\n    warnings\n  }\n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"stepId\": \"string\",\n  \"issues\": [\n    \"string\"\n  ],\n  \"iterationRank\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add defects to a Test Run Step.\n===\nThe mutation below adds 2 defects to the Test Run Step.\n<pre>\nmutation {\n    <b>addDefectsToTestRunStep</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        stepId: \"316eb258-10bb-40c0-ae40-ab76004cc505\",\n        issues: [\"XRAY-1234\", \"12345\"]\n    ) {\n        addedDefects\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeDefectsFromTestRunStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removedefectsfromtestrunstep($testRunId: String!, $stepId: String!, $issues: [String]!, $iterationRank: String) {\n  removeDefectsFromTestRunStep(testRunId: $testRunId, stepId: $stepId, issues: $issues, iterationRank: $iterationRank) {\n    removedDefects\n    warnings\n  }\n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"stepId\": \"string\",\n  \"issues\": [\n    \"string\"\n  ],\n  \"iterationRank\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove defects from a Test Run.\n===\nThe mutation below removes 2 defects from the Test Run.\n<pre>\nmutation {\n    <b>removeDefectsFromTestRunStep</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        stepId: \"316eb258-10bb-40c0-ae40-ab76004cc505\",\n        issues: [\"XRAY-1234\", \"12345\"]\n    ) {\n        removedDefects\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestRunStepComment",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestrunstepcomment($testRunId: String!, $stepId: String!, $comment: String!, $iterationRank: String) {\n  updateTestRunStepComment(testRunId: $testRunId, stepId: $stepId, comment: $comment, iterationRank: $iterationRank) \n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"stepId\": \"string\",\n  \"comment\": \"string\",\n  \"iterationRank\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the comment of a Test Run Step.\n===\nThe mutation below updates the comment of a Test Run Step.\n<pre>\nmutation {\n    <b>updateTestRunStepComment</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        stepId: \"316eb258-10bb-40c0-ae40-ab76004cc505\",\n        comment: \"This step is OK.\"\n    )\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestRunStepStatus",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestrunstepstatus($testRunId: String!, $stepId: String!, $status: String!, $iterationRank: String) {\n  updateTestRunStepStatus(testRunId: $testRunId, stepId: $stepId, status: $status, iterationRank: $iterationRank) {\n    warnings\n  }\n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"stepId\": \"string\",\n  \"status\": \"PASS\",\n  \"iterationRank\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the status of a Test Run Step.\n===\nThe mutation below updates the status of a Test Run Step.\n<pre>\nmutation {\n    <b>updateTestRunStepStatus</b>(\n        testRunId: \"5e8489c05f200f3cd45bbaf0\",\n        stepId: \"316eb258-10bb-40c0-ae40-ab76004cc505\",\n        status: \"PASSED\"\n    ) {\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestRunExampleStatus",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetestrunexamplestatus($exampleId: String!, $status: String!) {\n  updateTestRunExampleStatus(exampleId: $exampleId, status: $status) {\n    warnings\n  }\n}",
                "variables": "{\n  \"exampleId\": \"string\",\n  \"status\": \"PASS\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the status of a Test Run Example.\n===\nThe mutation below updates the status of a Test Run example.\n<pre>\nmutation {\n    <b>updateTestRunExampleStatus</b>(\n        exampleId: \"5bbd8ab0a3fe1b6fcdc3c737\",\n        status: \"PASSED\"\n    ) {\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Test Sets",
      "item": [
        {
          "name": "addTestSetsToTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addtestsetstotest($issueId: String!, $testSetIssueIds: [String]!) {\n  addTestSetsToTest(issueId: $issueId, testSetIssueIds: $testSetIssueIds) {\n    addedTestSets\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testSetIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Test Sets to the Test.\n===\nThe mutation below will associate the test set with issue id \"54321\" to the test \"12345\".\n<pre>\nmutation {\n    <b>addTestSetsToTest</b>(\n        issueId: \"12345\",\n        testSetIssueIds: [\"54321\"]\n    ) {\n        addedTestSets\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestSetsFromTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestsetsfromtest($issueId: String!, $testSetIssueIds: [String]!) {\n  removeTestSetsFromTest(issueId: $issueId, testSetIssueIds: $testSetIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testSetIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Test Sets from the Test.\n===\nThe mutation below will remove the Test Sets with issue id \"54321\" and \"67890\" from the test \"12345\".\n<pre>\nmutation {\n    <b>removeTestSetsFromTest</b>(issueId: \"12345\", testSetIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "createTestSet",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Createtestset($testIssueIds: [String], $jira: JSON!) {\n  createTestSet(testIssueIds: $testIssueIds, jira: $jira) {\n    testSet {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    jira\n    lastModified\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"jira\": {\n    \"key\": \"value\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to create a new Test Set.\n===\nThe mutation below will create a new Test Set.\n<pre>\nmutation {\n    <b>createTestSet</b>(\n        testIssueIds: [\"54321\"]\n        jira: {\n            fields: { summary: \"Test Set for Generic Tests\", project: {key: \"CALC\"} }\n        }\n    ) {\n        testSet {\n            issueId\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "deleteTestSet",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Deletetestset($issueId: String!) {\n  deleteTestSet(issueId: $issueId) \n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to delete a Test Set\n===\nThe mutation below will delete the Test Set with issue id \"12345\".\n<pre>\nmutation {\n    <b>deleteTestSet</b>(issueId: \"12345\")\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestsToTestSet",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addteststotestset($issueId: String!, $testIssueIds: [String]!) {\n  addTestsToTestSet(issueId: $issueId, testIssueIds: $testIssueIds) {\n    addedTests\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Tests to the Test Set.\n===\nThe mutation below will associate the test with issue id \"54321\" to the Test Set \"12345\".\n<pre>\nmutation {\n    <b>addTestsToTestSet</b>(\n        issueId: \"12345\",\n        testIssueIds: [\"54321\"]\n    ) {\n        addedTests\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestsFromTestSet",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestsfromtestset($issueId: String!, $testIssueIds: [String]!) {\n  removeTestsFromTestSet(issueId: $issueId, testIssueIds: $testIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Tests from the Test Set.\n===\nThe mutation below will remove the Tests with issue id \"54321\" and \"67890\" from the test set \"12345\".\n<pre>\nmutation {\n    <b>removeTestsFromTestSet</b>(issueId: \"12345\", testIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "resetTestRun",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Resettestrun($id: String!) {\n  resetTestRun(id: $id) \n}",
                "variables": "{\n  \"id\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to reset the Test Run. This will load the new test definition and delete the current execution data.\n===\nThe mutation below resets the Test Run.\n<pre>\nmutation {\n    <b>resetTestRun</b>( id: \"5acc7ab0a3fe1b6fcdc3c737\")\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "setTestRunTimer",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Settestruntimer($testRunId: String!, $running: Boolean, $reset: Boolean) {\n  setTestRunTimer(testRunId: $testRunId, running: $running, reset: $reset) \n}",
                "variables": "{\n  \"testRunId\": \"string\",\n  \"running\": false,\n  \"reset\": false\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to set the timer in Test Run. This will start, pause or stop the timer in Test Run.\n===\nThe mutation below start the timer in Test Run.\n<pre>\nmutation {\n    <b>setTestRunTimer</b>( \n        testRunId: \"5acc7ab0a3fe1b6fcdc3c737\"\n        running: true\n    ) {\n        warnings\n    }\n}\n</pre>\n\nThe mutation below stop the timer in Test Run.\n<pre>\nmutation {\n    <b>setTestRunTimer</b>( \n        testRunId: \"5acc7ab0a3fe1b6fcdc3c737\"\n        reset: true\n    ) {\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    },
    {
      "name": "2. Mutations - Tests",
      "item": [
        {
          "name": "createTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Createtest($testType: UpdateTestTypeInput, $steps: [CreateStepInput], $unstructured: String, $gherkin: String, $preconditionIssueIds: [String], $folderPath: String, $jira: JSON!) {\n  createTest(testType: $testType, steps: $steps, unstructured: $unstructured, gherkin: $gherkin, preconditionIssueIds: $preconditionIssueIds, folderPath: $folderPath, jira: $jira) {\n    test {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    definition\n    jira\n    lastModified\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    jira\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    unstructured\n    gherkin\n    scenarioType\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    jira\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n    warnings\n  }\n}",
                "variables": "{\n  \"testType\": {\n    \"id\": \"string\",\n    \"name\": \"Test Name\"\n  },\n  \"steps\": [\n    {\n      \"action\": \"string\",\n      \"data\": \"string\",\n      \"result\": \"string\",\n      \"attachments\": [\n        {\n          \"filename\": \"Test Name\",\n          \"mimeType\": \"string\",\n          \"data\": \"string\"\n        }\n      ],\n      \"customFields\": [\n        {\n          \"id\": \"string\",\n          \"value\": {\n            \"key\": \"value\"\n          }\n        }\n      ],\n      \"callTestIssueId\": \"string\"\n    }\n  ],\n  \"unstructured\": \"string\",\n  \"gherkin\": \"string\",\n  \"preconditionIssueIds\": [\n    \"string\"\n  ],\n  \"folderPath\": \"string\",\n  \"jira\": {\n    \"key\": \"value\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to create a new Test.\n===\nThe mutation below will create a new Test.\n<pre>\nmutation {\n    <b>createTest</b>(\n        testType: { name: \"Generic\" },\n        unstructured: \"Perform exploratory tests on calculator.\",\n        jira: {\n            fields: { summary:\"Exploratory Test\", project: {key: \"CALC\"} }\n        }\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            unstructured\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}\n</pre>\n=== ===\nThe mutation below will create a new Test.\n<pre>\nmutation {\n    <b>createTest</b>(\n        testType: { name: \"Manual\" },\n        steps: [\n            {\n                action: \"Create first example step\",\n                result: \"First step was created\"\n            },\n            {\n                action: \"Create second example step with data\",\n                data: \"Data for the step\",\n                result: \"Second step was created with data\"\n            }\n        ],\n        jira: {\n            fields: { summary:\"Exploratory Test\", project: {key: \"CALC\"} }\n        }\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            steps {\n                action\n                data\n                result\n            }\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestType",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updatetesttype($issueId: String!, $versionId: Int, $testType: UpdateTestTypeInput!) {\n  updateTestType(issueId: $issueId, versionId: $versionId, testType: $testType) {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    jira\n    status {\n    name\n    description\n    color\n  }\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100,\n  \"testType\": {\n    \"id\": \"string\",\n    \"name\": \"Test Name\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the Test Type of a Test.\n===\nThe mutation below will update the Test Type of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>updateTestType</b>(issueId: \"12345\", testType: {name: \"Manual\"} ) {\n        issueId\n        testType {\n            name\n            kind\n        }\n    }\n}\n</pre>\n===\n===\nThe mutation below will update the Test Type of the version 3 of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>updateTestType</b>(issueId: \"12345\", versionId: 3, testType: {name: \"Manual\"} ) {\n        issueId\n        testType {\n            name\n            kind\n        }\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateUnstructuredTestDefinition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updateunstructuredtestdefinition($issueId: String!, $versionId: Int, $unstructured: String!) {\n  updateUnstructuredTestDefinition(issueId: $issueId, versionId: $versionId, unstructured: $unstructured) {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    jira\n    status {\n    name\n    description\n    color\n  }\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100,\n  \"unstructured\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the Unstructured definition of a Test.\n===\nThe mutation below will update the unstructured definition of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>updateUnstructuredTestDefinition</b>(issueId: \"12345\", unstructured: \"Generic definition\" ) {\n        issueId\n        unstructured\n    }\n}\n</pre>\n===\n===\nThe mutation below will update the unstructured definition of the version 3 of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>updateUnstructuredTestDefinition</b>(issueId: \"12345\", versionId: 3, unstructured: \"Generic definition\" ) {\n        issueId\n        unstructured\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateGherkinTestDefinition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updategherkintestdefinition($issueId: String!, $versionId: Int, $gherkin: String!) {\n  updateGherkinTestDefinition(issueId: $issueId, versionId: $versionId, gherkin: $gherkin) {\n    issueId\n    projectId\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    folder {\n    name\n    path\n  }\n    dataset {\n    id\n    testIssueId\n    testExecIssueId\n    testPlanIssueId\n    testStepId\n    callTestIssueId\n    parameters {\n    name\n    type\n    projectListId\n    combinations\n    listValues\n  }\n    rows {\n    order\n    Values\n  }\n  }\n    scenarioType\n    preconditions {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    preconditionType {\n    id\n    name\n    kind\n  }\n    definition\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testVersions {\n    total\n    start\n    limit\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n    folder {\n    name\n    path\n  }\n  }\n  }\n    testSets {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    lastModified\n  }\n  }\n    testPlans {\n    total\n    start\n    limit\n    results {\n    issueId\n    projectId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n  }\n    jira\n    folders {\n    name\n    path\n    issuesCount\n    testsCount\n    preconditionsCount\n    folders\n  }\n    lastModified\n  }\n    warnings\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    history {\n    total\n    start\n    limit\n    results {\n    version\n    user\n    date\n    action\n    changes {\n    field\n    change\n  }\n  }\n  }\n    testVersions {\n    total\n    start\n    limit\n    results {\n    id\n    name\n    default\n    archived\n    testType {\n    id\n    name\n    kind\n  }\n    steps {\n    id\n    action\n    data\n    result\n    callTestIssueId\n  }\n    unstructured\n    gherkin\n    scenarioType\n    test {\n    issueId\n    projectId\n    unstructured\n    gherkin\n    scenarioType\n    jira\n    lastModified\n  }\n    preconditions {\n    total\n    start\n    limit\n  }\n    testExecutions(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    testRuns(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    lastModified\n  }\n  }\n    coverableIssues {\n    total\n    start\n    limit\n    results {\n    issueId\n    tests(limit: 10) {\n    total\n    start\n    limit\n    results {\n      issueId\n      key\n    }\n  }\n    jira\n    status {\n    name\n    description\n    color\n  }\n  }\n    warnings\n  }\n    jira\n    status {\n    name\n    description\n    final\n    color\n  }\n    lastModified\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100,\n  \"gherkin\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update the Gherkin definition of a Test.\n===\nThe mutation below will update the gherkin definition of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>updateGherkinTestDefinition</b>(issueId: \"12345\", gherkin: \"Gherkin definition\" ) {\n        issueId\n        gherkin\n    }\n}\n</pre>\n===\n===\nThe mutation below will update the gherkin definition of the version 3 of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>updateGherkinTestDefinition</b>(issueId: \"12345\", versionId: 3, gherkin: \"Gherkin definition\" ) {\n        issueId\n        gherkin\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "deleteTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Deletetest($issueId: String!) {\n  deleteTest(issueId: $issueId) \n}",
                "variables": "{\n  \"issueId\": \"12345\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to delete a Test.\n===\nThe mutation below will delete the Test with issue id \"12345\".\n<pre>\nmutation {\n    <b>deleteTest</b>(issueId: \"12345\")\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addteststep($issueId: String!, $versionId: Int, $step: CreateStepInput!) {\n  addTestStep(issueId: $issueId, versionId: $versionId, step: $step) {\n    id\n    action\n    data\n    result\n    attachments {\n    id\n    filename\n    storedInJira\n    downloadLink\n  }\n    customFields {\n    id\n    name\n    value\n  }\n    callTestIssueId\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100,\n  \"step\": {\n    \"action\": \"string\",\n    \"data\": \"string\",\n    \"result\": \"string\",\n    \"attachments\": [\n      {\n        \"filename\": \"Test Name\",\n        \"mimeType\": \"string\",\n        \"data\": \"string\"\n      }\n    ],\n    \"customFields\": [\n      {\n        \"id\": \"string\",\n        \"value\": {\n          \"key\": \"value\"\n        }\n      }\n    ],\n    \"callTestIssueId\": \"string\"\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to add a Step to a Test.\n===\nThe mutation below will add a new Step to the test with id \"12345\".\n<pre>\nmutation {\n    <b>addTestStep</b>(\n        issueId: \"12345\",\n        step: {\n            action: \"Use Xray Cloud Rest Api to add a new Step to the Test\",\n            result: \"Step was added to the Test\",\n            customFields: [{id:\"5ddc0e585da9670010e608dc\", value:\"Tokyo\"}]\n        }\n    ) {\n        id\n        action\n        data\n        result\n    }\n}\n</pre>\n===\n===\nThe mutation below will add a new Step to the version 3 of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>addTestStep</b>(\n        issueId: \"12345\",\n        versionId: 3,\n        step: {\n            action: \"Use Xray Cloud Rest Api to add a new Step to the Test\",\n            result: \"Step was added to the Test\",\n            customFields: [{id:\"5ddc0e585da9670010e608dc\", value:\"Tokyo\"}]\n        }\n    ) {\n        id\n        action\n        data\n        result\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "updateTestStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Updateteststep($stepId: String!, $step: UpdateStepInput!) {\n  updateTestStep(stepId: $stepId, step: $step) {\n    addedAttachments\n    removedAttachments\n    warnings\n  }\n}",
                "variables": "{\n  \"stepId\": \"string\",\n  \"step\": {\n    \"action\": \"string\",\n    \"data\": \"string\",\n    \"result\": \"string\",\n    \"attachments\": {\n      \"add\": [\n        {\n          \"filename\": \"Test Name\",\n          \"mimeType\": \"string\",\n          \"data\": \"string\"\n        }\n      ],\n      \"removeIds\": [\n        \"string\"\n      ],\n      \"removeFilenames\": [\n        \"Test Name\"\n      ]\n    },\n    \"customFields\": [\n      {\n        \"id\": \"string\",\n        \"value\": {\n          \"key\": \"value\"\n        }\n      }\n    ]\n  }\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to update a Step of a Test.\n===\nThe mutation below will update the Step with id \"836d30ec-f034-4a03-879e-9c44a1d6d1fe\".\n<pre>\nmutation {\n    <b>updateTestStep</b>(\n        stepId: \"836d30ec-f034-4a03-879e-9c44a1d6d1fe\",\n        step: {\n            result: \"Xray Cloud Rest Api works as expected\",\n            customFields: [{id:\"5ddc0e585da9670010e608dc\", value:\"Lisbon\"}]\n        }\n    ) {\n        warnings\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestStep",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removeteststep($stepId: String!) {\n  removeTestStep(stepId: $stepId) \n}",
                "variables": "{\n  \"stepId\": \"string\"\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove a Step from a Test.\n===\nThe mutation below removes the Step with id \"836d30ec-f034-4a03-879e-9c44a1d6d1fe\".\n<pre>\nmutation {\n    <b>removeTestStep</b>(\n        stepId: \"836d30ec-f034-4a03-879e-9c44a1d6d1fe\",\n    )\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeAllTestSteps",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removeallteststeps($issueId: String!, $versionId: Int) {\n  removeAllTestSteps(issueId: $issueId, versionId: $versionId) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove all Steps from a Test.\n===\nThe mutation below removes all the Steps from test with id \"12345\".\n<pre>\nmutation {\n    <b>removeAllTestSteps</b>(\n        issueId: \"12345\",\n    )\n}\n</pre>\n===\n===\nThe mutation below removes all the Steps from the version 3 of the Test with id \"12345\".\n<pre>\nmutation {\n    <b>removeAllTestSteps</b>(\n        issueId: \"12345\",\n        versionId: 3\n    )\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addPreconditionsToTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addpreconditionstotest($issueId: String!, $versionId: Int, $preconditionIssueIds: [String]!) {\n  addPreconditionsToTest(issueId: $issueId, versionId: $versionId, preconditionIssueIds: $preconditionIssueIds) {\n    addedPreconditions\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100,\n  \"preconditionIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Preconditions to the Test.\n<b>Note</b>: The preconditions to be associated with the Test must be of the same Test Type of the Test.\n===\nThe mutation below will associate the precondition with issue id \"54321\" to the test \"12345\".\n<pre>\nmutation {\n    <b>addPreconditionsToTest</b>(\n        issueId: \"12345\",\n        preconditionIssueIds: [\"54321\"]\n    ) {\n        addedPreconditions\n        warning\n    }\n}\n</pre>\n===\n===\nThe mutation below will associate the precondition with issue id \"54321\" to the version 3 of the Test \"12345\".\n<pre>\nmutation {\n    <b>addPreconditionsToTest</b>(\n        issueId: \"12345\",\n        versionId: 3,\n        preconditionIssueIds: [\"54321\"]\n    ) {\n        addedPreconditions\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removePreconditionsFromTest",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removepreconditionsfromtest($issueId: String!, $versionId: Int, $preconditionIssueIds: [String]!) {\n  removePreconditionsFromTest(issueId: $issueId, versionId: $versionId, preconditionIssueIds: $preconditionIssueIds) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"versionId\": 100,\n  \"preconditionIssueIds\": [\n    \"string\"\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Preconditions from the Test.\n===\nThe mutation below will remove the preconditions with issue id \"54321\" and \"67890\" from the test \"12345\".\n<pre>\nmutation {\n    <b>removePreconditionsFromTest</b>(issueId: \"12345\", preconditionIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n===\n===\nThe mutation below will remove the preconditions with issue id \"54321\" and \"67890\" from the version 3 of the Test \"12345\".\n<pre>\nmutation {\n    <b>removePreconditionsFromTest</b>(issueId: \"12345\", versionId: 3, preconditionIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "addTestsToPrecondition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Addteststoprecondition($issueId: String!, $testIssueIds: [String], $tests: [TestWithVersionInput]) {\n  addTestsToPrecondition(issueId: $issueId, testIssueIds: $testIssueIds, tests: $tests) {\n    addedTests\n    warning\n  }\n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"tests\": [\n    {\n      \"issueId\": \"12345\",\n      \"versionId\": 100\n    }\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to associate Tests to the Precondition. One of <b>testIssueIds</b> or <b>tests</b> is required.\n<b>Note</b>: The Tests to be associated with the Precondition must be of the same Test Type of the Precondition.\n===\nThe mutation below will associate the Test with issue id \"54321\" to the Precondition \"12345\"\n<pre>\nmutation {\n    <b>addTestsToPrecondition</b>(\n        issueId: \"12345\",\n        testIssueIds: [\"54321\"]\n    ) {\n        addedTests\n        warning\n    }\n}\n</pre>\n===\n===\nThe mutation below will associate the version 2 of Test \"54321\" and the version 3 of Test \"67890\" to the Precondition \"12345\"\n<pre>\nmutation {\n    <b>addTestsToPrecondition</b>(\n        issueId: \"12345\",\n        tests: [{ issueId: \"54321\", versionId: 2 }, { issueId: \"67890\", versionId: 3 }]\n    ) {\n        addedTests\n        warning\n    }\n}\n</pre>\n==="
          },
          "response": []
        },
        {
          "name": "removeTestsFromPrecondition",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "graphql",
              "graphql": {
                "query": "mutation Removetestsfromprecondition($issueId: String!, $testIssueIds: [String], $tests: [TestWithVersionInput]) {\n  removeTestsFromPrecondition(issueId: $issueId, testIssueIds: $testIssueIds, tests: $tests) \n}",
                "variables": "{\n  \"issueId\": \"12345\",\n  \"testIssueIds\": [\n    \"string\"\n  ],\n  \"tests\": [\n    {\n      \"issueId\": \"12345\",\n      \"versionId\": 100\n    }\n  ]\n}"
              }
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "graphql"
              ]
            },
            "description": "Mutation used to remove Tests from the Precondition. One of <b>testIssueIds</b> or <b>tests</b> is required.\n===\nThe mutation below will remove the Tests with issue id \"54321\" and \"67890\" from the Precondition \"12345\".\n<pre>\nmutation {\n    <b>removeTestsFromPrecondition</b>(issueId: \"12345\", testIssueIds: [\"54321\", \"67890\"])\n}\n</pre>\n===\n===\nThe mutation below will remove the version 2 of Test \"54321\" and the version 3 of Test \"67890\" from the Precondition \"12345\".\n<pre>\nmutation {\n    <b>removeTestsFromPrecondition</b>(\n        issueId: \"12345\",\n        tests: [{ issueId: \"54321\", versionId: 2 }, { issueId: \"67890\", versionId: 3 }]\n    )\n}\n</pre>\n==="
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://xray.cloud.getxray.app/api/v2",
      "type": "string"
    },
    {
      "key": "project_id",
      "value": "26420",
      "type": "string",
      "description": "Default project ID (MLBMOB) - Update for your project"
    },
    {
      "key": "xray_token_expires",
      "value": "",
      "type": "string",
      "description": "Token expiration time (set automatically)"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Only run for GraphQL requests (skip authentication)",
          "if (pm.request.url.getPath().includes('/graphql')) {",
          "    // Attempt to get token from vault",
          "    pm.vault.get('Xray_Token')",
          "        .then((token) => {",
          "            if (token) {",
          "                // Set the Authorization header",
          "                pm.request.headers.add({",
          "                    key: 'Authorization',",
          "                    value: `Bearer ${token}`",
          "                });",
          "                console.log('\u2705 Using Xray token from vault');",
          "            } else {",
          "                // No token found",
          "                console.error('\u274c No Xray token found in vault');",
          "                pm.execution.setNextRequest(null); // Stop execution",
          "                ",
          "                // Show popup with instructions",
          "                pm.visualizer.set(`",
          "                    <div style='font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;'>",
          "                        <h2 style='color: #d73502;'>\u26a0\ufe0f Authentication Required</h2>",
          "                        <p>No authentication token found. Please follow these steps:</p>",
          "                        <ol>",
          "                            <li><strong>Run the Authentication Request:</strong>",
          "                                <ul>",
          "                                    <li>Go to '0. Authentication' \u2192 'Get JWT Token'</li>",
          "                                    <li>Make sure your Vault contains:</li>",
          "                                    <li style='margin-left: 20px;'><code>Xray_Client_Id</code> - Your client ID</li>",
          "                                    <li style='margin-left: 20px;'><code>Xray_Client_Secret</code> - Your client secret</li>",
          "                                    <li>Send the request</li>",
          "                                </ul>",
          "                            </li>",
          "                            <li><strong>The token will be automatically saved to Vault</strong></li>",
          "                            <li><strong>Retry this request</strong></li>",
          "                        </ol>",
          "                        <p style='background: #f0f0f0; padding: 10px; border-radius: 5px;'>",
          "                            <strong>Note:</strong> Tokens expire after 24 hours. Re-authenticate when needed.",
          "                        </p>",
          "                    </div>",
          "                `);",
          "            }",
          "        })",
          "        .catch((error) => {",
          "            console.error('\u274c Vault access error:', error);",
          "            pm.execution.setNextRequest(null); // Stop execution",
          "            ",
          "            // Show popup with vault setup instructions",
          "            pm.visualizer.set(`",
          "                <div style='font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;'>",
          "                    <h2 style='color: #d73502;'>\ud83d\udd12 Vault Access Required</h2>",
          "                    <p>The script cannot access Postman Vault. Please enable vault access:</p>",
          "                    <ol>",
          "                        <li><strong>Open Postman Vault:</strong> Click the \ud83d\udd12 icon in the bottom bar</li>",
          "                        <li><strong>Go to Settings:</strong> Click the \u2699\ufe0f gear icon in the vault</li>",
          "                        <li><strong>Enable Script Access:</strong> Toggle ON 'Enable support in scripts'</li>",
          "                        <li><strong>Add Your Credentials:</strong>",
          "                            <ul>",
          "                                <li>Add <code>Xray_Client_Id</code> with your client ID</li>",
          "                                <li>Add <code>Xray_Client_Secret</code> with your client secret</li>",
          "                            </ul>",
          "                        </li>",
          "                        <li><strong>Retry the request</strong></li>",
          "                    </ol>",
          "                    <p style='background: #fffacd; padding: 10px; border-radius: 5px;'>",
          "                        <strong>Security Note:</strong> Vault keeps your secrets encrypted and never exports them.",
          "                    </p>",
          "                </div>",
          "            `);",
          "        });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Check for authentication errors in GraphQL responses",
          "if (pm.request.url.getPath().includes('/graphql')) {",
          "    if (pm.response.code === 401 || pm.response.code === 403) {",
          "        console.error('\u274c Authentication failed');",
          "        ",
          "        // Show authentication required popup",
          "        pm.visualizer.set(`",
          "            <div style='font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;'>",
          "                <h2 style='color: #d73502;'>\ud83d\udd10 Authentication Failed</h2>",
          "                <p>Your request was not authenticated. This usually means:</p>",
          "                <ul>",
          "                    <li>Your token has expired (tokens last 24 hours)</li>",
          "                    <li>You haven't authenticated yet</li>",
          "                    <li>Your credentials are incorrect</li>",
          "                </ul>",
          "                <h3>To fix this:</h3>",
          "                <ol>",
          "                    <li>Go to '0. Authentication' \u2192 'Get JWT Token'</li>",
          "                    <li>Ensure your Vault contains valid credentials</li>",
          "                    <li>Send the authentication request</li>",
          "                    <li>Retry this request</li>",
          "                </ol>",
          "            </div>",
          "        `);",
          "    }",
          "}"
        ]
      }
    }
  ]
}